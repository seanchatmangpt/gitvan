{
    "sourceFile": "src/config/loader.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1758046934661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758047100185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,98 @@\n+// src/config/loader.mjs\n+// GitVan v2 — Configuration loader with c12 integration\n+// Nitro-style sugar and template string resolution\n+\n+import { loadConfig, watchConfig } from \"c12\";\n+import { klona } from \"klona/full\";\n+import defu from \"defu\";\n+import { GitVanDefaults } from \"./defaults.mjs\";\n+import { normalizeRuntimeConfig } from \"./runtime-config.mjs\";\n+\n+// Nitro-style sugar: defineGitVanConfig(() => ({ ... }))\n+globalThis.defineGitVanConfig = globalThis.defineGitVanConfig || ((c) => c);\n+\n+/**\n+ * Load GitVan configuration with overrides and options\n+ * @param {Object} overrides - Configuration overrides\n+ * @param {Object} opts - Loader options\n+ * @param {boolean} opts.watch - Enable config watching\n+ * @returns {Promise<Object>} Loaded configuration\n+ */\n+export async function loadOptions(overrides = {}, opts = {}) {\n+  const loaded = await _loadUserConfig(overrides, opts);\n+  const options = klona(loaded.config);\n+\n+  // Normalize runtime config from top-level keys\n+  options.runtimeConfig = normalizeRuntimeConfig(options);\n+\n+  // Resolve derived paths\n+  _materializeTemplateStrings(options);\n+\n+  return options;\n+}\n+\n+/**\n+ * Load user configuration using c12\n+ * @param {Object} overrides - Configuration overrides\n+ * @param {Object} opts - Loader options\n+ * @returns {Promise<Object>} Loaded configuration\n+ */\n+async function _loadUserConfig(overrides = {}, opts = {}) {\n+  const name = \"gitvan\";\n+  const cwd = overrides.rootDir || process.cwd();\n+\n+  const defaults = klona(GitVanDefaults);\n+\n+  const cfg = await (opts.watch ? watchConfig : loadConfig)({\n+    name,\n+    cwd,\n+    defaults,\n+    jitiOptions: { interopDefault: true },\n+    extend: { extendKey: [\"extends\"] },\n+    async overrides() {\n+      // Merge simple, keep minimal resolvers\n+      // Handle arrays by replacing instead of merging\n+      const merged = defu(overrides, {});\n+\n+      // Fix array merging for specific keys\n+      if (overrides.templates?.dirs) {\n+        merged.templates = merged.templates || {};\n+        merged.templates.dirs = overrides.templates.dirs;\n+      }\n+\n+      return merged;\n+    },\n+  });\n+\n+  return cfg;\n+}\n+\n+/**\n+ * Simple {{ rootDir }} templating like Nitro uses for defaults\n+ * @param {Object} options - Configuration options\n+ */\n+function _materializeTemplateStrings(options) {\n+  const map = {\n+    \"{{ rootDir }}/.out\": `${options.rootDir}/.out`,\n+    \"{{ rootDir }}/dist\": `${options.rootDir}/dist`,\n+  };\n+  const out = options.output || {};\n+  out.dir = _subst(out.dir, map, options.rootDir);\n+  out.distDir = _subst(out.distDir, map, options.rootDir);\n+  options.output = out;\n+}\n+\n+/**\n+ * Substitute template strings with actual values\n+ * @param {string} val - Value to substitute\n+ * @param {Object} map - Substitution map\n+ * @param {string} root - Root directory\n+ * @returns {string} Substituted value\n+ */\n+function _subst(val, map, root) {\n+  if (typeof val !== \"string\") return val;\n+  return val\n+    .replace(\"{{ rootDir }}/.out\", map[\"{{ rootDir }}/.out\"])\n+    .replace(\"{{ rootDir }}/dist\", map[\"{{ rootDir }}/dist\"])\n+    .replace(\"{{ rootDir }}\", root);\n+}\n"
                }
            ],
            "date": 1758046934661,
            "name": "Commit-0",
            "content": "// src/config/loader.mjs\n// GitVan v2 — Configuration loader with c12 integration\n// Nitro-style sugar and template string resolution\n\nimport { loadConfig, watchConfig } from \"c12\";\nimport { klona } from \"klona/full\";\nimport defu from \"defu\";\nimport { GitVanDefaults } from \"./defaults.mjs\";\nimport { normalizeRuntimeConfig } from \"./runtime-config.mjs\";\n\n// Nitro-style sugar: defineGitVanConfig(() => ({ ... }))\nglobalThis.defineGitVanConfig = globalThis.defineGitVanConfig || ((c) => c);\n\n/**\n * Load GitVan configuration with overrides and options\n * @param {Object} overrides - Configuration overrides\n * @param {Object} opts - Loader options\n * @param {boolean} opts.watch - Enable config watching\n * @returns {Promise<Object>} Loaded configuration\n */\nexport async function loadOptions(overrides = {}, opts = {}) {\n  const loaded = await _loadUserConfig(overrides, opts);\n  const options = klona(loaded.config);\n\n  // Normalize runtime config from top-level keys\n  options.runtimeConfig = normalizeRuntimeConfig(options);\n\n  // Resolve derived paths\n  _materializeTemplateStrings(options);\n\n  return options;\n}\n\n/**\n * Load user configuration using c12\n * @param {Object} overrides - Configuration overrides\n * @param {Object} opts - Loader options\n * @returns {Promise<Object>} Loaded configuration\n */\nasync function _loadUserConfig(overrides = {}, opts = {}) {\n  const name = \"gitvan\";\n  const cwd = overrides.rootDir || process.cwd();\n\n  const defaults = klona(GitVanDefaults);\n\n  const cfg = await (opts.watch ? watchConfig : loadConfig)({\n    name,\n    cwd,\n    defaults,\n    jitiOptions: { interopDefault: true },\n    extend: { extendKey: [\"extends\"] },\n    async overrides() {\n      // Merge simple, keep minimal resolvers\n      // Handle arrays by replacing instead of merging\n      const merged = defu(overrides, {});\n\n      // Fix array merging for specific keys\n      if (overrides.templates?.dirs) {\n        merged.templates = merged.templates || {};\n        merged.templates.dirs = overrides.templates.dirs;\n      }\n\n      return merged;\n    },\n  });\n\n  return cfg;\n}\n\n/**\n * Simple {{ rootDir }} templating like Nitro uses for defaults\n * @param {Object} options - Configuration options\n */\nfunction _materializeTemplateStrings(options) {\n  const map = {\n    \"{{ rootDir }}/.out\": `${options.rootDir}/.out`,\n    \"{{ rootDir }}/dist\": `${options.rootDir}/dist`,\n  };\n  const out = options.output || {};\n  out.dir = _subst(out.dir, map, options.rootDir);\n  out.distDir = _subst(out.distDir, map, options.rootDir);\n  options.output = out;\n}\n\n/**\n * Substitute template strings with actual values\n * @param {string} val - Value to substitute\n * @param {Object} map - Substitution map\n * @param {string} root - Root directory\n * @returns {string} Substituted value\n */\nfunction _subst(val, map, root) {\n  if (typeof val !== \"string\") return val;\n  return val\n    .replace(\"{{ rootDir }}/.out\", map[\"{{ rootDir }}/.out\"])\n    .replace(\"{{ rootDir }}/dist\", map[\"{{ rootDir }}/dist\"])\n    .replace(\"{{ rootDir }}\", root);\n}\n"
        }
    ]
}