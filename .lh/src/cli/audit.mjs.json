{
    "sourceFile": "src/cli/audit.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1758057329115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758072812248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -297,4 +297,5 @@\n \n   // Additional checks could be added here\n   return true;\n }\n+\n"
                }
            ],
            "date": 1758057329115,
            "name": "Commit-0",
            "content": "/**\n * GitVan v2 Audit CLI - Receipt audit and verification commands\n * Provides commands for building audit packs and verifying receipts\n */\n\nimport { useGit } from \"../composables/git.mjs\";\nimport { writeFileSafe } from \"../utils/fs.mjs\";\nimport { loadOptions } from \"../config/loader.mjs\";\nimport { createLogger } from \"../utils/logger.mjs\";\nimport { Receipt, ReceiptQuery } from \"../schemas/receipt.zod.mjs\";\n\nconst logger = createLogger(\"audit-cli\");\n\n/**\n * Audit CLI command handler\n * @param {string} subcommand - Subcommand (build, verify, list, show)\n * @param {object} args - Command arguments\n * @returns {Promise<void>}\n */\nexport async function auditCommand(subcommand = \"build\", args = {}) {\n  const config = await loadOptions();\n\n  switch (subcommand) {\n    case \"build\":\n      return await buildAuditPack(config, args);\n\n    case \"verify\":\n      return await verifyReceipt(config, args);\n\n    case \"list\":\n      return await listReceipts(config, args);\n\n    case \"show\":\n      return await showReceipt(config, args);\n\n    default:\n      throw new Error(`Unknown audit subcommand: ${subcommand}`);\n  }\n}\n\n/**\n * Build audit pack from all receipts\n * @param {object} config - GitVan config\n * @param {object} args - Build arguments\n * @returns {Promise<void>}\n */\nasync function buildAuditPack(config, args) {\n  try {\n    const git = useGit();\n    const receiptsRef = config.receipts?.ref || \"refs/notes/gitvan/results\";\n    const outPath = args.out || \"dist/audit.json\";\n\n    console.log(\"Building audit pack...\");\n\n    // Get all receipt notes\n    const listOutput = await git\n      .run(`notes --ref=${receiptsRef} list`)\n      .catch(() => \"\");\n    const lines = listOutput.split(\"\\n\").filter(Boolean);\n\n    const receipts = [];\n    let validCount = 0;\n    let invalidCount = 0;\n\n    for (const line of lines) {\n      const sha = line.split(\" \")[0];\n      if (!sha) continue;\n\n      try {\n        const rawReceipt = await git\n          .run(`notes --ref=${receiptsRef} show ${sha}`)\n          .catch(() => null);\n        if (!rawReceipt) continue;\n\n        const receipt = JSON.parse(rawReceipt);\n        const validatedReceipt = Receipt.parse(receipt);\n\n        receipts.push(validatedReceipt);\n        validCount++;\n      } catch (error) {\n        logger.warn(`Invalid receipt for commit ${sha}:`, error.message);\n        invalidCount++;\n      }\n    }\n\n    // Build audit summary\n    const summary = {\n      ok: receipts.filter((r) => r.status === \"OK\").length,\n      error: receipts.filter((r) => r.status === \"ERROR\").length,\n      skip: receipts.filter((r) => r.status === \"SKIP\").length,\n    };\n\n    const auditPack = {\n      kind: \"receipt-collection\",\n      timestamp: new Date().toISOString(),\n      count: receipts.length,\n      receipts,\n      summary,\n      metadata: {\n        totalProcessed: lines.length,\n        validReceipts: validCount,\n        invalidReceipts: invalidCount,\n        gitRef: receiptsRef,\n        generatedBy: \"gitvan-audit-cli\",\n      },\n    };\n\n    // Write audit pack\n    const absPath = writeFileSafe(\n      config.rootDir,\n      outPath,\n      JSON.stringify(auditPack, null, 2),\n    );\n\n    console.log(`Audit pack written: ${absPath}`);\n    console.log(`  Total receipts: ${receipts.length}`);\n    console.log(\n      `  OK: ${summary.ok}, Error: ${summary.error}, Skip: ${summary.skip}`,\n    );\n    console.log(`  Invalid receipts: ${invalidCount}`);\n  } catch (error) {\n    logger.error(\"Failed to build audit pack:\", error.message);\n    throw error;\n  }\n}\n\n/**\n * Verify a specific receipt\n * @param {object} config - GitVan config\n * @param {object} args - Verify arguments\n * @returns {Promise<void>}\n */\nasync function verifyReceipt(config, args) {\n  try {\n    if (!args.id) {\n      throw new Error(\"Receipt ID required for verify command\");\n    }\n\n    const git = useGit();\n    const receiptsRef = config.receipts?.ref || \"refs/notes/gitvan/results\";\n\n    console.log(`Verifying receipt: ${args.id}`);\n\n    // Find receipt by ID\n    const listOutput = await git\n      .run(`notes --ref=${receiptsRef} list`)\n      .catch(() => \"\");\n    const lines = listOutput.split(\"\\n\").filter(Boolean);\n\n    let receipt = null;\n    let commitSha = null;\n\n    for (const line of lines) {\n      const sha = line.split(\" \")[0];\n      if (!sha) continue;\n\n      try {\n        const rawReceipt = await git.run(\n          `notes --ref=${receiptsRef} show ${sha}`,\n        );\n        const parsedReceipt = JSON.parse(rawReceipt);\n\n        if (parsedReceipt.id === args.id) {\n          receipt = Receipt.parse(parsedReceipt);\n          commitSha = sha;\n          break;\n        }\n      } catch (error) {\n        // Skip invalid receipts\n        continue;\n      }\n    }\n\n    if (!receipt) {\n      throw new Error(`Receipt ${args.id} not found`);\n    }\n\n    console.log(\"Receipt found:\");\n    console.log(`  ID: ${receipt.id}`);\n    console.log(`  Status: ${receipt.status}`);\n    console.log(`  Action: ${receipt.action}`);\n    console.log(`  Timestamp: ${receipt.ts}`);\n    console.log(`  Commit: ${receipt.commit || commitSha}`);\n\n    // Verify receipt integrity\n    const isValid = verifyReceiptIntegrity(receipt);\n\n    if (isValid) {\n      console.log(\"‚úÖ Receipt verification passed\");\n    } else {\n      console.log(\"‚ùå Receipt verification failed\");\n    }\n  } catch (error) {\n    logger.error(\"Failed to verify receipt:\", error.message);\n    throw error;\n  }\n}\n\n/**\n * List receipts with optional filtering\n * @param {object} config - GitVan config\n * @param {object} args - List arguments\n * @returns {Promise<void>}\n */\nasync function listReceipts(config, args) {\n  try {\n    const git = useGit();\n    const receiptsRef = config.receipts?.ref || \"refs/notes/gitvan/results\";\n    const limit = args.limit ? parseInt(args.limit) : 50;\n\n    console.log(`Listing receipts (limit: ${limit})...`);\n\n    const listOutput = await git\n      .run(`notes --ref=${receiptsRef} list`)\n      .catch(() => \"\");\n    const lines = listOutput.split(\"\\n\").filter(Boolean);\n\n    const receipts = [];\n\n    for (const line of lines.slice(0, limit)) {\n      const sha = line.split(\" \")[0];\n      if (!sha) continue;\n\n      try {\n        const rawReceipt = await git.run(\n          `notes --ref=${receiptsRef} show ${sha}`,\n        );\n        const receipt = JSON.parse(rawReceipt);\n        receipts.push(receipt);\n      } catch (error) {\n        // Skip invalid receipts\n        continue;\n      }\n    }\n\n    if (receipts.length === 0) {\n      console.log(\"No receipts found\");\n      return;\n    }\n\n    console.log(`Found ${receipts.length} receipt(s):`);\n    console.log();\n\n    for (const receipt of receipts) {\n      console.log(`üìã ${receipt.id}`);\n      console.log(`   Status: ${receipt.status}`);\n      console.log(`   Action: ${receipt.action}`);\n      console.log(`   Time: ${receipt.ts}`);\n      if (receipt.commit) {\n        console.log(`   Commit: ${receipt.commit}`);\n      }\n      console.log();\n    }\n  } catch (error) {\n    logger.error(\"Failed to list receipts:\", error.message);\n    throw error;\n  }\n}\n\n/**\n * Show detailed receipt information\n * @param {object} config - GitVan config\n * @param {object} args - Show arguments\n * @returns {Promise<void>}\n */\nasync function showReceipt(config, args) {\n  try {\n    if (!args.id) {\n      throw new Error(\"Receipt ID required for show command\");\n    }\n\n    // Similar to verify but with more detailed output\n    await verifyReceipt(config, args);\n  } catch (error) {\n    logger.error(\"Failed to show receipt:\", error.message);\n    throw error;\n  }\n}\n\n/**\n * Verify receipt integrity\n * @param {object} receipt - Receipt object\n * @returns {boolean} True if valid\n */\nfunction verifyReceiptIntegrity(receipt) {\n  // Basic integrity checks\n  if (!receipt.id || !receipt.status || !receipt.ts || !receipt.action) {\n    return false;\n  }\n\n  // Check timestamp format\n  try {\n    new Date(receipt.ts);\n  } catch {\n    return false;\n  }\n\n  // Additional checks could be added here\n  return true;\n}\n"
        }
    ]
}