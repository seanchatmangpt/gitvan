{
    "sourceFile": "tests/e2e/cli-integration.test.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758072623002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758072623002,
            "name": "Commit-0",
            "content": "// tests/e2e/cli-integration.test.mjs\n// Comprehensive end-to-end integration tests for GitVan v2 CLI\n// Tests all CLI commands working together in the playground environment\n\nimport { describe, it, expect, beforeEach, afterEach } from \"vitest\";\nimport { spawn } from \"node:child_process\";\nimport { promises as fs } from \"node:fs\";\nimport { join } from \"pathe\";\nimport { fileURLToPath } from \"node:url\";\n\nconst __dirname = fileURLToPath(new URL(\".\", import.meta.url));\nconst playgroundDir = join(__dirname, \"../../playground\");\nconst gitvanCli = join(__dirname, \"../../src/cli.mjs\");\n\ndescribe(\"GitVan v2 CLI Integration E2E Tests\", () => {\n  let originalCwd;\n  let tempDir;\n\n  beforeEach(async () => {\n    originalCwd = process.cwd();\n    tempDir = join(playgroundDir, \"test-integration-temp\");\n    await fs.mkdir(tempDir, { recursive: true });\n  });\n\n  afterEach(async () => {\n    process.chdir(originalCwd);\n    try {\n      await fs.rm(tempDir, { recursive: true, force: true });\n    } catch {\n      // Ignore cleanup errors\n    }\n  });\n\n  // Helper function to run CLI commands\n  async function runCliCommand(args, options = {}) {\n    return new Promise((resolve, reject) => {\n      const child = spawn(\"node\", [gitvanCli, ...args], {\n        cwd: playgroundDir,\n        stdio: [\"pipe\", \"pipe\", \"pipe\"],\n        ...options,\n      });\n\n      let stdout = \"\";\n      let stderr = \"\";\n\n      child.stdout.on(\"data\", (data) => {\n        stdout += data.toString();\n      });\n\n      child.stderr.on(\"data\", (data) => {\n        stderr += data.toString();\n      });\n\n      child.on(\"close\", (code) => {\n        resolve({\n          code,\n          stdout: stdout.trim(),\n          stderr: stderr.trim(),\n        });\n      });\n\n      child.on(\"error\", (error) => {\n        reject(error);\n      });\n    });\n  }\n\n  describe(\"Complete CLI workflow\", () => {\n    it(\"should complete a full job lifecycle\", async () => {\n      // 1. List existing jobs\n      const listResult = await runCliCommand([\"job\", \"list\"]);\n      expect(listResult.code).toBe(0);\n      expect(listResult.stdout).toContain(\"Available jobs\");\n\n      // 2. Run a simple job\n      const runResult = await runCliCommand([\"run\", \"test/simple\"]);\n      expect(runResult.code).toBe(0);\n\n      // 3. Check daemon status\n      const daemonResult = await runCliCommand([\"daemon\", \"status\"]);\n      expect(daemonResult.code).toBe(0);\n      expect(daemonResult.stdout).toContain(\"GitVan Daemon Status\");\n\n      // 4. List cron jobs\n      const cronResult = await runCliCommand([\"cron\", \"list\"]);\n      expect(cronResult.code).toBe(0);\n\n      // 5. List events\n      const eventResult = await runCliCommand([\"event\", \"list\"]);\n      expect(eventResult.code).toBe(0);\n\n      // 6. Check audit receipts\n      const auditResult = await runCliCommand([\"audit\", \"list\"]);\n      expect(auditResult.code).toBe(0);\n    });\n\n    it(\"should handle AI-powered job generation workflow\", async () => {\n      // 1. Draft a job specification\n      const draftResult = await runCliCommand([\n        \"chat\",\n        \"draft\",\n        \"Create a file backup job\",\n      ]);\n      expect(draftResult.code).toBe(0);\n      expect(draftResult.stdout).toContain(\"Generated specification\");\n\n      // 2. Preview job generation\n      const previewResult = await runCliCommand([\n        \"chat\",\n        \"preview\",\n        \"Create a logging job\",\n      ]);\n      expect(previewResult.code).toBe(0);\n      expect(previewResult.stdout).toContain(\"Preview\");\n\n      // 3. Generate a job file\n      const generateResult = await runCliCommand([\n        \"chat\",\n        \"generate\",\n        \"Create a cleanup job\",\n        \"--output\",\n        join(tempDir, \"cleanup-job.mjs\"),\n      ]);\n      expect(generateResult.code).toBe(0);\n      expect(generateResult.stdout).toContain(\"Generated job file\");\n\n      // 4. Apply the job\n      const applyResult = await runCliCommand([\n        \"chat\",\n        \"apply\",\n        \"Create a test job\",\n        \"--name\",\n        \"e2e-test-job\",\n      ]);\n      expect(applyResult.code).toBe(0);\n      expect(applyResult.stdout).toContain(\"Applied job\");\n\n      // 5. Explain the job\n      const explainResult = await runCliCommand([\n        \"chat\",\n        \"explain\",\n        \"test/simple\",\n      ]);\n      expect(explainResult.code).toBe(0);\n      expect(explainResult.stdout).toContain(\"Job Analysis\");\n    });\n\n    it(\"should handle daemon and cron integration\", async () => {\n      // 1. Start daemon\n      const startResult = await runCliCommand([\"daemon\", \"start\"]);\n      expect(startResult.code).toBe(0);\n      expect(startResult.stdout).toContain(\"Daemon started\");\n\n      // 2. Check daemon status\n      const statusResult = await runCliCommand([\"daemon\", \"status\"]);\n      expect(statusResult.code).toBe(0);\n      expect(statusResult.stdout).toContain(\"GitVan Daemon Status\");\n\n      // 3. Start cron scheduler\n      const cronStartResult = await runCliCommand([\"cron\", \"start\"]);\n      expect(cronStartResult.code).toBe(0);\n\n      // 4. Check cron status\n      const cronStatusResult = await runCliCommand([\"cron\", \"status\"]);\n      expect(cronStatusResult.code).toBe(0);\n\n      // 5. Stop daemon\n      const stopResult = await runCliCommand([\"daemon\", \"stop\"]);\n      expect(stopResult.code).toBe(0);\n      expect(stopResult.stdout).toContain(\"Daemon stopped\");\n    });\n\n    it(\"should handle event simulation and testing\", async () => {\n      // 1. Simulate a file change event\n      const simulateResult = await runCliCommand([\n        \"event\",\n        \"simulate\",\n        \"--files\",\n        \"src/**\",\n      ]);\n      expect(simulateResult.code).toBe(0);\n      expect(simulateResult.stdout).toContain(\"Simulated event\");\n\n      // 2. Test event predicate\n      const testResult = await runCliCommand([\n        \"event\",\n        \"test\",\n        \"--predicate\",\n        '{\"type\":\"push\",\"branch\":\"main\"}',\n      ]);\n      expect(testResult.code).toBe(0);\n      expect(testResult.stdout).toContain(\"Predicate test\");\n\n      // 3. Trigger an event\n      const triggerResult = await runCliCommand([\n        \"event\",\n        \"trigger\",\n        \"--type\",\n        \"push\",\n      ]);\n      expect(triggerResult.code).toBe(0);\n      expect(triggerResult.stdout).toContain(\"Event triggered\");\n    });\n\n    it(\"should handle audit and receipt management\", async () => {\n      // 1. Build audit pack\n      const buildResult = await runCliCommand([\n        \"audit\",\n        \"build\",\n        \"--out\",\n        join(tempDir, \"audit.json\"),\n      ]);\n      expect(buildResult.code).toBe(0);\n      expect(buildResult.stdout).toContain(\"Audit pack built\");\n\n      // 2. Verify receipts\n      const verifyResult = await runCliCommand([\"audit\", \"verify\"]);\n      expect(verifyResult.code).toBe(0);\n      expect(verifyResult.stdout).toContain(\"Receipt verification\");\n\n      // 3. List receipts\n      const listResult = await runCliCommand([\"audit\", \"list\"]);\n      expect(listResult.code).toBe(0);\n      expect(listResult.stdout).toContain(\"Receipts\");\n\n      // 4. Show receipt details\n      const showResult = await runCliCommand([\n        \"audit\",\n        \"show\",\n        \"--receipt\",\n        \"test-receipt\",\n      ]);\n      expect(showResult.code).toBe(0);\n    });\n\n    it(\"should handle LLM operations\", async () => {\n      // 1. Call LLM directly\n      const callResult = await runCliCommand([\n        \"llm\",\n        \"call\",\n        \"What is GitVan?\",\n      ]);\n      expect(callResult.code).toBe(0);\n      expect(callResult.stdout).toContain(\"GitVan\");\n\n      // 2. List available models\n      const modelsResult = await runCliCommand([\"llm\", \"models\"]);\n      expect(modelsResult.code).toBe(0);\n      expect(modelsResult.stdout).toContain(\"Available models\");\n\n      // 3. Call LLM with custom parameters\n      const customResult = await runCliCommand([\n        \"llm\",\n        \"call\",\n        \"Generate a simple function\",\n        \"--temp\",\n        \"0.7\",\n      ]);\n      expect(customResult.code).toBe(0);\n      expect(customResult.stdout.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe(\"Error handling and edge cases\", () => {\n    it(\"should handle invalid commands gracefully\", async () => {\n      const result = await runCliCommand([\"invalid\", \"command\"]);\n      expect(result.code).toBe(1);\n      expect(result.stderr).toContain(\"Unknown command\");\n    });\n\n    it(\"should provide help for all commands\", async () => {\n      const result = await runCliCommand([\"help\"]);\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"GitVan v2\");\n      expect(result.stdout).toContain(\"Usage:\");\n    });\n\n    it(\"should handle missing arguments\", async () => {\n      const result = await runCliCommand([\"chat\", \"draft\"]);\n      expect(result.code).toBe(1);\n      expect(result.stderr).toContain(\"Prompt required\");\n    });\n\n    it(\"should handle malformed arguments\", async () => {\n      const result = await runCliCommand([\n        \"event\",\n        \"test\",\n        \"--predicate\",\n        \"invalid-json\",\n      ]);\n      expect(result.code).toBe(1);\n      expect(result.stderr).toContain(\"Invalid predicate\");\n    });\n  });\n\n  describe(\"Configuration and environment\", () => {\n    it(\"should work with playground configuration\", async () => {\n      const result = await runCliCommand([\"job\", \"list\"]);\n      expect(result.code).toBe(0);\n      // Should find playground jobs\n      expect(result.stdout).toContain(\"Available jobs\");\n    });\n\n    it(\"should respect playground settings\", async () => {\n      const result = await runCliCommand([\"daemon\", \"status\"]);\n      expect(result.code).toBe(0);\n      // Should use playground configuration\n      expect(result.stdout).toContain(\"GitVan Daemon Status\");\n    });\n\n    it(\"should handle different working directories\", async () => {\n      const result = await runCliCommand([\"job\", \"list\"], {\n        cwd: tempDir,\n      });\n      expect(result.code).toBe(0);\n      // Should handle empty job lists gracefully\n      expect(result.stdout).toContain(\"No jobs found\");\n    });\n  });\n\n  describe(\"Performance and reliability\", () => {\n    it(\"should complete commands within reasonable time\", async () => {\n      const start = Date.now();\n      const result = await runCliCommand([\"job\", \"list\"]);\n      const duration = Date.now() - start;\n\n      expect(result.code).toBe(0);\n      expect(duration).toBeLessThan(5000); // Should complete within 5 seconds\n    });\n\n    it(\"should handle concurrent operations\", async () => {\n      // Run multiple commands concurrently\n      const promises = [\n        runCliCommand([\"job\", \"list\"]),\n        runCliCommand([\"daemon\", \"status\"]),\n        runCliCommand([\"cron\", \"list\"]),\n        runCliCommand([\"event\", \"list\"]),\n      ];\n\n      const results = await Promise.all(promises);\n\n      // All commands should succeed\n      results.forEach((result) => {\n        expect(result.code).toBe(0);\n      });\n    });\n\n    it(\"should maintain state consistency\", async () => {\n      // Start daemon\n      await runCliCommand([\"daemon\", \"start\"]);\n\n      // Check status\n      const statusResult = await runCliCommand([\"daemon\", \"status\"]);\n      expect(statusResult.code).toBe(0);\n\n      // Stop daemon\n      await runCliCommand([\"daemon\", \"stop\"]);\n\n      // Check status again\n      const finalStatusResult = await runCliCommand([\"daemon\", \"status\"]);\n      expect(finalStatusResult.code).toBe(0);\n    });\n  });\n});\n"
        }
    ]
}