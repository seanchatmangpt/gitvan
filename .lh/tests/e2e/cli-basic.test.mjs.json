{
    "sourceFile": "tests/e2e/cli-basic.test.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1758072623003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758072843226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n \n   describe(\"Core CLI functionality\", () => {\n     it(\"should show help\", async () => {\n       const result = await runCliCommand([\"help\"]);\n-      \n+\n       expect(result.code).toBe(0);\n       expect(result.stdout).toContain(\"GitVan v2\");\n       expect(result.stdout).toContain(\"Usage:\");\n       expect(result.stdout).toContain(\"gitvan daemon\");\n@@ -79,72 +79,72 @@\n     });\n \n     it(\"should list jobs\", async () => {\n       const result = await runCliCommand([\"job\", \"list\"]);\n-      \n+\n       expect(result.code).toBe(0);\n       expect(result.stdout).toContain(\"Available jobs\");\n       expect(result.stdout).toContain(\"test/simple\");\n       expect(result.stdout).toContain(\"foundation/\");\n     });\n \n     it(\"should run a simple job\", async () => {\n       const result = await runCliCommand([\"run\", \"test/simple\"]);\n-      \n+\n       expect(result.code).toBe(0);\n       expect(result.stdout).toContain(\"Running job: test/simple\");\n     });\n   });\n \n   describe(\"Daemon commands\", () => {\n     it(\"should show daemon status\", async () => {\n       const result = await runCliCommand([\"daemon\", \"status\"]);\n-      \n+\n       expect(result.code).toBe(0);\n       expect(result.stdout).toContain(\"Daemon not running\");\n     });\n \n     it(\"should handle daemon start\", async () => {\n       const result = await runCliCommand([\"daemon\", \"start\"]);\n-      \n+\n       // Should either start successfully or fail gracefully\n       expect(result.code).toBeDefined();\n     });\n \n     it(\"should handle daemon stop\", async () => {\n       const result = await runCliCommand([\"daemon\", \"stop\"]);\n-      \n+\n       expect(result.code).toBe(0);\n     });\n   });\n \n   describe(\"Cron commands\", () => {\n     it(\"should list cron jobs\", async () => {\n       const result = await runCliCommand([\"cron\", \"list\"]);\n-      \n+\n       expect(result.code).toBe(0);\n       expect(result.stdout).toContain(\"cron job\");\n     });\n \n     it(\"should show cron status\", async () => {\n       const result = await runCliCommand([\"cron\", \"status\"]);\n-      \n+\n       expect(result.code).toBe(0);\n       expect(result.stdout).toContain(\"Cron scheduler status\");\n     });\n \n     it(\"should handle cron start\", async () => {\n       const result = await runCliCommand([\"cron\", \"start\"]);\n-      \n+\n       expect(result.code).toBe(0);\n       expect(result.stdout).toContain(\"cron scheduler\");\n     });\n   });\n \n   describe(\"Event commands\", () => {\n     it(\"should list events\", async () => {\n       const result = await runCliCommand([\"event\", \"list\"]);\n-      \n+\n       expect(result.code).toBe(0);\n       expect(result.stdout).toContain(\"event job\");\n     });\n \n@@ -154,9 +154,9 @@\n         \"simulate\",\n         \"--files\",\n         \"src/**\",\n       ]);\n-      \n+\n       expect(result.code).toBe(0);\n       expect(result.stdout).toContain(\"event job\");\n     });\n \n@@ -166,9 +166,9 @@\n         \"test\",\n         \"--predicate\",\n         '{\"type\":\"push\",\"branch\":\"main\"}',\n       ]);\n-      \n+\n       expect(result.code).toBe(0);\n       expect(result.stdout).toContain(\"Testing predicate\");\n     });\n   });\n@@ -180,16 +180,16 @@\n         \"build\",\n         \"--out\",\n         join(tempDir, \"audit.json\"),\n       ]);\n-      \n+\n       expect(result.code).toBe(0);\n       expect(result.stdout).toContain(\"Building audit pack\");\n     });\n \n     it(\"should list receipts\", async () => {\n       const result = await runCliCommand([\"audit\", \"list\"]);\n-      \n+\n       expect(result.code).toBe(0);\n       expect(result.stdout).toContain(\"Listing receipts\");\n     });\n   });\n@@ -200,9 +200,9 @@\n         \"chat\",\n         \"draft\",\n         \"Create a simple hello world job\",\n       ]);\n-      \n+\n       expect(result.code).toBe(0);\n       expect(result.stdout).toContain(\"Generated specification\");\n     });\n \n@@ -213,9 +213,9 @@\n         \"Create a test job\",\n         \"--model\",\n         \"nonexistent-model\",\n       ]);\n-      \n+\n       expect(result.code).toBe(1);\n       expect(result.stderr).toContain(\"AI not available\");\n     });\n \n@@ -224,29 +224,25 @@\n         \"chat\",\n         \"preview\",\n         \"Create a logging job\",\n       ]);\n-      \n+\n       expect(result.code).toBe(0);\n       expect(result.stdout).toContain(\"Preview functionality not implemented\");\n     });\n   });\n \n   describe(\"LLM commands\", () => {\n     it(\"should call LLM\", async () => {\n-      const result = await runCliCommand([\n-        \"llm\",\n-        \"call\",\n-        \"What is GitVan?\",\n-      ]);\n-      \n+      const result = await runCliCommand([\"llm\", \"call\", \"What is GitVan?\"]);\n+\n       expect(result.code).toBe(0);\n       expect(result.stdout).toContain(\"GitVan\");\n     });\n \n     it(\"should list models\", async () => {\n       const result = await runCliCommand([\"llm\", \"models\"]);\n-      \n+\n       expect(result.code).toBe(0);\n       expect(result.stdout).toContain(\"Provider:\");\n       expect(result.stdout).toContain(\"ollama\");\n     });\n@@ -254,16 +250,16 @@\n \n   describe(\"Error handling\", () => {\n     it(\"should handle invalid commands\", async () => {\n       const result = await runCliCommand([\"invalid\", \"command\"]);\n-      \n+\n       expect(result.code).toBe(1);\n       expect(result.stderr).toContain(\"Unknown command\");\n     });\n \n     it(\"should handle missing arguments\", async () => {\n       const result = await runCliCommand([\"chat\", \"draft\"]);\n-      \n+\n       expect(result.code).toBe(1);\n       expect(result.stderr).toContain(\"Prompt required\");\n     });\n \n@@ -273,9 +269,9 @@\n         \"test\",\n         \"--predicate\",\n         \"invalid-json\",\n       ]);\n-      \n+\n       expect(result.code).toBe(1);\n       expect(result.stderr).toContain(\"not valid JSON\");\n     });\n   });\n@@ -309,9 +305,9 @@\n     });\n \n     it(\"should work with playground configuration\", async () => {\n       const result = await runCliCommand([\"job\", \"list\"]);\n-      \n+\n       expect(result.code).toBe(0);\n       expect(result.stdout).toContain(\"Available jobs\");\n       // Should find playground jobs\n       expect(result.stdout).toContain(\"foundation/\");\n"
                }
            ],
            "date": 1758072623003,
            "name": "Commit-0",
            "content": "// tests/e2e/cli-basic.test.mjs\n// Basic end-to-end tests for GitVan v2 CLI commands\n// Tests actual working functionality against the playground environment\n\nimport { describe, it, expect, beforeEach, afterEach } from \"vitest\";\nimport { spawn } from \"node:child_process\";\nimport { promises as fs } from \"node:fs\";\nimport { join } from \"pathe\";\nimport { fileURLToPath } from \"node:url\";\n\nconst __dirname = fileURLToPath(new URL(\".\", import.meta.url));\nconst playgroundDir = join(__dirname, \"../../playground\");\nconst gitvanCli = join(__dirname, \"../../src/cli.mjs\");\n\ndescribe(\"GitVan v2 CLI Basic E2E Tests\", () => {\n  let originalCwd;\n  let tempDir;\n\n  beforeEach(async () => {\n    originalCwd = process.cwd();\n    tempDir = join(playgroundDir, \"test-basic-temp\");\n    await fs.mkdir(tempDir, { recursive: true });\n  });\n\n  afterEach(async () => {\n    process.chdir(originalCwd);\n    try {\n      await fs.rm(tempDir, { recursive: true, force: true });\n    } catch {\n      // Ignore cleanup errors\n    }\n  });\n\n  // Helper function to run CLI commands\n  async function runCliCommand(args, options = {}) {\n    return new Promise((resolve, reject) => {\n      const child = spawn(\"node\", [gitvanCli, ...args], {\n        cwd: playgroundDir,\n        stdio: [\"pipe\", \"pipe\", \"pipe\"],\n        ...options,\n      });\n\n      let stdout = \"\";\n      let stderr = \"\";\n\n      child.stdout.on(\"data\", (data) => {\n        stdout += data.toString();\n      });\n\n      child.stderr.on(\"data\", (data) => {\n        stderr += data.toString();\n      });\n\n      child.on(\"close\", (code) => {\n        resolve({\n          code,\n          stdout: stdout.trim(),\n          stderr: stderr.trim(),\n        });\n      });\n\n      child.on(\"error\", (error) => {\n        reject(error);\n      });\n    });\n  }\n\n  describe(\"Core CLI functionality\", () => {\n    it(\"should show help\", async () => {\n      const result = await runCliCommand([\"help\"]);\n      \n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"GitVan v2\");\n      expect(result.stdout).toContain(\"Usage:\");\n      expect(result.stdout).toContain(\"gitvan daemon\");\n      expect(result.stdout).toContain(\"gitvan job\");\n      expect(result.stdout).toContain(\"gitvan cron\");\n      expect(result.stdout).toContain(\"gitvan chat\");\n    });\n\n    it(\"should list jobs\", async () => {\n      const result = await runCliCommand([\"job\", \"list\"]);\n      \n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Available jobs\");\n      expect(result.stdout).toContain(\"test/simple\");\n      expect(result.stdout).toContain(\"foundation/\");\n    });\n\n    it(\"should run a simple job\", async () => {\n      const result = await runCliCommand([\"run\", \"test/simple\"]);\n      \n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Running job: test/simple\");\n    });\n  });\n\n  describe(\"Daemon commands\", () => {\n    it(\"should show daemon status\", async () => {\n      const result = await runCliCommand([\"daemon\", \"status\"]);\n      \n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Daemon not running\");\n    });\n\n    it(\"should handle daemon start\", async () => {\n      const result = await runCliCommand([\"daemon\", \"start\"]);\n      \n      // Should either start successfully or fail gracefully\n      expect(result.code).toBeDefined();\n    });\n\n    it(\"should handle daemon stop\", async () => {\n      const result = await runCliCommand([\"daemon\", \"stop\"]);\n      \n      expect(result.code).toBe(0);\n    });\n  });\n\n  describe(\"Cron commands\", () => {\n    it(\"should list cron jobs\", async () => {\n      const result = await runCliCommand([\"cron\", \"list\"]);\n      \n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"cron job\");\n    });\n\n    it(\"should show cron status\", async () => {\n      const result = await runCliCommand([\"cron\", \"status\"]);\n      \n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Cron scheduler status\");\n    });\n\n    it(\"should handle cron start\", async () => {\n      const result = await runCliCommand([\"cron\", \"start\"]);\n      \n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"cron scheduler\");\n    });\n  });\n\n  describe(\"Event commands\", () => {\n    it(\"should list events\", async () => {\n      const result = await runCliCommand([\"event\", \"list\"]);\n      \n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"event job\");\n    });\n\n    it(\"should simulate events\", async () => {\n      const result = await runCliCommand([\n        \"event\",\n        \"simulate\",\n        \"--files\",\n        \"src/**\",\n      ]);\n      \n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"event job\");\n    });\n\n    it(\"should test event predicates\", async () => {\n      const result = await runCliCommand([\n        \"event\",\n        \"test\",\n        \"--predicate\",\n        '{\"type\":\"push\",\"branch\":\"main\"}',\n      ]);\n      \n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Testing predicate\");\n    });\n  });\n\n  describe(\"Audit commands\", () => {\n    it(\"should build audit pack\", async () => {\n      const result = await runCliCommand([\n        \"audit\",\n        \"build\",\n        \"--out\",\n        join(tempDir, \"audit.json\"),\n      ]);\n      \n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Building audit pack\");\n    });\n\n    it(\"should list receipts\", async () => {\n      const result = await runCliCommand([\"audit\", \"list\"]);\n      \n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Listing receipts\");\n    });\n  });\n\n  describe(\"Chat commands\", () => {\n    it(\"should draft job specifications\", async () => {\n      const result = await runCliCommand([\n        \"chat\",\n        \"draft\",\n        \"Create a simple hello world job\",\n      ]);\n      \n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Generated specification\");\n    });\n\n    it(\"should handle AI unavailability\", async () => {\n      const result = await runCliCommand([\n        \"chat\",\n        \"draft\",\n        \"Create a test job\",\n        \"--model\",\n        \"nonexistent-model\",\n      ]);\n      \n      expect(result.code).toBe(1);\n      expect(result.stderr).toContain(\"AI not available\");\n    });\n\n    it(\"should show preview functionality\", async () => {\n      const result = await runCliCommand([\n        \"chat\",\n        \"preview\",\n        \"Create a logging job\",\n      ]);\n      \n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Preview functionality not implemented\");\n    });\n  });\n\n  describe(\"LLM commands\", () => {\n    it(\"should call LLM\", async () => {\n      const result = await runCliCommand([\n        \"llm\",\n        \"call\",\n        \"What is GitVan?\",\n      ]);\n      \n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"GitVan\");\n    });\n\n    it(\"should list models\", async () => {\n      const result = await runCliCommand([\"llm\", \"models\"]);\n      \n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Provider:\");\n      expect(result.stdout).toContain(\"ollama\");\n    });\n  });\n\n  describe(\"Error handling\", () => {\n    it(\"should handle invalid commands\", async () => {\n      const result = await runCliCommand([\"invalid\", \"command\"]);\n      \n      expect(result.code).toBe(1);\n      expect(result.stderr).toContain(\"Unknown command\");\n    });\n\n    it(\"should handle missing arguments\", async () => {\n      const result = await runCliCommand([\"chat\", \"draft\"]);\n      \n      expect(result.code).toBe(1);\n      expect(result.stderr).toContain(\"Prompt required\");\n    });\n\n    it(\"should handle malformed JSON\", async () => {\n      const result = await runCliCommand([\n        \"event\",\n        \"test\",\n        \"--predicate\",\n        \"invalid-json\",\n      ]);\n      \n      expect(result.code).toBe(1);\n      expect(result.stderr).toContain(\"not valid JSON\");\n    });\n  });\n\n  describe(\"Integration\", () => {\n    it(\"should complete basic workflow\", async () => {\n      // 1. List jobs\n      const listResult = await runCliCommand([\"job\", \"list\"]);\n      expect(listResult.code).toBe(0);\n\n      // 2. Check daemon status\n      const daemonResult = await runCliCommand([\"daemon\", \"status\"]);\n      expect(daemonResult.code).toBe(0);\n\n      // 3. List cron jobs\n      const cronResult = await runCliCommand([\"cron\", \"list\"]);\n      expect(cronResult.code).toBe(0);\n\n      // 4. List events\n      const eventResult = await runCliCommand([\"event\", \"list\"]);\n      expect(eventResult.code).toBe(0);\n\n      // 5. Build audit\n      const auditResult = await runCliCommand([\n        \"audit\",\n        \"build\",\n        \"--out\",\n        join(tempDir, \"integration-audit.json\"),\n      ]);\n      expect(auditResult.code).toBe(0);\n    });\n\n    it(\"should work with playground configuration\", async () => {\n      const result = await runCliCommand([\"job\", \"list\"]);\n      \n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Available jobs\");\n      // Should find playground jobs\n      expect(result.stdout).toContain(\"foundation/\");\n    });\n  });\n});\n"
        }
    ]
}