@prefix ex: <http://example.org/> .
@prefix gv: <https://gitvan.dev/ontology#> .
@prefix gh: <https://gitvan.dev/graph-hook#> .
@prefix op: <https://gitvan.dev/op#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .

# Test Coverage Enforcer Hook - JTBD #3
# "I want to ensure test coverage never drops below acceptable thresholds"

ex:test-coverage-enforcer-hook rdf:type gh:Hook ;
    gv:title "Test Coverage Enforcer" ;
    gh:hasPredicate ex:test-coverage-predicate ;
    gh:orderedPipelines ex:test-coverage-pipeline .

# SELECTThreshold Predicate - "Threshold" Sensor
# Triggers when test coverage drops below threshold
ex:test-coverage-predicate rdf:type gh:SELECTThreshold ;
    gh:queryText """
        PREFIX gv: <https://gitvan.dev/ontology#>
        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        
        SELECT ?coverage WHERE {
            ?project rdf:type gv:Project .
            ?project gv:testCoverage ?coverage .
        }
    """ ;
    gh:threshold 80 ;
    gh:operator "<" ;
    gh:description "Triggers when test coverage drops below 80%" .

# Workflow Pipeline
ex:test-coverage-pipeline rdf:type op:Pipeline ;
    op:steps ex:analyze-coverage, ex:identify-gaps, ex:notify-team, ex:update-coverage-dashboard .

# Step 1: Analyze Coverage
ex:analyze-coverage rdf:type gv:SparqlStep ;
    gv:text """
        PREFIX gv: <https://gitvan.dev/ontology#>
        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        
        SELECT ?file ?coverage ?linesCovered ?totalLines ?uncoveredLines WHERE {
            ?file rdf:type gv:SourceFile .
            ?file gv:testCoverage ?coverage .
            ?file gv:linesCovered ?linesCovered .
            ?file gv:totalLines ?totalLines .
            ?file gv:uncoveredLines ?uncoveredLines .
            FILTER(?coverage < 80)
        } ORDER BY ?coverage ASC
    """ ;
    gv:outputMapping '{"coverageIssues": "results", "issueCount": "results.length"}' .

# Step 2: Identify Coverage Gaps
ex:identify-gaps rdf:type gv:TemplateStep ;
    gv:text """
        # Test Coverage Enforcer Report
        
        **Generated:** {{ "now" | date("YYYY-MM-DD HH:mm:ss") }}  
        **Hook:** Test Coverage Enforcer (JTBD #3)  
        **Status:** ðŸ“‰ COVERAGE BELOW THRESHOLD  
        **Files Below 80%:** {{ issueCount }}
        
        ## Coverage Issues
        
        {% for issue in coverageIssues %}
        ### {{ issue.file.value }}
        - **Current Coverage:** {{ issue.coverage.value }}%
        - **Lines Covered:** {{ issue.linesCovered.value }}/{{ issue.totalLines.value }}
        - **Uncovered Lines:** {{ issue.uncoveredLines.value }}
        
        {% endfor %}
        
        ## Coverage Analysis
        - **Files Below Threshold:** {{ issueCount }}
        - **Average Coverage:** {{ coverageIssues | map(attribute='coverage.value') | sum / coverageIssues | length | round(2) }}%
        - **Lowest Coverage:** {{ coverageIssues | map(attribute='coverage.value') | min }}%
        
        ## Actions Required
        - Write tests for uncovered lines
        - Review test quality and effectiveness
        - Consider refactoring hard-to-test code
        - Update coverage thresholds if appropriate
        
        ---
        *This report was automatically generated by the Test Coverage Enforcer Hook*
    """ ;
    gv:filePath "./reports/jtbd/testing/test-coverage-enforcer-{{ 'now' | date('YYYY-MM-DD-HH-mm-ss') }}.md" ;
    gv:dependsOn ex:analyze-coverage .

# Step 3: Notify Team
ex:notify-team rdf:type gv:HttpStep ;
    gv:httpUrl "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK" ;
    gv:httpMethod "POST" ;
    gv:headers '{"Content-Type": "application/json"}' ;
    gv:body """
        {
            "text": "ðŸ“‰ Test Coverage Alert",
            "attachments": [
                {
                    "color": "warning",
                    "title": "Test Coverage Below Threshold",
                    "text": "{{ issueCount }} files have coverage below 80%",
                    "fields": [
                        {% for issue in coverageIssues[:5] %}
                        {
                            "title": "{{ issue.file.value }}",
                            "value": "Coverage: {{ issue.coverage.value }}%\\nUncovered: {{ issue.uncoveredLines.value }} lines",
                            "short": true
                        }{% if not loop.last %},{% endif %}
                        {% endfor %}
                    ],
                    "footer": "GitVan Knowledge Hook Engine",
                    "ts": {{ "now" | date("X") }}
                }
            ]
        }
    """ ;
    gv:dependsOn ex:identify-gaps ;
    gv:timeout 15000 .

# Step 4: Update Coverage Dashboard
ex:update-coverage-dashboard rdf:type gv:TemplateStep ;
    gv:text """
        # Test Coverage Dashboard
        
        **Last Updated:** {{ "now" | date("YYYY-MM-DD HH:mm:ss") }}  
        **Status:** ðŸ“‰ COVERAGE BELOW THRESHOLD  
        **Files Below 80%:** {{ issueCount }}
        
        ## Coverage Metrics
        - **Files Below Threshold:** {{ issueCount }}
        - **Average Coverage:** {{ coverageIssues | map(attribute='coverage.value') | sum / coverageIssues | length | round(2) }}%
        - **Lowest Coverage:** {{ coverageIssues | map(attribute='coverage.value') | min }}%
        
        ## Coverage Issues
        {% for issue in coverageIssues[:10] %}
        - **{{ issue.file.value }}** ({{ issue.coverage.value }}%): {{ issue.uncoveredLines.value }} uncovered lines
        {% endfor %}
        
        ## Coverage Goals
        - **Target Coverage:** 80%
        - **Current Average:** {{ coverageIssues | map(attribute='coverage.value') | sum / coverageIssues | length | round(2) }}%
        - **Gap to Target:** {{ 80 - (coverageIssues | map(attribute='coverage.value') | sum / coverageIssues | length) | round(2) }}%
        
        ---
        *This dashboard is automatically updated by the Test Coverage Enforcer Hook*
    """ ;
    gv:filePath "./dashboards/test-coverage.md" ;
    gv:dependsOn ex:notify-team .
