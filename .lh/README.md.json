{
    "sourceFile": "README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 19,
            "patches": [
                {
                    "date": 1758042393509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758053986045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n # GitVan v2\n \n-**Git-Native Automation with Composables and Templates**\n+**Git-Native Development Automation Platform**\n \n-GitVan v2 is a lean, single-package JavaScript solution that transforms your Git repository into an intelligent automation platform. Built with modern composables, Nunjucks templates, and Git-native storage, it provides zero-configuration workflow automation with Vue-inspired ergonomics.\n+GitVan v2 is a comprehensive Git-native automation platform that transforms your Git repository into an intelligent development environment. Built with modern composables, Nunjucks templates, and Git-native storage, it provides zero-configuration workflow automation with Vue-inspired ergonomics.\n \n ## 🚀 Quick Start\n \n ```bash\n@@ -13,9 +13,9 @@\n # Navigate to your Git repository\n cd your-project\n \n # Run a job\n-gitvan run docs:changelog\n+gitvan job run docs:changelog\n \n # Start the daemon for continuous automation\n gitvan daemon start\n ```\n@@ -26,15 +26,20 @@\n - **Vue-inspired ergonomics** with `useGit()`, `useTemplate()`, `useExec()`\n - **Automatic dependency injection** using unctx\n - **Context isolation** for concurrent execution\n \n-### 📝 **Five Execution Types**\n-- **`cli`** - Shell command execution with environment control\n-- **`js`** - JavaScript module execution with import resolution  \n-- **`llm`** - Language model integration (Ollama, OpenAI, etc.)\n-- **`job`** - Recursive job execution for composition\n-- **`tmpl`** - Nunjucks template rendering with Git context\n+### 🔄 **Git-Native Job System**\n+- **Filesystem discovery** of jobs in `jobs/` directory\n+- **Multiple job types**: on-demand, cron, event-driven\n+- **Atomic execution** with Git refs for locking\n+- **Auditable receipts** stored in Git notes\n \n+### 📝 **Advanced Template System**\n+- **Nunjucks templates** with Git context injection\n+- **Inflection filters** for string transformations\n+- **Deterministic rendering** with cached environments\n+- **File and string output** support\n+\n ### 🌳 **Git-Native Storage**\n - **Git refs** for distributed locking across worktrees\n - **Git notes** for execution metadata and receipts\n - **No external databases** - everything stored in Git\n@@ -53,18 +58,25 @@\n ├── composables/          # Vue-inspired composables API\n │   ├── ctx.mjs          # Context management (unctx)\n │   ├── git.mjs          # Git operations composable\n │   ├── template.mjs     # Nunjucks template composable\n-│   ├── exec.mjs         # Execution composable\n │   └── index.mjs        # Composable exports\n-├── runtime/              # Core runtime engine\n-│   ├── boot.mjs         # Context bootstrapping\n+├── jobs/                 # Job system implementation\n │   ├── define.mjs       # Job definition system\n-│   ├── daemon.mjs       # Worktree-scoped daemon\n-│   ├── events.mjs       # Event discovery and routing\n-│   ├── locks.mjs        # Distributed locking\n-│   └── receipt.mjs      # Execution receipts\n-└── cli.mjs              # Command-line interface\n+│   ├── scan.mjs         # Filesystem job discovery\n+│   ├── runner.mjs       # Job execution engine\n+│   ├── cron.mjs         # Cron scheduler\n+│   ├── events.mjs       # Event-driven jobs\n+│   ├── daemon.mjs       # Background daemon\n+│   └── hooks.mjs        # Lifecycle hooks\n+├── config/               # Configuration system\n+│   ├── defaults.mjs     # Default configuration\n+│   ├── loader.mjs      # Configuration loading\n+│   └── runtime-config.mjs # Runtime normalization\n+├── utils/                # Utility functions\n+│   └── nunjucks-config.mjs # Template configuration\n+└── cli/                  # Command-line interface\n+    └── job.mjs          # Job management commands\n ```\n \n ## 📦 Installation\n \n@@ -95,96 +107,122 @@\n ```\n \n ## 🎮 Usage\n \n-### Basic Job Execution\n+### Job Management\n \n ```bash\n+# List available jobs\n+gitvan job list\n+\n # Run a specific job\n-gitvan run docs:changelog\n+gitvan job run docs:changelog\n \n-# List available jobs\n-gitvan list\n+# Run job with payload\n+gitvan job run foundation:template-greeting --payload '{\"custom\": \"value\"}'\n+\n+# Show job details\n+gitvan job show docs:changelog\n+\n+# Plan job execution (dry run)\n+gitvan job plan docs:changelog\n ```\n \n ### Daemon Management\n \n ```bash\n # Start daemon for current worktree\n gitvan daemon start\n \n-# Start daemon for all worktrees\n-gitvan daemon start --worktrees all\n-\n # Check daemon status\n gitvan daemon status\n \n # Stop daemon\n gitvan daemon stop\n+\n+# View daemon statistics\n+gitvan daemon stats\n ```\n \n-### Event Discovery\n+### Lock Management\n \n ```bash\n-# List discovered events\n-gitvan event list\n+# List active job locks\n+gitvan job locks\n \n-# List all worktrees\n-gitvan worktree list\n+# Unlock a specific job\n+gitvan job unlock docs:changelog\n ```\n \n ## 🔧 Job Definition\n \n Jobs are defined using the `defineJob()` pattern with composables:\n \n ```javascript\n // jobs/docs/changelog.mjs\n-import { defineJob } from '../../src/runtime/define.mjs'\n-import { useGit } from '../../src/composables/git.mjs'\n-import { useTemplate } from '../../src/composables/template.mjs'\n+import { defineJob } from \"gitvan/define\";\n+import { useGit } from \"gitvan/useGit\";\n+import { useTemplate } from \"gitvan/useTemplate\";\n \n export default defineJob({\n-  kind: 'atomic',\n   meta: { \n-    desc: 'Generate CHANGELOG.md', \n-    schedule: '0 3 * * *' \n+    desc: \"Generate CHANGELOG.md from git log\",\n+    tags: [\"documentation\", \"changelog\"]\n   },\n-  async run() {\n-    const git = useGit()\n-    const t = useTemplate()\n+  async run({ ctx, payload }) {\n+    const git = useGit();\n+    const template = await useTemplate();\n     \n-    const commits = git.run('log --pretty=%h%x09%s -n 50').split('\\n')\n-    t.renderToFile('templates/changelog.njk', 'dist/CHANGELOG.md', { commits })\n+    // Get commits\n+    const logOutput = await git.log(\"%h%x09%s\", [\"-n\", \"50\"]);\n+    const commits = logOutput.split(\"\\n\").filter(Boolean);\n     \n-    return { ok: true, artifact: 'dist/CHANGELOG.md' }\n+    // Render template to file\n+    const outputPath = await template.renderToFile(\n+      \"changelog.njk\",\n+      \"dist/CHANGELOG.md\",\n+      { commits, generatedAt: ctx.nowISO }\n+    );\n+    \n+    return {\n+      ok: true,\n+      artifacts: [outputPath]\n+    };\n   }\n-})\n+});\n ```\n \n ### Job Types\n \n-- **`atomic`** - Single execution unit\n-- **`composite`** - Multiple steps with dependencies\n-- **`sequence`** - Sequential execution\n-- **`parallel`** - Concurrent execution\n+- **On-demand** - Manual execution via CLI\n+- **Cron** - Scheduled execution (`.cron.mjs` suffix)\n+- **Event-driven** - Triggered by Git events (`.evt.mjs` suffix)\n \n ## 🎨 Template System\n \n GitVan includes first-class Nunjucks template support with Git context injection:\n \n ```njk\n <!-- templates/changelog.njk -->\n # Changelog\n-Generated: {{ nowISO }}\n \n-{% for line in commits %}\n-- {{ line }}\n+Generated at: {{ generatedAt }}\n+Total commits: {{ commits.length }}\n+\n+## Recent Changes\n+\n+{% for commit in commits %}\n+- **{{ commit.split('\\t')[0] }}** {{ commit.split('\\t')[1] }}\n {% endfor %}\n+\n+---\n+*Generated by GitVan Jobs System*\n ```\n \n ### Template Features\n-- **Git context injection** - `{{ git.branch() }}`, `{{ git.head() }}`\n-- **Deterministic helpers** - `{{ nowISO }}`, `{{ formatDate() }}`\n+- **Git context injection** - Access to repository information\n+- **Inflection filters** - `titleize`, `camelize`, `underscore`, etc.\n+- **Deterministic helpers** - `nowISO`, `formatDate()`\n - **File output** - Render directly to files\n - **Include/extends** - Full Nunjucks functionality\n \n ## ⚙️ Configuration\n@@ -193,85 +231,103 @@\n \n ```javascript\n export default {\n   // Repository settings\n-  repo: {\n-    defaultBranch: \"main\",\n-    notesRef: \"refs/notes/gitvan\",\n-    signing: { require: true }\n+  root: process.cwd(),\n+  \n+  // Job configuration\n+  jobs: {\n+    dir: \"jobs\"\n   },\n-\n-  // LLM configuration\n-  llm: {\n-    baseURL: \"http://localhost:11434\", // Ollama\n-    model: \"llama3.2\",\n-    temperature: 0.2\n+  \n+  // Template configuration\n+  templates: {\n+    engine: \"nunjucks\",\n+    dirs: [\"templates\"]\n   },\n-\n-  // Event-driven automation\n-  events: [\n-    {\n-      id: \"daily-summary\",\n-      workflow: \"cron\",\n-      schedule: \"0 18 * * *\",\n-      run: { type: \"cookbook\", recipe: \"dev-diary\" }\n+  \n+  // Receipts configuration\n+  receipts: {\n+    ref: \"refs/notes/gitvan/results\"\n+  },\n+  \n+  // Custom hooks\n+  hooks: {\n+    \"job:after\": (payload, result) => {\n+      console.log(`Job completed: ${payload.jobId}`);\n     }\n-  ]\n-}\n+  }\n+};\n ```\n \n ## 🔌 Composables API\n \n ### `useGit()`\n ```javascript\n-const git = useGit()\n-git.run('log --oneline -10')        // Execute git command\n-git.branch()                        // Current branch\n-git.head()                          // Current HEAD\n-git.note('refs/notes/test', 'msg')  // Add git note\n+const git = useGit();\n+\n+// Basic Git operations\n+await git.run(\"log --oneline -10\");\n+await git.head();                    // Current HEAD\n+await git.getCurrentBranch();        // Current branch\n+await git.isClean();                 // Working directory status\n+\n+// Git notes\n+await git.noteAdd(\"refs/notes/test\", \"message\");\n+await git.noteShow(\"refs/notes/test\");\n+\n+// Atomic operations\n+await git.updateRefCreate(\"refs/gitvan/lock/job-id\", commitSha);\n ```\n \n ### `useTemplate()`\n ```javascript\n-const t = useTemplate()\n-t.render('template.njk', { data })           // Render to string\n-t.renderToFile('template.njk', 'out.md', {}) // Render to file\n-```\n+const template = await useTemplate();\n \n-### `useExec()`\n-```javascript\n-const exec = useExec()\n-exec.cli('npm', ['test'])                    // CLI execution\n-exec.js('./script.mjs', 'default', {})       // JS execution\n-exec.tmpl({ template: 'test.njk', data: {} }) // Template execution\n+// Render to string\n+const html = await template.renderString(\"Hello {{ name }}!\", { name: \"World\" });\n+\n+// Render to file\n+const outputPath = await template.renderToFile(\n+  \"template.njk\",\n+  \"dist/output.html\",\n+  { data: \"value\" }\n+);\n ```\n \n ## 🎯 Event System\n \n-GitVan discovers events through file system conventions:\n+GitVan supports event-driven jobs with Git-native predicates:\n \n-```\n-events/\n-├── cron/\n-│   └── 0_9_*_*_*.mjs          # Daily at 9 AM\n-├── merge-to/\n-│   └── main.mjs               # On merge to main\n-├── push-to/\n-│   └── feature/*.mjs          # On push to feature/*\n-└── message/\n-    └── release.mjs            # On commit message \"release\"\n-```\n+```javascript\n+// jobs/alerts/release.evt.mjs\n+import { defineJob } from \"gitvan/define\";\n \n-### Event Handler Example\n-```javascript\n-// events/merge-to/main.mjs\n-export default async function handler({ payload, git, meta }) {\n-  const git = useGit()\n-  // Deploy to production\n-  return { ok: true, action: 'deploy' }\n-}\n+export default defineJob({\n+  meta: {\n+    desc: \"Notify on new releases\",\n+    tags: [\"alerts\", \"releases\"]\n+  },\n+  on: {\n+    any: [\n+      { tagCreate: true },\n+      { semverTag: true }\n+    ]\n+  },\n+  async run({ ctx, payload }) {\n+    // Handle release notification\n+    return { ok: true };\n+  }\n+});\n ```\n \n+### Event Predicates\n+- **`tagCreate`** - New tag created\n+- **`semverTag`** - Semantic version tag\n+- **`branchCreate`** - New branch created\n+- **`mergeTo`** - Merge to specific branch\n+- **`pushTo`** - Push to specific branch pattern\n+\n ## 🚀 Performance\n \n GitVan v2 is optimized for speed and efficiency:\n \n@@ -290,28 +346,74 @@\n - **Worktree isolation** prevents cross-contamination\n \n ## 📚 Documentation\n \n-- **[Specifications](./specs/)** - Complete system specifications\n-- **[API Contracts](./specs/docs/API_CONTRACTS.md)** - Detailed API documentation\n-- **[Architecture Decisions](./specs/docs/ARCHITECTURE_DECISIONS.md)** - Design rationale\n-- **[Implementation Guide](./specs/docs/IMPLEMENTATION_GUIDE.md)** - Development guide\n+### Core Documentation\n+- **[Playground Guide](./docs/playground/)** - Complete developer guide for the playground application\n+- **[Cookbook](./docs/cookbook/)** - Practical recipes and patterns for common use cases\n \n+### Playground Documentation\n+- **[Playground README](./docs/playground/README.md)** - Main developer guide\n+- **[Job Examples](./docs/playground/job-examples.md)** - Detailed job examples and patterns\n+- **[Testing Guide](./docs/playground/testing-guide.md)** - Testing strategies and best practices\n+- **[Architecture Guide](./docs/playground/architecture-guide.md)** - System architecture overview\n+- **[Troubleshooting Guide](./docs/playground/troubleshooting-guide.md)** - Common issues and solutions\n+\n+### Cookbook Recipes\n+- **[Foundation Recipes](./docs/cookbook/foundation/)** - Basic job setup, configuration, templates, error handling\n+- **[Documentation Recipes](./docs/cookbook/documentation/)** - Changelog generation, documentation automation\n+- **[CI/CD Recipes](./docs/cookbook/cicd/)** - Build automation, deployment workflows\n+\n+### API Reference\n+- **[Composables API](./src/composables/)** - `useGit`, `useTemplate`, context management\n+- **[Job System API](./src/jobs/)** - Job definition, execution, scheduling\n+- **[Configuration API](./src/config/)** - Configuration loading and normalization\n+\n ## 🧪 Testing\n \n ```bash\n # Run all tests\n pnpm test\n \n # Run specific test suites\n pnpm test composables\n-pnpm test runtime\n-pnpm test cli\n+pnpm test jobs\n+pnpm test config\n \n+# Run E2E tests\n+pnpm test playground-e2e\n+pnpm test playground-cookbook-e2e\n+\n # Run with coverage\n pnpm test --coverage\n ```\n \n+## 🎮 Playground\n+\n+The GitVan playground is a self-contained example application that demonstrates all features:\n+\n+```bash\n+# Navigate to playground\n+cd playground\n+\n+# Install dependencies\n+pnpm install\n+\n+# Start development mode\n+pnpm dev\n+\n+# Run specific jobs\n+pnpm run:changelog\n+pnpm run:simple\n+```\n+\n+The playground includes:\n+- **Foundation jobs** - Basic setup, file output, templates, error handling\n+- **Documentation jobs** - Advanced changelog generation\n+- **CI/CD jobs** - Build automation workflows\n+- **Event-driven jobs** - Release notifications\n+- **Comprehensive E2E tests** - Full system validation\n+\n ## 🤝 Contributing\n \n We welcome contributions! Please see our [Contributing Guide](./CONTRIBUTING.md) for details.\n \n@@ -341,8 +443,9 @@\n - **Vue.js** for the composables pattern\n - **Git** for the powerful foundation\n - **Nunjucks** for template rendering\n - **unctx** for context management\n+- **Nitro** for configuration patterns\n \n ---\n \n **Transform your Git workflow with intelligent automation. Start with GitVan v2 today!**\n\\ No newline at end of file\n"
                },
                {
                    "date": 1758054695916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n # GitVan v2\n \n-**Git-Native Development Automation Platform**\n+**Git-Native Job System with Composables**\n \n-GitVan v2 is a comprehensive Git-native automation platform that transforms your Git repository into an intelligent development environment. Built with modern composables, Nunjucks templates, and Git-native storage, it provides zero-configuration workflow automation with Vue-inspired ergonomics.\n+GitVan v2 is a Git-native job system that transforms your Git repository into an intelligent automation platform. Built with modern composables, Nunjucks templates, and Git-native storage, it provides zero-configuration workflow automation with Vue-inspired ergonomics.\n \n ## 🚀 Quick Start\n \n ```bash\n@@ -13,18 +13,18 @@\n # Navigate to your Git repository\n cd your-project\n \n # Run a job\n-gitvan job run docs:changelog\n+gitvan run docs:changelog\n \n # Start the daemon for continuous automation\n gitvan daemon start\n ```\n \n ## ✨ Key Features\n \n ### 🎯 **Composables-First API**\n-- **Vue-inspired ergonomics** with `useGit()`, `useTemplate()`, `useExec()`\n+- **Vue-inspired ergonomics** with `useGit()`, `useTemplate()`\n - **Automatic dependency injection** using unctx\n - **Context isolation** for concurrent execution\n \n ### 🔄 **Git-Native Job System**\n@@ -114,12 +114,12 @@\n # List available jobs\n gitvan job list\n \n # Run a specific job\n-gitvan job run docs:changelog\n+gitvan job run --name docs:changelog\n \n # Run job with payload\n-gitvan job run foundation:template-greeting --payload '{\"custom\": \"value\"}'\n+gitvan job run --name foundation:template-greeting --payload '{\"custom\": \"value\"}'\n \n # Show job details\n gitvan job show docs:changelog\n \n@@ -132,16 +132,16 @@\n ```bash\n # Start daemon for current worktree\n gitvan daemon start\n \n+# Start daemon for all worktrees\n+gitvan daemon start --worktrees all\n+\n # Check daemon status\n gitvan daemon status\n \n # Stop daemon\n gitvan daemon stop\n-\n-# View daemon statistics\n-gitvan daemon stats\n ```\n \n ### Lock Management\n \n"
                },
                {
                    "date": 1758075144760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,451 +1,292 @@\n # GitVan v2\n \n-**Git-Native Job System with Composables**\n+**Git-native development automation platform with AI-powered workflows**\n \n-GitVan v2 is a Git-native job system that transforms your Git repository into an intelligent automation platform. Built with modern composables, Nunjucks templates, and Git-native storage, it provides zero-configuration workflow automation with Vue-inspired ergonomics.\n+GitVan transforms Git into a runtime environment for development automation, providing intelligent job scheduling, template generation, and AI-powered workflow creation.\n \n ## 🚀 Quick Start\n \n+### Installation\n+\n ```bash\n-# Install GitVan globally\n npm install -g gitvan\n-\n-# Navigate to your Git repository\n-cd your-project\n-\n-# Run a job\n-gitvan run docs:changelog\n-\n-# Start the daemon for continuous automation\n-gitvan daemon start\n+# or\n+npm install gitvan\n ```\n \n-## ✨ Key Features\n+### Initialize a Project\n \n-### 🎯 **Composables-First API**\n-- **Vue-inspired ergonomics** with `useGit()`, `useTemplate()`\n-- **Automatic dependency injection** using unctx\n-- **Context isolation** for concurrent execution\n-\n-### 🔄 **Git-Native Job System**\n-- **Filesystem discovery** of jobs in `jobs/` directory\n-- **Multiple job types**: on-demand, cron, event-driven\n-- **Atomic execution** with Git refs for locking\n-- **Auditable receipts** stored in Git notes\n-\n-### 📝 **Advanced Template System**\n-- **Nunjucks templates** with Git context injection\n-- **Inflection filters** for string transformations\n-- **Deterministic rendering** with cached environments\n-- **File and string output** support\n-\n-### 🌳 **Git-Native Storage**\n-- **Git refs** for distributed locking across worktrees\n-- **Git notes** for execution metadata and receipts\n-- **No external databases** - everything stored in Git\n-\n-### 🔄 **Worktree-Aware Design**\n-- **Per-worktree daemons** with complete isolation\n-- **Distributed locking** prevents conflicts\n-- **Concurrent execution** across multiple branches\n-\n-## 🏗️ Architecture\n-\n-GitVan v2 is built as a **single package** with clear internal boundaries:\n-\n+```bash\n+gitvan init\n ```\n-src/\n-├── composables/          # Vue-inspired composables API\n-│   ├── ctx.mjs          # Context management (unctx)\n-│   ├── git.mjs          # Git operations composable\n-│   ├── template.mjs     # Nunjucks template composable\n-│   └── index.mjs        # Composable exports\n-├── jobs/                 # Job system implementation\n-│   ├── define.mjs       # Job definition system\n-│   ├── scan.mjs         # Filesystem job discovery\n-│   ├── runner.mjs       # Job execution engine\n-│   ├── cron.mjs         # Cron scheduler\n-│   ├── events.mjs       # Event-driven jobs\n-│   ├── daemon.mjs       # Background daemon\n-│   └── hooks.mjs        # Lifecycle hooks\n-├── config/               # Configuration system\n-│   ├── defaults.mjs     # Default configuration\n-│   ├── loader.mjs      # Configuration loading\n-│   └── runtime-config.mjs # Runtime normalization\n-├── utils/                # Utility functions\n-│   └── nunjucks-config.mjs # Template configuration\n-└── cli/                  # Command-line interface\n-    └── job.mjs          # Job management commands\n-```\n \n-## 📦 Installation\n+This creates a complete GitVan project structure with:\n+- 📁 Directory structure (`.gitvan/`, `jobs/`, `templates/`, `packs/`)\n+- ⚙️ Configuration file (`gitvan.config.js`)\n+- 📝 Sample files (job, template, pack)\n+- 🔧 Git repository setup\n \n-### Prerequisites\n-- **Node.js** 18+ \n-- **Git** 2.30+ with GPG signing (recommended)\n-- **pnpm** 8+ (for development)\n+### Run Your First Job\n \n-### Global Installation\n ```bash\n-npm install -g gitvan\n+gitvan run hello\n ```\n \n-### Development Setup\n-```bash\n-# Clone the repository\n-git clone https://github.com/sac/gitvan.git\n-cd gitvan\n+## ✨ Features\n \n-# Install dependencies\n-pnpm install\n+### 🎯 **Core Capabilities**\n+- **Git-Native**: Uses Git refs for locking, notes for audit trails\n+- **Template Engine**: Nunjucks-powered with front-matter support\n+- **Job System**: Automated task execution with scheduling\n+- **Pack System**: Reusable automation components\n+- **AI Integration**: Generate jobs and templates with AI assistance\n \n-# Run tests\n-pnpm test\n+### 📋 **Front-Matter Templates**\n+GitVan supports Hygen-style templates with rich front-matter:\n \n-# Start development CLI\n-pnpm dev\n-```\n+```yaml\n+---\n+to: \"src/components/{{ name | pascalCase }}.tsx\"\n+force: \"overwrite\"\n+inject:\n+  - into: \"src/index.ts\"\n+    snippet: \"export { {{ name | pascalCase }} } from './components/{{ name | pascalCase }}';\"\n+    find: \"// EXPORTS\"\n+    where: \"after\"\n+sh:\n+  before: [\"npm run lint\"]\n+  after: [\"npm run test\"]\n+when: \"{{ createComponent }}\"\n+---\n+import React from 'react';\n \n-## 🎮 Usage\n+interface {{ name | pascalCase }}Props {\n+  // Props here\n+}\n \n-### Job Management\n-\n-```bash\n-# List available jobs\n-gitvan job list\n-\n-# Run a specific job\n-gitvan job run --name docs:changelog\n-\n-# Run job with payload\n-gitvan job run --name foundation:template-greeting --payload '{\"custom\": \"value\"}'\n-\n-# Show job details\n-gitvan job show docs:changelog\n-\n-# Plan job execution (dry run)\n-gitvan job plan docs:changelog\n+export const {{ name | pascalCase }}: React.FC<{{ name | pascalCase }}Props> = () => {\n+  return <div>{{ name | titleCase }}</div>;\n+};\n ```\n \n-### Daemon Management\n+### 🤖 **AI-Powered Workflows**\n+Generate jobs and templates using natural language:\n \n ```bash\n-# Start daemon for current worktree\n-gitvan daemon start\n-\n-# Start daemon for all worktrees\n-gitvan daemon start --worktrees all\n-\n-# Check daemon status\n-gitvan daemon status\n-\n-# Stop daemon\n-gitvan daemon stop\n+gitvan chat generate \"Create a changelog job that runs on every release\"\n+gitvan llm call \"Summarize recent commits and create a release note\"\n ```\n \n-### Lock Management\n+### 📦 **Pack System**\n+Create and share reusable automation components:\n \n ```bash\n-# List active job locks\n-gitvan job locks\n-\n-# Unlock a specific job\n-gitvan job unlock docs:changelog\n+gitvan pack apply my-pack --inputs '{\"name\":\"MyComponent\"}'\n+gitvan scaffold react-pack:component --inputs '{\"name\":\"Button\"}'\n ```\n \n-## 🔧 Job Definition\n+## 🛠️ Commands\n \n-Jobs are defined using the `defineJob()` pattern with composables:\n+### Core Commands\n+- `gitvan init` - Initialize GitVan in current directory\n+- `gitvan ensure` - Verify and fix GitVan configuration\n+- `gitvan help` - Show all available commands\n \n-```javascript\n-// jobs/docs/changelog.mjs\n-import { defineJob } from \"gitvan/define\";\n-import { useGit } from \"gitvan/useGit\";\n-import { useTemplate } from \"gitvan/useTemplate\";\n+### Job Management\n+- `gitvan job list` - List available jobs\n+- `gitvan job run --name <job>` - Run a specific job\n+- `gitvan run <job>` - Run job (legacy syntax)\n \n-export default defineJob({\n-  meta: { \n-    desc: \"Generate CHANGELOG.md from git log\",\n-    tags: [\"documentation\", \"changelog\"]\n-  },\n-  async run({ ctx, payload }) {\n-    const git = useGit();\n-    const template = await useTemplate();\n-    \n-    // Get commits\n-    const logOutput = await git.log(\"%h%x09%s\", [\"-n\", \"50\"]);\n-    const commits = logOutput.split(\"\\n\").filter(Boolean);\n-    \n-    // Render template to file\n-    const outputPath = await template.renderToFile(\n-      \"changelog.njk\",\n-      \"dist/CHANGELOG.md\",\n-      { commits, generatedAt: ctx.nowISO }\n-    );\n-    \n-    return {\n-      ok: true,\n-      artifacts: [outputPath]\n-    };\n-  }\n-});\n-```\n+### Template & Pack System\n+- `gitvan pack list` - List installed packs\n+- `gitvan pack apply <pack>` - Apply a pack\n+- `gitvan pack plan <pack>` - Show pack execution plan\n+- `gitvan scaffold <pack:scaffold>` - Run a scaffold\n \n-### Job Types\n+### AI Features\n+- `gitvan chat generate <prompt>` - Generate job via AI\n+- `gitvan chat draft <prompt>` - Draft template via AI\n+- `gitvan llm call <prompt>` - Direct AI interaction\n \n-- **On-demand** - Manual execution via CLI\n-- **Cron** - Scheduled execution (`.cron.mjs` suffix)\n-- **Event-driven** - Triggered by Git events (`.evt.mjs` suffix)\n+### Daemon & Events\n+- `gitvan daemon start` - Start GitVan daemon\n+- `gitvan daemon status` - Check daemon status\n+- `gitvan event simulate --files \"src/**\"` - Simulate file events\n \n-## 🎨 Template System\n+### Audit & Compliance\n+- `gitvan audit build` - Build audit report\n+- `gitvan audit verify` - Verify operation integrity\n+- `gitvan audit list` - List all receipts\n \n-GitVan includes first-class Nunjucks template support with Git context injection:\n+## 📁 Project Structure\n \n-```njk\n-<!-- templates/changelog.njk -->\n-# Changelog\n+After running `gitvan init`:\n \n-Generated at: {{ generatedAt }}\n-Total commits: {{ commits.length }}\n-\n-## Recent Changes\n-\n-{% for commit in commits %}\n-- **{{ commit.split('\\t')[0] }}** {{ commit.split('\\t')[1] }}\n-{% endfor %}\n-\n----\n-*Generated by GitVan Jobs System*\n ```\n+my-project/\n+├── .gitvan/           # GitVan state and configuration\n+│   ├── packs/         # Installed packs\n+│   ├── state/         # Runtime state\n+│   └── backups/       # Automatic backups\n+├── jobs/              # Job definitions\n+├── templates/         # Nunjucks templates\n+├── packs/             # Local pack definitions\n+├── events/            # Event handlers\n+└── gitvan.config.js   # Configuration file\n+```\n \n-### Template Features\n-- **Git context injection** - Access to repository information\n-- **Inflection filters** - `titleize`, `camelize`, `underscore`, etc.\n-- **Deterministic helpers** - `nowISO`, `formatDate()`\n-- **File output** - Render directly to files\n-- **Include/extends** - Full Nunjucks functionality\n-\n ## ⚙️ Configuration\n \n-Create `gitvan.config.js` in your project root:\n+GitVan uses `gitvan.config.js` for configuration:\n \n ```javascript\n export default {\n-  // Repository settings\n-  root: process.cwd(),\n+  templates: {\n+    dirs: [\"templates\"],\n+    autoescape: false,\n+    noCache: true,\n+  },\n   \n-  // Job configuration\n   jobs: {\n-    dir: \"jobs\"\n+    dirs: [\"jobs\"],\n   },\n   \n-  // Template configuration\n-  templates: {\n-    engine: \"nunjucks\",\n-    dirs: [\"templates\"]\n+  packs: {\n+    dirs: [\"packs\", \".gitvan/packs\"],\n   },\n   \n-  // Receipts configuration\n-  receipts: {\n-    ref: \"refs/notes/gitvan/results\"\n+  daemon: {\n+    enabled: true,\n+    worktrees: \"current\",\n   },\n   \n-  // Custom hooks\n-  hooks: {\n-    \"job:after\": (payload, result) => {\n-      console.log(`Job completed: ${payload.jobId}`);\n-    }\n-  }\n+  shell: {\n+    allow: [\"echo\", \"git\", \"npm\", \"pnpm\", \"yarn\"],\n+  },\n+  \n+  ai: {\n+    provider: \"openai\",\n+    model: \"gpt-4\",\n+  },\n+  \n+  data: {\n+    project: {\n+      name: \"my-project\",\n+      description: \"A GitVan-powered project\",\n+    },\n+  },\n };\n ```\n \n-## 🔌 Composables API\n+## 🔒 Security & Safety\n \n-### `useGit()`\n-```javascript\n-const git = useGit();\n+- **Path Sandboxing**: Prevents directory traversal attacks\n+- **Atomic Locking**: Git ref-based concurrency control\n+- **Shell Allowlists**: Configurable command execution\n+- **Audit Trails**: Complete operation logging in Git notes\n+- **Idempotent Operations**: Safe to run multiple times\n \n-// Basic Git operations\n-await git.run(\"log --oneline -10\");\n-await git.head();                    // Current HEAD\n-await git.getCurrentBranch();        // Current branch\n-await git.isClean();                 // Working directory status\n+## 🎨 Front-Matter Support\n \n-// Git notes\n-await git.noteAdd(\"refs/notes/test\", \"message\");\n-await git.noteShow(\"refs/notes/test\");\n+GitVan supports multiple front-matter formats:\n \n-// Atomic operations\n-await git.updateRefCreate(\"refs/gitvan/lock/job-id\", commitSha);\n+### YAML (Default)\n+```yaml\n+---\n+to: \"output.txt\"\n+force: \"overwrite\"\n+---\n+Content here\n ```\n \n-### `useTemplate()`\n-```javascript\n-const template = await useTemplate();\n+### TOML\n+```toml\n++++\n+to = \"output.txt\"\n+force = \"overwrite\"\n++++\n+Content here\n+```\n \n-// Render to string\n-const html = await template.renderString(\"Hello {{ name }}!\", { name: \"World\" });\n-\n-// Render to file\n-const outputPath = await template.renderToFile(\n-  \"template.njk\",\n-  \"dist/output.html\",\n-  { data: \"value\" }\n-);\n+### JSON\n+```json\n+;{\"to\":\"output.txt\",\"force\":\"overwrite\"}\n+Content here\n ```\n \n-## 🎯 Event System\n+## 📚 Examples\n \n-GitVan supports event-driven jobs with Git-native predicates:\n-\n+### Simple Job\n ```javascript\n-// jobs/alerts/release.evt.mjs\n\\ No newline at end of file\n-import { defineJob } from \"gitvan/define\";\n-\n-export default defineJob({\n-  meta: {\n-    desc: \"Notify on new releases\",\n-    tags: [\"alerts\", \"releases\"]\n-  },\n-  on: {\n-    any: [\n-      { tagCreate: true },\n-      { semverTag: true }\n-    ]\n-  },\n-  async run({ ctx, payload }) {\n-    // Handle release notification\n-    return { ok: true };\n+// jobs/greeting.mjs\n+export default {\n+  name: \"greeting\",\n+  description: \"Say hello\",\n+  \n+  async run() {\n+    console.log(\"Hello from GitVan! 🚀\");\n   }\n-});\n+};\n ```\n \n-### Event Predicates\n-- **`tagCreate`** - New tag created\n-- **`semverTag`** - Semantic version tag\n-- **`branchCreate`** - New branch created\n-- **`mergeTo`** - Merge to specific branch\n-- **`pushTo`** - Push to specific branch pattern\n-\n-## 🚀 Performance\n-\n-GitVan v2 is optimized for speed and efficiency:\n-\n-- **Job execution**: < 100ms for simple tasks\n-- **Template rendering**: > 1000 templates/second\n-- **Daemon memory**: < 50MB baseline usage\n-- **Lock contention**: < 1 second resolution\n-- **Context initialization**: < 50ms\n-\n-## 🛡️ Security\n-\n-- **Git-native authentication** with signed commits\n-- **Path traversal prevention** in all file operations\n-- **Input validation** and sanitization\n-- **No external dependencies** for core functionality\n-- **Worktree isolation** prevents cross-contamination\n-\n-## 📚 Documentation\n-\n-### Core Documentation\n-- **[Playground Guide](./docs/playground/)** - Complete developer guide for the playground application\n-- **[Cookbook](./docs/cookbook/)** - Practical recipes and patterns for common use cases\n-\n-### Playground Documentation\n-- **[Playground README](./docs/playground/README.md)** - Main developer guide\n-- **[Job Examples](./docs/playground/job-examples.md)** - Detailed job examples and patterns\n-- **[Testing Guide](./docs/playground/testing-guide.md)** - Testing strategies and best practices\n-- **[Architecture Guide](./docs/playground/architecture-guide.md)** - System architecture overview\n-- **[Troubleshooting Guide](./docs/playground/troubleshooting-guide.md)** - Common issues and solutions\n-\n-### Cookbook Recipes\n-- **[Foundation Recipes](./docs/cookbook/foundation/)** - Basic job setup, configuration, templates, error handling\n-- **[Documentation Recipes](./docs/cookbook/documentation/)** - Changelog generation, documentation automation\n-- **[CI/CD Recipes](./docs/cookbook/cicd/)** - Build automation, deployment workflows\n-\n-### API Reference\n-- **[Composables API](./src/composables/)** - `useGit`, `useTemplate`, context management\n-- **[Job System API](./src/jobs/)** - Job definition, execution, scheduling\n-- **[Configuration API](./src/config/)** - Configuration loading and normalization\n-\n-## 🧪 Testing\n-\n-```bash\n-# Run all tests\n-pnpm test\n-\n-# Run specific test suites\n-pnpm test composables\n-pnpm test jobs\n-pnpm test config\n-\n-# Run E2E tests\n-pnpm test playground-e2e\n-pnpm test playground-cookbook-e2e\n-\n-# Run with coverage\n-pnpm test --coverage\n+### Template with Front-Matter\n+```yaml\n+---\n+to: \"src/{{ name | kebabCase }}.ts\"\n+force: \"overwrite\"\n+inject:\n+  - into: \"src/index.ts\"\n+    snippet: \"export * from './{{ name | kebabCase }}';\"\n+    find: \"// EXPORTS\"\n+---\n+export interface {{ name | pascalCase }} {\n+  id: string;\n+  name: string;\n+}\n ```\n \n-## 🎮 Playground\n-\n-The GitVan playground is a self-contained example application that demonstrates all features:\n-\n-```bash\n-# Navigate to playground\n-cd playground\n-\n-# Install dependencies\n-pnpm install\n-\n-# Start development mode\n-pnpm dev\n-\n-# Run specific jobs\n-pnpm run:changelog\n-pnpm run:simple\n+### Pack Definition\n+```json\n+{\n+  \"name\": \"react-component\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"Generate React components\",\n+  \"scaffolds\": {\n+    \"component\": {\n+      \"description\": \"Create a React component\",\n+      \"templates\": [\"templates/component.njk\"],\n+      \"inputs\": {\n+        \"name\": {\n+          \"type\": \"string\",\n+          \"description\": \"Component name\",\n+          \"required\": true\n+        }\n+      }\n+    }\n+  }\n+}\n ```\n \n-The playground includes:\n-- **Foundation jobs** - Basic setup, file output, templates, error handling\n-- **Documentation jobs** - Advanced changelog generation\n-- **CI/CD jobs** - Build automation workflows\n-- **Event-driven jobs** - Release notifications\n-- **Comprehensive E2E tests** - Full system validation\n-\n ## 🤝 Contributing\n \n-We welcome contributions! Please see our [Contributing Guide](./CONTRIBUTING.md) for details.\n+1. Fork the repository\n+2. Create a feature branch: `git checkout -b feature-name`\n+3. Make your changes\n+4. Run tests: `pnpm test`\n+5. Commit: `git commit -m \"Add feature\"`\n+6. Push: `git push origin feature-name`\n+7. Submit a pull request\n \n-### Development Commands\n-\n-```bash\n-# Install dependencies\n-pnpm install\n-\n-# Run linting\n-pnpm lint\n-\n-# Type checking\n-pnpm typecheck\n-\n-# Clean build artifacts\n-pnpm clean\n-```\n-\n ## 📄 License\n \n-Published under the [MIT](./LICENSE) license.\n+MIT License - see [LICENSE](LICENSE) file for details.\n \n-## 🙏 Acknowledgments\n+## 🆘 Support\n \n-GitVan v2 is inspired by:\n-- **Vue.js** for the composables pattern\n-- **Git** for the powerful foundation\n-- **Nunjucks** for template rendering\n-- **unctx** for context management\n-- **Nitro** for configuration patterns\n+- 📖 [Documentation](docs/)\n+- 🐛 [Issues](https://github.com/gitvan/gitvan/issues)\n+- 💬 [Discussions](https://github.com/gitvan/gitvan/discussions)\n \n ---\n \n-**Transform your Git workflow with intelligent automation. Start with GitVan v2 today!**\n+**GitVan v2** - Transform Git into your development automation platform 🚀\n\\ No newline at end of file\n"
                },
                {
                    "date": 1758075651620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,13 @@\n+---\n+title: \"GitVan v2\"\n+description: \"Git-native development automation platform with AI-powered workflows\"\n+version: \"2.0.0\"\n+author: \"GitVan Team\"\n+license: \"MIT\"\n+tags: [\"git\", \"automation\", \"templating\", \"ai\", \"workflows\"]\n+---\n+\n # GitVan v2\n \n **Git-native development automation platform with AI-powered workflows**\n \n@@ -164,10 +173,10 @@\n     allow: [\"echo\", \"git\", \"npm\", \"pnpm\", \"yarn\"],\n   },\n   \n   ai: {\n-    provider: \"openai\",\n-    model: \"gpt-4\",\n+    provider: \"ollama\",\n+    model: \"llama3.1\",\n   },\n   \n   data: {\n     project: {\n"
                },
                {
                    "date": 1758077181475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,9 +174,9 @@\n   },\n   \n   ai: {\n     provider: \"ollama\",\n-    model: \"llama3.1\",\n+    model: \"qwen3-coder:30b\",\n   },\n   \n   data: {\n     project: {\n"
                },
                {
                    "date": 1758077250460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,9 +174,9 @@\n   },\n   \n   ai: {\n     provider: \"ollama\",\n-    model: \"qwen3-coder:30b\",\n+    model: \"qwen3-coder:30b\", // Default from GitVanDefaults\n   },\n   \n   data: {\n     project: {\n"
                },
                {
                    "date": 1758088442924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,34 +196,19 @@\n - **Idempotent Operations**: Safe to run multiple times\n \n ## 🎨 Front-Matter Support\n \n-GitVan supports multiple front-matter formats:\n+GitVan uses YAML front-matter for all templates and configuration:\n \n-### YAML (Default)\n+### YAML Front-Matter\n ```yaml\n ---\n to: \"output.txt\"\n force: \"overwrite\"\n ---\n Content here\n ```\n \n-### TOML\n-```toml\n-+++\n-to = \"output.txt\"\n-force = \"overwrite\"\n-+++\n-Content here\n-```\n-\n-### JSON\n-```json\n-;{\"to\":\"output.txt\",\"force\":\"overwrite\"}\n-Content here\n-```\n-\n ## 📚 Examples\n \n ### Simple Job\n ```javascript\n"
                },
                {
                    "date": 1758089475362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -260,8 +260,35 @@\n   }\n }\n ```\n \n+### Worktree Management\n+```javascript\n+// Using the useWorktree composable\n+import { useWorktree } from 'gitvan/composables/worktree';\n+\n+const worktree = useWorktree();\n+\n+// Get worktree information\n+const info = await worktree.info();\n+console.log(`Current branch: ${info.branch}`);\n+console.log(`Worktree path: ${info.worktree}`);\n+\n+// List all worktrees\n+const worktrees = await worktree.list();\n+worktrees.forEach(wt => {\n+  console.log(`${wt.path} (${wt.branch}) ${wt.isMain ? '(main)' : ''}`);\n+});\n+\n+// Create a new worktree\n+await worktree.create('/path/to/new-worktree', 'feature-branch');\n+\n+// Get worktree status\n+const status = await worktree.status();\n+console.log(`Total worktrees: ${status.count}`);\n+console.log(`Is main worktree: ${status.isMain}`);\n+```\n+\n ## 🤝 Contributing\n \n 1. Fork the repository\n 2. Create a feature branch: `git checkout -b feature-name`\n"
                },
                {
                    "date": 1758090739990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,15 +40,65 @@\n ```bash\n gitvan run hello\n ```\n \n+## 🧩 Composables API\n+\n+GitVan v2 provides a comprehensive set of composables for building automation workflows:\n+\n+### Core Composables\n+- **`useGit`** - Git operations and repository management\n+- **`useWorktree`** - Git worktree management  \n+- **`useTemplate`** - Template rendering with Nunjucks\n+\n+### Job & Event Composables\n+- **`useJob`** - Job lifecycle and execution management\n+- **`useEvent`** - Event system and triggering\n+- **`useSchedule`** - Cron and scheduling management\n+\n+### Infrastructure Composables\n+- **`useReceipt`** - Receipt and audit management\n+- **`useLock`** - Distributed locking\n+- **`useRegistry`** - Job and event registry management\n+\n+### Example Usage\n+\n+```javascript\n+import { withGitVan, useJob, useEvent, useSchedule } from './src/composables/index.mjs';\n+\n+await withGitVan({ cwd: process.cwd(), env: process.env }, async () => {\n+  const job = useJob();\n+  const event = useEvent();\n+  const schedule = useSchedule();\n+  \n+  // Schedule a job\n+  await schedule.add('daily-backup', '0 3 * * *', 'backup-job');\n+  \n+  // Register events\n+  await event.register('backup-complete', {\n+    name: 'Backup Complete',\n+    type: 'custom',\n+    job: 'notify-job'\n+  });\n+  \n+  // Execute job with event triggering\n+  const result = await job.run('backup-job');\n+  if (result.success) {\n+    await event.trigger('backup-complete', { result });\n+  }\n+});\n+```\n+\n+**📚 Documentation**: [Composables API](docs/api/composables.md) | [Quick Reference](docs/api/composables-quick-reference.md) | [Examples](docs/examples/composables-examples.md)\n+\n ## ✨ Features\n \n ### 🎯 **Core Capabilities**\n - **Git-Native**: Uses Git refs for locking, notes for audit trails\n - **Template Engine**: Nunjucks-powered with front-matter support\n - **Job System**: Automated task execution with scheduling\n - **Pack System**: Reusable automation components\n+- **Composables API**: Comprehensive composables for automation workflows\n - **AI Integration**: Generate jobs and templates with AI assistance\n \n ### 📋 **Front-Matter Templates**\n GitVan supports Hygen-style templates with rich front-matter:\n"
                },
                {
                    "date": 1758095058485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,36 @@\n # or\n npm install gitvan\n ```\n \n+### Deterministic First Run\n+\n+```bash\n+git init my-repo && cd my-repo\n+gitvan init\n+echo 'console.log(1)' > index.js\n+git add . && git commit -m \"init\"\n+\n+# Add a real job\n+echo \"import { defineJob, useGit, useNotes } from 'file:///Users/sac/gitvan/src/index.mjs'\n+\n+export default defineJob({\n+  meta: { name: 'touch', desc: 'Touch file on tag creation' },\n+  on: { tagCreate: 'v*' },\n+  async run() {\n+    const git = useGit()\n+    const notes = useNotes()\n+    await git.writeFile('TOUCHED', 'ok')\n+    await notes.write(\\`touch for \\${await git.headSha()}\\`)\n+    return { ok: true, artifacts: ['TOUCHED'] }\n+  }\n+})\" > jobs/touch.mjs\n+\n+git tag v0.1.0\n+gitvan event simulate --ref refs/tags/v0.1.0\n+test -f TOUCHED && echo ok\n+```\n+\n ### Initialize a Project\n \n ```bash\n gitvan init\n@@ -48,8 +76,9 @@\n ### Core Composables\n - **`useGit`** - Git operations and repository management\n - **`useWorktree`** - Git worktree management  \n - **`useTemplate`** - Template rendering with Nunjucks\n+- **`useNotes`** - Git notes management for receipts\n \n ### Job & Event Composables\n - **`useJob`** - Job lifecycle and execution management\n - **`useEvent`** - Event system and triggering\n@@ -59,38 +88,49 @@\n - **`useReceipt`** - Receipt and audit management\n - **`useLock`** - Distributed locking\n - **`useRegistry`** - Job and event registry management\n \n-### Example Usage\n+### API Reference\n \n+#### defineJob\n ```javascript\n-import { withGitVan, useJob, useEvent, useSchedule } from './src/composables/index.mjs';\n+import { defineJob, useGit, useTemplate, useNotes } from 'file:///Users/sac/gitvan/src/index.mjs'\n \n-await withGitVan({ cwd: process.cwd(), env: process.env }, async () => {\n-  const job = useJob();\n-  const event = useEvent();\n-  const schedule = useSchedule();\n+export default defineJob({\n+  meta: { name: \"changelog\", desc: \"Generate changelog from commits\" },\n+  on: { tagCreate: \"v*\" },\n+  async run() {\n+    const git = useGit()\n+    const tpl = await useTemplate()\n+    const notes = useNotes()\n+\n+    const commits = await git.logSinceLastTag()\n+    const body = tpl.render(\"changelog.njk\", { commits })\n+    await git.writeFile(\"CHANGELOG.md\", body)\n+    await notes.write(`changelog for ${await git.headSha()}`)\n+    return { ok: true, artifacts: [\"CHANGELOG.md\"] }\n+  }\n+})\n+```\n+\n+#### Event Schema\n+```javascript\n+on: {\n+  // Git events\n+  push: \"refs/heads/main\",           // Push to specific branch\n+  tagCreate: \"v*\",                   // Tag creation with pattern\n+  merge: \"into:main\",                // Merge into branch\n+  fsChange: \"src/**\",                // File system changes\n   \n-  // Schedule a job\n-  await schedule.add('daily-backup', '0 3 * * *', 'backup-job');\n+  // Cron events\n+  cron: \"0 */2 * * *\",               // Cron expression\n   \n-  // Register events\n-  await event.register('backup-complete', {\n-    name: 'Backup Complete',\n-    type: 'custom',\n-    job: 'notify-job'\n-  });\n-  \n-  // Execute job with event triggering\n-  const result = await job.run('backup-job');\n-  if (result.success) {\n-    await event.trigger('backup-complete', { result });\n-  }\n-});\n+  // Predicates compose under all/any\n+  all: [{ push: \"refs/heads/main\" }, { fsChange: \"src/**\" }],\n+  any: [{ tagCreate: \"v*\" }, { cron: \"0 0 * * *\" }]\n+}\n ```\n \n-**📚 Documentation**: [Composables API](docs/api/composables.md) | [Quick Reference](docs/api/composables-quick-reference.md) | [Examples](docs/examples/composables-examples.md)\n-\n ## ✨ Features\n \n ### 🎯 **Core Capabilities**\n - **Git-Native**: Uses Git refs for locking, notes for audit trails\n@@ -169,9 +209,9 @@\n \n ### Daemon & Events\n - `gitvan daemon start` - Start GitVan daemon\n - `gitvan daemon status` - Check daemon status\n-- `gitvan event simulate --files \"src/**\"` - Simulate file events\n+- `gitvan event simulate --ref refs/tags/v1.0.0` - Simulate events\n \n ### Audit & Compliance\n - `gitvan audit build` - Build audit report\n - `gitvan audit verify` - Verify operation integrity\n@@ -236,16 +276,88 @@\n   },\n };\n ```\n \n+## 🎯 Strategy Presets\n+\n+GitVan supports multiple development strategies with preset configurations:\n+\n+### Trunk-Based (Default)\n+- Direct commits to main branch\n+- Feature branches merged via PR\n+- Continuous deployment on main\n+\n+### Release Flow\n+- Release branches for versioning\n+- Feature branches → Release → Main\n+- Tagged releases with changelogs\n+\n+### Forking Workflow\n+- External contributor support\n+- Fork-based pull requests\n+- Security scanning for external PRs\n+\n+## 📊 Event Model\n+\n+GitVan supports a comprehensive event system with standardized patterns:\n+\n+| Event        | Key payload              | Pattern example        |\n+| ------------ | ------------------------ | ---------------------- |\n+| `push`       | `ref`, `before`, `after` | `push:refs/heads/main` |\n+| `tag:create` | `ref`, `tag`             | `tag:create:v*`        |\n+| `merge`      | `from`, `into`           | `merge:into:main`      |\n+| `fs:change`  | `paths`                  | `fs:change:src/**`     |\n+| `cron`       | `cron`                   | `cron:0 */2 * * *`     |\n+\n+Predicates compose under `all` and `any`. Keep it to those two.\n+\n+## 🔄 Evolution Story\n+\n+GitVan's power lies in how the tree stays fixed while behavior changes. Here's how workflows evolve:\n+\n+### Phase 1 → Phase 2 (add release flow)\n+\n+```diff\n+ // gitvan.config.js\n+ export default {\n+-  strategy: \"tbd\",\n++  strategy: \"release-flow\",\n+   events: {\n+     \"push:refs/heads/main\": [\"notes:write\",\"changelog\"],\n+     \"push:refs/heads/feature/*\": [\"lint.changed\",\"test.changed\"],\n++    \"branch:create:refs/heads/release/*\": [\"version.freeze\",\"changelog.seed\"],\n++    \"push:refs/heads/release/*\": [\"release.plan\"],\n+     \"tag:create:v*\": [\"release.publish\"]\n+   }\n+ }\n+```\n+\n+### Phase 2 → Phase 3 (enable OSS PRs)\n+\n+```diff\n+   events: {\n+     ...\n++    \"pr:opened:external\": [\"security.scan\",\"ai.review.summary\"]\n+   }\n+ }\n+```\n+\n ## 🔒 Security & Safety\n \n - **Path Sandboxing**: Prevents directory traversal attacks\n - **Atomic Locking**: Git ref-based concurrency control\n - **Shell Allowlists**: Configurable command execution\n - **Audit Trails**: Complete operation logging in Git notes\n - **Idempotent Operations**: Safe to run multiple times\n \n+## 📝 Receipts\n+\n+GitVan maintains complete audit trails through Git notes:\n+\n+- **Location**: `refs/notes/gitvan/results`\n+- **Key**: `${commitSHA}:${jobName}:${timestamp}`\n+- **Body**: JSON `{ ok, startedAt, finishedAt, inputs, outputs, artifacts, seed }`\n+\n ## 🎨 Front-Matter Support\n \n GitVan uses YAML front-matter for all templates and configuration:\n \n@@ -259,19 +371,28 @@\n ```\n \n ## 📚 Examples\n \n-### Simple Job\n+### Canonical Job Skeleton\n ```javascript\n-// jobs/greeting.mjs\n-export default {\n-  name: \"greeting\",\n-  description: \"Say hello\",\n-  \n+// jobs/changelog.mjs\n+import { defineJob, useGit, useTemplate, useNotes } from 'file:///Users/sac/gitvan/src/index.mjs'\n+\n+export default defineJob({\n+  meta: { name: \"changelog\", desc: \"Generate changelog from commits\" },\n+  on: { tagCreate: \"v*\" },\n   async run() {\n-    console.log(\"Hello from GitVan! 🚀\");\n+    const git = useGit()\n+    const tpl = await useTemplate()\n+    const notes = useNotes()\n+\n+    const commits = await git.logSinceLastTag()\n+    const body = tpl.render(\"changelog.njk\", { commits })\n+    await git.writeFile(\"CHANGELOG.md\", body)\n+    await notes.write(`changelog for ${await git.headSha()}`)\n+    return { ok: true, artifacts: [\"CHANGELOG.md\"] }\n   }\n-};\n+})\n ```\n \n ### Template with Front-Matter\n ```yaml\n@@ -337,8 +458,12 @@\n console.log(`Total worktrees: ${status.count}`);\n console.log(`Is main worktree: ${status.isMain}`);\n ```\n \n+## 🚀 Performance\n+\n+GitVan is optimized for sub-second execution of single-file jobs on local repositories. For complex workflows, performance scales linearly with job complexity.\n+\n ## 🤝 Contributing\n \n 1. Fork the repository\n 2. Create a feature branch: `git checkout -b feature-name`\n"
                },
                {
                    "date": 1758142265677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,11 +8,11 @@\n ---\n \n # GitVan v2\n \n-**Git-native development automation platform with AI-powered workflows**\n+**Git-native development automation platform with unified hooks system**\n \n-GitVan transforms Git into a runtime environment for development automation, providing intelligent job scheduling, template generation, and AI-powered workflow creation.\n+GitVan transforms Git into a runtime environment for development automation, providing intelligent job scheduling, template generation, and AI-powered workflow creation through a unified hooks system.\n \n ## 🚀 Quick Start\n \n ### Installation\n@@ -30,25 +30,25 @@\n gitvan init\n echo 'console.log(1)' > index.js\n git add . && git commit -m \"init\"\n \n-# Add a real job\n+# Add a real job with unified hooks system\n echo \"import { defineJob, useGit, useNotes } from 'file:///Users/sac/gitvan/src/index.mjs'\n \n export default defineJob({\n-  meta: { name: 'touch', desc: 'Touch file on tag creation' },\n-  on: { tagCreate: 'v*' },\n-  async run() {\n+  meta: { name: 'touch', desc: 'Touch file on commit/merge' },\n+  hooks: ['post-commit', 'post-merge'], // Unified hooks system\n+  async run(context) {\n     const git = useGit()\n     const notes = useNotes()\n     await git.writeFile('TOUCHED', 'ok')\n     await notes.write(\\`touch for \\${await git.headSha()}\\`)\n     return { ok: true, artifacts: ['TOUCHED'] }\n   }\n })\" > jobs/touch.mjs\n \n-git tag v0.1.0\n-gitvan event simulate --ref refs/tags/v0.1.0\n+git commit -m \"feat: add touch job\"\n+gitvan hook post-commit\n test -f TOUCHED && echo ok\n ```\n \n ### Initialize a Project\n@@ -78,17 +78,17 @@\n - **`useWorktree`** - Git worktree management  \n - **`useTemplate`** - Template rendering with Nunjucks\n - **`useNotes`** - Git notes management for receipts\n \n-### Job & Event Composables\n+### Job & Hook Composables\n - **`useJob`** - Job lifecycle and execution management\n-- **`useEvent`** - Event system and triggering\n+- **`useHook`** - Unified hooks system and triggering\n - **`useSchedule`** - Cron and scheduling management\n \n ### Infrastructure Composables\n - **`useReceipt`** - Receipt and audit management\n - **`useLock`** - Distributed locking\n-- **`useRegistry`** - Job and event registry management\n+- **`useRegistry`** - Job and hook registry management\n \n ### API Reference\n \n #### defineJob\n@@ -96,9 +96,9 @@\n import { defineJob, useGit, useTemplate, useNotes } from 'file:///Users/sac/gitvan/src/index.mjs'\n \n export default defineJob({\n   meta: { name: \"changelog\", desc: \"Generate changelog from commits\" },\n-  on: { tagCreate: \"v*\" },\n+  hooks: [\"post-commit\", \"post-merge\"], // Unified hooks system\n   async run() {\n     const git = useGit()\n     const tpl = await useTemplate()\n     const notes = useNotes()\n@@ -111,32 +111,54 @@\n   }\n })\n ```\n \n-#### Event Schema\n+#### Hooks Schema\n ```javascript\n-on: {\n-  // Git events\n-  push: \"refs/heads/main\",           // Push to specific branch\n-  tagCreate: \"v*\",                   // Tag creation with pattern\n-  merge: \"into:main\",                // Merge into branch\n-  fsChange: \"src/**\",                // File system changes\n-  \n-  // Cron events\n-  cron: \"0 */2 * * *\",               // Cron expression\n-  \n-  // Predicates compose under all/any\n-  all: [{ push: \"refs/heads/main\" }, { fsChange: \"src/**\" }],\n-  any: [{ tagCreate: \"v*\" }, { cron: \"0 0 * * *\" }]\n-}\n+hooks: [\n+  \"post-commit\",    // After commit\n+  \"post-merge\",     // After merge\n+  \"post-rewrite\",   // After rebase/amend (future)\n+  \"pre-push\"        // Before push (future)\n+]\n ```\n \n+## 🎯 Unified Hooks System\n+\n+GitVan v2 features a **unified hooks system** that replaces the dual events/jobs architecture with a single, cleaner execution mechanism:\n+\n+### **Single Execution Mechanism**\n+- **Jobs**: Define `hooks: [\"post-commit\", \"post-merge\"]` instead of complex event matching\n+- **Hooks**: Single `src/hooks/` directory with deterministic execution order\n+- **Registry**: Automatic job discovery and hook-to-job mapping\n+- **Loader**: Simple, predictable execution flow\n+\n+### **Benefits**\n+- **Cleaner Architecture**: One system instead of events + jobs\n+- **Deterministic Execution**: Filename prefix ordering (10-, 20-, etc.)\n+- **Better Separation**: Clear responsibilities between hooks and jobs\n+- **Easier Maintenance**: Single system to understand and debug\n+\n+### **Git Hook Integration**\n+```bash\n+# Install Git hooks\n+gitvan ensure\n+\n+# Manual hook execution\n+gitvan hook post-commit\n+gitvan hook post-merge\n+\n+# Event simulation\n+gitvan event simulate --files \"src/components/Button.tsx\"\n+```\n+\n ## ✨ Features\n \n ### 🎯 **Core Capabilities**\n - **Git-Native**: Uses Git refs for locking, notes for audit trails\n+- **Unified Hooks System**: Single execution mechanism for all automation\n - **Template Engine**: Nunjucks-powered with front-matter support\n-- **Job System**: Automated task execution with scheduling\n+- **Job System**: Automated task execution with hook-based scheduling\n - **Pack System**: Reusable automation components\n - **Composables API**: Comprehensive composables for automation workflows\n - **AI Integration**: Generate jobs and templates with AI assistance\n \n@@ -187,11 +209,16 @@\n ## 🛠️ Commands\n \n ### Core Commands\n - `gitvan init` - Initialize GitVan in current directory\n-- `gitvan ensure` - Verify and fix GitVan configuration\n+- `gitvan ensure` - Install Git hooks for unified hooks system\n - `gitvan help` - Show all available commands\n \n+### Unified Hooks System\n+- `gitvan hook <name>` - Execute specific Git hook (post-commit, post-merge)\n+- `gitvan event simulate --files \"<path>\"` - Test router logic without real commit\n+- `gitvan ensure` - Install Git hooks for surgical precision\n+\n ### Job Management\n - `gitvan job list` - List available jobs\n - `gitvan job run --name <job>` - Run a specific job\n - `gitvan run <job>` - Run job (legacy syntax)\n@@ -206,12 +233,13 @@\n - `gitvan chat generate <prompt>` - Generate job via AI\n - `gitvan chat draft <prompt>` - Draft template via AI\n - `gitvan llm call <prompt>` - Direct AI interaction\n \n-### Daemon & Events\n+### Daemon & Hooks\n - `gitvan daemon start` - Start GitVan daemon\n - `gitvan daemon status` - Check daemon status\n-- `gitvan event simulate --ref refs/tags/v1.0.0` - Simulate events\n+- `gitvan hook post-commit` - Execute post-commit hook manually\n+- `gitvan hook post-merge` - Execute post-merge hook manually\n \n ### Audit & Compliance\n - `gitvan audit build` - Build audit report\n - `gitvan audit verify` - Verify operation integrity\n@@ -226,12 +254,15 @@\n ├── .gitvan/           # GitVan state and configuration\n │   ├── packs/         # Installed packs\n │   ├── state/         # Runtime state\n │   └── backups/       # Automatic backups\n-├── jobs/              # Job definitions\n+├── src/hooks/         # Unified hooks system\n+│   ├── 10-router.post-commit.mjs\n+│   ├── 10-router.post-merge.mjs\n+│   └── _shared/       # Shared utilities\n+├── jobs/              # Job definitions (with hooks)\n ├── templates/         # Nunjucks templates\n ├── packs/             # Local pack definitions\n-├── events/            # Event handlers\n └── gitvan.config.js   # Configuration file\n ```\n \n ## ⚙️ Configuration\n@@ -378,9 +409,9 @@\n import { defineJob, useGit, useTemplate, useNotes } from 'file:///Users/sac/gitvan/src/index.mjs'\n \n export default defineJob({\n   meta: { name: \"changelog\", desc: \"Generate changelog from commits\" },\n-  on: { tagCreate: \"v*\" },\n+  hooks: [\"post-commit\", \"post-merge\"], // Unified hooks system\n   async run() {\n     const git = useGit()\n     const tpl = await useTemplate()\n     const notes = useNotes()\n"
                },
                {
                    "date": 1758143569796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,30 +121,31 @@\n   \"pre-push\"        // Before push (future)\n ]\n ```\n \n-## 🎯 Unified Hooks System\n+## 🎯 Job-Only Architecture\n \n-GitVan v2 features a **unified hooks system** that replaces the dual events/jobs architecture with a single, cleaner execution mechanism:\n+GitVan v2 features a **job-only architecture** that eliminates complexity by having jobs handle Git operations directly:\n \n-### **Single Execution Mechanism**\n-- **Jobs**: Define `hooks: [\"post-commit\", \"post-merge\"]` instead of complex event matching\n-- **Hooks**: Single `src/hooks/` directory with deterministic execution order\n+### **Single Layer Execution**\n+- **Jobs**: Define `hooks: [\"post-commit\", \"post-merge\"]` and handle Git operations directly\n+- **No Hooks Directory**: Eliminates `src/hooks/` complexity entirely\n - **Registry**: Automatic job discovery and hook-to-job mapping\n-- **Loader**: Simple, predictable execution flow\n+- **Loader**: Direct job execution - simple and predictable\n \n ### **Benefits**\n-- **Cleaner Architecture**: One system instead of events + jobs\n-- **Deterministic Execution**: Filename prefix ordering (10-, 20-, etc.)\n-- **Better Separation**: Clear responsibilities between hooks and jobs\n-- **Easier Maintenance**: Single system to understand and debug\n+- **Eliminates Complexity**: No hooks directory to maintain\n+- **Jobs Handle Everything**: Git operations, routing, execution all in jobs\n+- **Simpler Execution**: Direct job execution without intermediate layers\n+- **Fewer Files**: Less code to maintain and understand\n+- **More Intuitive**: Developers work directly with jobs\n \n ### **Git Hook Integration**\n ```bash\n # Install Git hooks\n gitvan ensure\n \n-# Manual hook execution\n+# Manual hook execution (executes jobs directly)\n gitvan hook post-commit\n gitvan hook post-merge\n \n # Event simulation\n@@ -154,9 +155,9 @@\n ## ✨ Features\n \n ### 🎯 **Core Capabilities**\n - **Git-Native**: Uses Git refs for locking, notes for audit trails\n-- **Unified Hooks System**: Single execution mechanism for all automation\n+- **Job-Only Architecture**: Single layer execution with jobs handling everything\n - **Template Engine**: Nunjucks-powered with front-matter support\n - **Job System**: Automated task execution with hook-based scheduling\n - **Pack System**: Reusable automation components\n - **Composables API**: Comprehensive composables for automation workflows\n"
                },
                {
                    "date": 1758154008270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,11 +8,11 @@\n ---\n \n # GitVan v2\n \n-**Git-native development automation platform with unified hooks system**\n+**Autonomic Git-native development automation platform with AI-powered workflows**\n \n-GitVan transforms Git into a runtime environment for development automation, providing intelligent job scheduling, template generation, and AI-powered workflow creation through a unified hooks system.\n+GitVan transforms Git into a runtime environment for development automation, providing intelligent job scheduling, template generation, and AI-powered workflow creation through a unified autonomic system. Everything happens automatically after initialization.\n \n ## 🚀 Quick Start\n \n ### Installation\n@@ -22,54 +22,192 @@\n # or\n npm install gitvan\n ```\n \n-### Deterministic First Run\n+### Autonomic First Run\n \n ```bash\n+# 1. Initialize GitVan (does everything automatically)\n git init my-repo && cd my-repo\n gitvan init\n-echo 'console.log(1)' > index.js\n-git add . && git commit -m \"init\"\n \n-# Add a real job with unified hooks system\n-echo \"import { defineJob, useGit, useNotes } from 'file:///Users/sac/gitvan/src/index.mjs'\n+# 2. Start coding - GitVan handles everything\n+echo 'console.log(\"Hello GitVan!\")' > index.js\n+gitvan save  # AI generates commit message, jobs run automatically\n \n-export default defineJob({\n-  meta: { name: 'touch', desc: 'Touch file on commit/merge' },\n-  hooks: ['post-commit', 'post-merge'], // Unified hooks system\n-  async run(context) {\n-    const git = useGit()\n-    const notes = useNotes()\n-    await git.writeFile('TOUCHED', 'ok')\n-    await notes.write(\\`touch for \\${await git.headSha()}\\`)\n-    return { ok: true, artifacts: ['TOUCHED'] }\n-  }\n-})\" > jobs/touch.mjs\n+# 3. That's it! The system is fully autonomic\n+```\n \n-git commit -m \"feat: add touch job\"\n-gitvan hook post-commit\n-test -f TOUCHED && echo ok\n+**What happens automatically:**\n+- ✅ Daemon starts and monitors Git events\n+- ✅ Git hooks install for automatic job execution  \n+- ✅ Pack registry loads for project scaffolding\n+- ✅ AI generates intelligent commit messages (local Ollama)\n+- ✅ Jobs run automatically on commits\n+- ✅ Complete 360 project lifecycle automation\n+\n+## 🔒 Security-First AI Integration\n+\n+GitVan prioritizes security with **Ollama-first AI processing**:\n+\n+- **🔐 Local AI Processing**: All AI operations happen on your machine\n+- **🛡️ No API Keys Required**: Completely self-contained operation  \n+- **🏠 Offline Capable**: Works without internet connection\n+- **⚡ Fast & Reliable**: Local processing with timeout protection\n+\n+```bash\n+# AI commit messages generated locally with Ollama\n+gitvan save  # Uses qwen3-coder:30b model locally\n+\n+# Fallback to external AI only if explicitly configured\n+export ANTHROPIC_API_KEY=\"your-key\"  # Optional external fallback\n ```\n \n-### Initialize a Project\n+## 🏗️ Architecture Features\n \n+### **Autonomic System**\n+- **Single Command Setup**: `gitvan init` does everything automatically\n+- **Background Processing**: Non-blocking daemon and pack loading\n+- **Lazy Loading**: Packs loaded only when needed\n+- **Event-Driven**: All operations triggered by Git events\n+\n+### **Job-Only Architecture** \n+- **Unified Execution**: Jobs handle all automation tasks\n+- **No Hooks Directory**: Simplified architecture eliminates complexity\n+- **Direct Git Integration**: Jobs interact with Git directly\n+- **Automatic Discovery**: Jobs discovered and executed automatically\n+\n+### **Pack System**\n+- **GitHub Templates**: Auto-install packs from `gitvan.config.js`\n+- **Lazy Registry**: Packs loaded on-demand for performance\n+- **Built-in Packs**: Next.js, React, Node.js starters included\n+- **Remote Support**: Install packs from GitHub/GitLab via Giget\n+\n+### **Non-Blocking Operations**\n+- **Fast Init**: Completes in < 1 second with background setup\n+- **Timeout Protection**: All operations have safety timeouts\n+- **Graceful Degradation**: Continue on errors with fallbacks\n+- **Resource Efficient**: Load only what's needed when needed\n+\n+## 🎯 GitHub Templates\n+\n+Create repositories with just `gitvan.config.js` - everything else happens automatically:\n+\n+### **Next.js Template**\n+```javascript\n+// gitvan.config.js\n+export default {\n+  autoInstall: {\n+    packs: [\"nextjs-github-pack\"]\n+  },\n+  ai: {\n+    provider: \"ollama\",\n+    model: \"qwen3-coder:30b\"\n+  }\n+};\n+```\n+\n+**Usage:**\n ```bash\n+# 1. Create repository from template\n+# 2. Clone repository  \n+# 3. One command:\n gitvan init\n+\n+# 4. Start coding:\n+gitvan save\n ```\n \n-This creates a complete GitVan project structure with:\n-- 📁 Directory structure (`.gitvan/`, `jobs/`, `templates/`, `packs/`)\n-- ⚙️ Configuration file (`gitvan.config.js`)\n-- 📝 Sample files (job, template, pack)\n-- 🔧 Git repository setup\n+### **React Template**\n+```javascript\n+// gitvan.config.js  \n+export default {\n+  autoInstall: {\n+    packs: [\"react-vite-pack\", \"tailwind-pack\"]\n+  },\n+  ai: {\n+    provider: \"ollama\", \n+    model: \"qwen3-coder:30b\"\n+  }\n+};\n+```\n \n-### Run Your First Job\n+**Result**: Complete project setup with:\n+- ✅ Next.js/React project structure\n+- ✅ TypeScript configuration\n+- ✅ ESLint and Tailwind CSS\n+- ✅ Development server ready\n+- ✅ AI-powered commit messages\n \n+## 🚀 Core Commands\n+\n+### **Essential Commands**\n ```bash\n-gitvan run hello\n+gitvan init          # Complete autonomic setup (daemon + hooks + packs)\n+gitvan save          # AI-powered commit with automatic job execution\n+gitvan help          # Show all available commands\n ```\n \n+### **Job Management**\n+```bash\n+gitvan list          # List available jobs\n+gitvan run <job>     # Run specific job manually\n+gitvan job list      # Detailed job information\n+```\n+\n+### **Daemon Control**\n+```bash\n+gitvan daemon start  # Start background daemon\n+gitvan daemon stop   # Stop daemon\n+gitvan daemon status # Check daemon status\n+```\n+\n+### **Pack Management**\n+```bash\n+gitvan pack list     # List installed packs\n+gitvan pack apply    # Apply pack to project\n+gitvan marketplace   # Browse and install packs\n+```\n+\n+### **Advanced Features**\n+```bash\n+gitvan event simulate --files \"src/**\"  # Test job execution\n+gitvan audit build                      # Generate audit reports\n+gitvan chat generate \"Create a job\"     # AI job generation\n+```\n+\n+## 🔄 360 Project Lifecycle\n+\n+GitVan provides complete automation from initialization to deployment:\n+\n+### **1. Initialization**\n+```bash\n+gitvan init  # Sets up everything automatically\n+```\n+\n+### **2. Development** \n+```bash\n+# Edit files\n+echo \"console.log('Hello World')\" > src/index.js\n+\n+# Save with AI commit message\n+gitvan save  # AI generates: \"feat: add Hello World console log\"\n+```\n+\n+### **3. Automation**\n+- Jobs run automatically on commits\n+- Templates generate project files\n+- Packs scaffold complete applications\n+- AI provides intelligent commit messages\n+\n+### **4. Deployment**\n+- Built-in deployment jobs\n+- CI/CD integration via Git hooks\n+- Automated testing and validation\n+- Production-ready configurations\n+\n+**The Result**: Complete autonomic development workflow where everything happens automatically after `gitvan init`.\n+\n ## 🧩 Composables API\n \n GitVan v2 provides a comprehensive set of composables for building automation workflows:\n \n@@ -492,17 +630,28 @@\n ```\n \n ## 🚀 Performance\n \n-GitVan is optimized for sub-second execution of single-file jobs on local repositories. For complex workflows, performance scales linearly with job complexity.\n+GitVan is optimized for autonomic operation with:\n+- **Fast Init**: < 1 second initialization with background setup\n+- **Non-Blocking**: All operations run asynchronously\n+- **Lazy Loading**: Packs and jobs loaded only when needed\n+- **Timeout Protection**: No hanging operations\n+- **Resource Efficient**: Minimal memory and CPU usage\n \n+## 🎯 Vision: The Autonomic Future\n+\n+GitVan represents the future of development automation - where everything happens automatically after initialization. No more manual setup, no more configuration complexity, no more external dependencies for basic operations.\n+\n+**The Dream**: A user can `gitvan init` and have a complete, intelligent development environment that handles everything from commit messages to deployment - all powered by local AI and autonomic systems.\n+\n ## 🤝 Contributing\n \n 1. Fork the repository\n 2. Create a feature branch: `git checkout -b feature-name`\n 3. Make your changes\n 4. Run tests: `pnpm test`\n-5. Commit: `git commit -m \"Add feature\"`\n+5. Commit: `gitvan save` (uses AI commit messages!)\n 6. Push: `git push origin feature-name`\n 7. Submit a pull request\n \n ## 📄 License\n"
                },
                {
                    "date": 1758156416480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,18 +12,34 @@\n **Autonomic Git-native development automation platform with AI-powered workflows**\n \n GitVan transforms Git into a runtime environment for development automation, providing intelligent job scheduling, template generation, and AI-powered workflow creation through a unified autonomic system. Everything happens automatically after initialization.\n \n+## 📦 NPM Package\n+\n+GitVan v2.0.0 is now available on npm! Install it globally or locally:\n+\n+- **Package:** [gitvan@2.0.0](https://www.npmjs.com/package/gitvan)\n+- **Registry:** npmjs.org\n+- **Size:** 3.1 MB unpacked\n+- **Dependencies:** 7 core packages (Ollama, Giget, Hookable, etc.)\n+\n ## 🚀 Quick Start\n \n ### Installation\n \n ```bash\n+# Install globally for CLI access\n npm install -g gitvan\n-# or\n+\n+# Or install locally in your project\n npm install gitvan\n+\n+# Verify installation\n+gitvan --version\n ```\n \n+**📦 Available on npm:** [gitvan@2.0.0](https://www.npmjs.com/package/gitvan)\n+\n ### Autonomic First Run\n \n ```bash\n # 1. Initialize GitVan (does everything automatically)\n"
                },
                {
                    "date": 1758209909846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,4 @@\n----\n-title: \"GitVan v2\"\n-description: \"Git-native development automation platform with AI-powered workflows\"\n-version: \"2.0.0\"\n-author: \"GitVan Team\"\n-license: \"MIT\"\n-tags: [\"git\", \"automation\", \"templating\", \"ai\", \"workflows\"]\n----\n-\n # GitVan v2\n \n **Autonomic Git-native development automation platform with AI-powered workflows**\n \n"
                },
                {
                    "date": 1758225512406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,676 +1,297 @@\n-# GitVan v2\n+# GitVan v2.1.0 🚀\n \n-**Autonomic Git-native development automation platform with AI-powered workflows**\n+**The Git-Native Development Automation Platform with Knowledge Hook Engine**\n \n-GitVan transforms Git into a runtime environment for development automation, providing intelligent job scheduling, template generation, and AI-powered workflow creation through a unified autonomic system. Everything happens automatically after initialization.\n+GitVan transforms Git into a runtime environment for development automation, providing intelligent job scheduling, template generation, AI-powered workflows, and autonomous knowledge-driven hooks through a unified autonomic system. Everything happens automatically after initialization.\n \n+## 🌟 What's New in v2.1.0\n+\n+### 🧠 Knowledge Hook Engine\n+- **Autonomous Intelligence**: Hooks that react to changes in your knowledge graph\n+- **SPARQL-Driven Logic**: Complex queries determine when actions should trigger\n+- **State Change Detection**: ResultDelta predicates detect meaningful changes\n+- **Boolean Conditions**: ASK predicates for simple true/false logic\n+- **Threshold Monitoring**: SELECTThreshold predicates for metric-based triggers\n+- **SHACL Validation**: Shape-based validation triggers\n+\n+### ⚡ Turtle as Workflow Engine\n+- **Declarative Workflows**: Define complex workflows in Turtle (.ttl) format\n+- **DAG Execution**: Topological sorting ensures proper step dependencies\n+- **Template Processing**: Advanced Nunjucks templates with filters\n+- **SPARQL Integration**: Query your knowledge graph within workflows\n+- **Context Management**: Rich context passing between workflow steps\n+\n+### 🐳 Docker Cleanroom Support\n+- **Containerized Initialization**: Full GitVan setup in Docker environments\n+- **Reproducible Builds**: Consistent initialization across all environments\n+- **Production Ready**: Optimized Alpine Linux containers\n+\n ## 📦 NPM Package\n \n-GitVan v2.0.0 is now available on npm! Install it globally or locally:\n+GitVan v2.1.0 is now available on npm! Install it globally or locally:\n \n-- **Package:** [gitvan@2.0.0](https://www.npmjs.com/package/gitvan)\n+- **Package:** [gitvan@2.1.0](https://www.npmjs.com/package/gitvan)\n - **Registry:** npmjs.org\n - **Size:** 3.1 MB unpacked\n - **Dependencies:** 7 core packages (Ollama, Giget, Hookable, etc.)\n \n ## 🚀 Quick Start\n \n-### Installation\n-\n+### 1. Install GitVan\n ```bash\n-# Install globally for CLI access\n-npm install -g gitvan\n+# Global installation\n+npm install -g gitvan@2.1.0\n \n-# Or install locally in your project\n-npm install gitvan\n-\n-# Verify installation\n-gitvan --version\n+# Local installation\n+npm install gitvan@2.1.0\n ```\n \n-**📦 Available on npm:** [gitvan@2.0.0](https://www.npmjs.com/package/gitvan)\n-\n-### Autonomic First Run\n-\n+### 2. Initialize Your Project\n ```bash\n-# 1. Initialize GitVan (does everything automatically)\n-git init my-repo && cd my-repo\n-gitvan init\n+# In an empty directory\n+gitvan init --name \"my-project\" --description \"My GitVan project\"\n \n-# 2. Start coding - GitVan handles everything\n-echo 'console.log(\"Hello GitVan!\")' > index.js\n-gitvan save  # AI generates commit message, jobs run automatically\n-\n-# 3. That's it! The system is fully autonomic\n+# Or with Docker\n+docker run --rm -v $(pwd):/workspace gitvan-cleanroom\n ```\n \n-**What happens automatically:**\n-- ✅ Daemon starts and monitors Git events\n-- ✅ Git hooks install for automatic job execution  \n-- ✅ Pack registry loads for project scaffolding\n-- ✅ AI generates intelligent commit messages (local Ollama)\n-- ✅ Jobs run automatically on commits\n-- ✅ Complete 360 project lifecycle automation\n-\n-## 🔒 Security-First AI Integration\n-\n-GitVan prioritizes security with **Ollama-first AI processing**:\n-\n-- **🔐 Local AI Processing**: All AI operations happen on your machine\n-- **🛡️ No API Keys Required**: Completely self-contained operation  \n-- **🏠 Offline Capable**: Works without internet connection\n-- **⚡ Fast & Reliable**: Local processing with timeout protection\n-\n+### 3. Complete Setup\n ```bash\n-# AI commit messages generated locally with Ollama\n-gitvan save  # Uses qwen3-coder:30b model locally\n+# Configure Git (if not already done)\n+git config user.name \"Your Name\"\n+git config user.email \"your@email.com\"\n \n-# Fallback to external AI only if explicitly configured\n-export ANTHROPIC_API_KEY=\"your-key\"  # Optional external fallback\n+# Complete GitVan setup\n+gitvan setup\n ```\n \n-## 🏗️ Architecture Features\n+### 4. Start Automating\n+```bash\n+# List available hooks\n+gitvan hooks list\n \n-### **Autonomic System**\n-- **Single Command Setup**: `gitvan init` does everything automatically\n-- **Background Processing**: Non-blocking daemon and pack loading\n-- **Lazy Loading**: Packs loaded only when needed\n-- **Event-Driven**: All operations triggered by Git events\n+# Evaluate all hooks\n+gitvan hooks evaluate\n \n-### **Job-Only Architecture** \n-- **Unified Execution**: Jobs handle all automation tasks\n-- **No Hooks Directory**: Simplified architecture eliminates complexity\n-- **Direct Git Integration**: Jobs interact with Git directly\n-- **Automatic Discovery**: Jobs discovered and executed automatically\n+# List available workflows\n+gitvan workflow list\n \n-### **Pack System**\n-- **GitHub Templates**: Auto-install packs from `gitvan.config.js`\n-- **Lazy Registry**: Packs loaded on-demand for performance\n-- **Built-in Packs**: Next.js, React, Node.js starters included\n-- **Remote Support**: Install packs from GitHub/GitLab via Giget\n-\n-### **Non-Blocking Operations**\n-- **Fast Init**: Completes in < 1 second with background setup\n-- **Timeout Protection**: All operations have safety timeouts\n-- **Graceful Degradation**: Continue on errors with fallbacks\n-- **Resource Efficient**: Load only what's needed when needed\n-\n-## 🎯 GitHub Templates\n-\n-Create repositories with just `gitvan.config.js` - everything else happens automatically:\n-\n-### **Next.js Template**\n-```javascript\n-// gitvan.config.js\n-export default {\n-  autoInstall: {\n-    packs: [\"nextjs-github-pack\"]\n-  },\n-  ai: {\n-    provider: \"ollama\",\n-    model: \"qwen3-coder:30b\"\n-  }\n-};\n+# Run a workflow\n+gitvan workflow run data-processing\n ```\n \n-**Usage:**\n-```bash\n-# 1. Create repository from template\n-# 2. Clone repository  \n-# 3. One command:\n-gitvan init\n+## 🧠 Knowledge Hook Engine\n \n-# 4. Start coding:\n-gitvan save\n-```\n+GitVan's Knowledge Hook Engine represents a paradigm shift from simple event-driven triggers to intelligent, knowledge-driven automation.\n \n-### **React Template**\n-```javascript\n-// gitvan.config.js  \n-export default {\n-  autoInstall: {\n-    packs: [\"react-vite-pack\", \"tailwind-pack\"]\n-  },\n-  ai: {\n-    provider: \"ollama\", \n-    model: \"qwen3-coder:30b\"\n-  }\n-};\n-```\n+### Hook Types\n \n-**Result**: Complete project setup with:\n-- ✅ Next.js/React project structure\n-- ✅ TypeScript configuration\n-- ✅ ESLint and Tailwind CSS\n-- ✅ Development server ready\n-- ✅ AI-powered commit messages\n+#### 🔄 ResultDelta Predicates\n+Detect changes in your knowledge graph state:\n+```turtle\n+@prefix gh: <https://gitvan.dev/graph-hook#> .\n \n-## 🚀 Core Commands\n-\n-### **Essential Commands**\n-```bash\n-gitvan init          # Complete autonomic setup (daemon + hooks + packs)\n-gitvan save          # AI-powered commit with automatic job execution\n-gitvan help          # Show all available commands\n+ex:version-change-predicate rdf:type gh:ResultDelta ;\n+    gh:queryText \"\"\"\n+        PREFIX gv: <https://gitvan.dev/ontology#>\n+        SELECT ?project ?version WHERE {\n+            ?project rdf:type gv:Project .\n+            ?project gv:version ?version .\n+        }\n+    \"\"\" .\n ```\n \n-### **Job Management**\n-```bash\n-gitvan list          # List available jobs\n-gitvan run <job>     # Run specific job manually\n-gitvan job list      # Detailed job information\n+#### ❓ ASK Predicates\n+Simple boolean conditions:\n+```turtle\n+ex:critical-issues-predicate rdf:type gh:ASK ;\n+    gh:queryText \"\"\"\n+        PREFIX gv: <https://gitvan.dev/ontology#>\n+        ASK WHERE {\n+            ?issue rdf:type gv:Issue .\n+            ?issue gv:priority \"critical\" .\n+            ?issue gv:status \"open\" .\n+        }\n+    \"\"\" .\n ```\n \n-### **Daemon Control**\n-```bash\n-gitvan daemon start  # Start background daemon\n-gitvan daemon stop   # Stop daemon\n-gitvan daemon status # Check daemon status\n+#### 📊 SELECTThreshold Predicates\n+Monitor metrics and thresholds:\n+```turtle\n+ex:bug-threshold-predicate rdf:type gh:SELECTThreshold ;\n+    gh:queryText \"\"\"\n+        PREFIX gv: <https://gitvan.dev/ontology#>\n+        SELECT (COUNT(?bug) AS ?count) WHERE {\n+            ?bug rdf:type gv:Bug .\n+            ?bug gv:status \"open\" .\n+        }\n+    \"\"\" ;\n+    gh:threshold \"10\" ;\n+    gh:operator \">\" .\n ```\n \n-### **Pack Management**\n-```bash\n-gitvan pack list     # List installed packs\n-gitvan pack apply    # Apply pack to project\n-gitvan marketplace   # Browse and install packs\n+#### ✅ SHACL Validation Predicates\n+Shape-based validation:\n+```turtle\n+ex:validation-predicate rdf:type gh:SHACLAllConform ;\n+    gh:shapesText \"\"\"\n+        PREFIX sh: <http://www.w3.org/ns/shacl#>\n+        ex:ProjectShape sh:targetClass gv:Project ;\n+            sh:property [\n+                sh:path gv:name ;\n+                sh:minCount 1 ;\n+            ] .\n+    \"\"\" .\n ```\n \n-### **Advanced Features**\n-```bash\n-gitvan event simulate --files \"src/**\"  # Test job execution\n-gitvan audit build                      # Generate audit reports\n-gitvan chat generate \"Create a job\"     # AI job generation\n-```\n+## ⚡ Turtle as Workflow Engine\n \n-## 🔄 360 Project Lifecycle\n+Define complex workflows declaratively in Turtle format:\n \n-GitVan provides complete automation from initialization to deployment:\n+```turtle\n+@prefix gv: <https://gitvan.dev/ontology#> .\n+@prefix op: <https://gitvan.dev/op#> .\n \n-### **1. Initialization**\n-```bash\n-gitvan init  # Sets up everything automatically\n-```\n+# Data Processing Workflow\n+ex:data-processing-workflow rdf:type gv:Workflow ;\n+    gv:title \"Data Processing Pipeline\" ;\n+    gv:steps ex:analyze-data, ex:generate-report .\n \n-### **2. Development** \n-```bash\n-# Edit files\n-echo \"console.log('Hello World')\" > src/index.js\n+# Step 1: Analyze Data\n+ex:analyze-data rdf:type gv:SparqlStep ;\n+    gv:text \"\"\"\n+        PREFIX gv: <https://gitvan.dev/ontology#>\n+        SELECT (COUNT(?item) AS ?total) WHERE {\n+            ?item rdf:type gv:TestItem .\n+        }\n+    \"\"\" ;\n+    gv:outputMapping '{\"total\": \"total\"}' .\n \n-# Save with AI commit message\n-gitvan save  # AI generates: \"feat: add Hello World console log\"\n+# Step 2: Generate Report\n+ex:generate-report rdf:type gv:TemplateStep ;\n+    gv:text \"Total Items: {{ total }}\\\\nGenerated: {{ 'now' | date('YYYY-MM-DD') }}\" ;\n+    gv:filePath \"./reports/data-analysis.txt\" ;\n+    gv:dependsOn ex:analyze-data .\n ```\n \n-### **3. Automation**\n-- Jobs run automatically on commits\n-- Templates generate project files\n-- Packs scaffold complete applications\n-- AI provides intelligent commit messages\n+## 🎯 Core Features\n \n-### **4. Deployment**\n-- Built-in deployment jobs\n-- CI/CD integration via Git hooks\n-- Automated testing and validation\n-- Production-ready configurations\n+### 🤖 AI-Powered Automation\n+- **Claude Integration**: Anthropic Claude for intelligent task execution\n+- **Context-Aware**: AI understands your project structure and history\n+- **Natural Language**: Describe tasks in plain English\n+- **Learning System**: Improves over time based on your patterns\n \n-**The Result**: Complete autonomic development workflow where everything happens automatically after `gitvan init`.\n+### 📝 Advanced Template System\n+- **Nunjucks Templates**: Powerful templating with filters and functions\n+- **Dynamic Content**: Generate documentation, code, and reports\n+- **Filter Support**: Date formatting, JSON serialization, string manipulation\n+- **Context Injection**: Rich data from Git history and project state\n \n-## 🧩 Composables API\n+### 🔧 Composable Architecture\n+- **Modular Design**: Mix and match composables for custom workflows\n+- **RDF Integration**: Full RDF/SPARQL support for knowledge management\n+- **Type Safety**: Comprehensive TypeScript definitions\n+- **Extensible**: Easy to add new composables and functionality\n \n-GitVan v2 provides a comprehensive set of composables for building automation workflows:\n+### 🐳 Container Support\n+- **Docker Ready**: Full containerization support\n+- **Cleanroom Testing**: Isolated environment testing\n+- **CI/CD Integration**: Seamless integration with build pipelines\n+- **Multi-Platform**: Works on Linux, macOS, and Windows\n \n-### Core Composables\n-- **`useGit`** - Git operations and repository management\n-- **`useWorktree`** - Git worktree management  \n-- **`useTemplate`** - Template rendering with Nunjucks\n-- **`useNotes`** - Git notes management for receipts\n+## 📚 Documentation\n \n-### Job & Hook Composables\n-- **`useJob`** - Job lifecycle and execution management\n-- **`useHook`** - Unified hooks system and triggering\n-- **`useSchedule`** - Cron and scheduling management\n+### Core Concepts\n+- **[Knowledge Hook Engine](./docs/KNOWLEDGE-HOOK-IMPLEMENTATION-REPORT.md)** - Complete implementation guide\n+- **[Turtle as Workflow](./docs/C4-ARCHITECTURE-TURTLE-WORKFLOW.md)** - Workflow engine architecture\n+- **[RDF Composable Architecture](./docs/RDF-COMPOSABLE-ARCHITECTURE.md)** - RDF integration patterns\n \n-### Infrastructure Composables\n-- **`useReceipt`** - Receipt and audit management\n-- **`useLock`** - Distributed locking\n-- **`useRegistry`** - Job and hook registry management\n-\n ### API Reference\n+- **[Composables API](./docs/api/composables.md)** - Core composables documentation\n+- **[CLI Commands](./docs/api/cli.md)** - Command-line interface reference\n+- **[Configuration](./docs/api/configuration.md)** - Configuration options\n \n-#### defineJob\n-```javascript\n-import { defineJob, useGit, useTemplate, useNotes } from 'file:///Users/sac/gitvan/src/index.mjs'\n+### Examples\n+- **[Knowledge Hooks](./hooks/README.md)** - Hook examples and patterns\n+- **[Workflows](./workflows/README.md)** - Workflow examples\n+- **[Templates](./templates/README.md)** - Template examples\n \n-export default defineJob({\n-  meta: { name: \"changelog\", desc: \"Generate changelog from commits\" },\n-  hooks: [\"post-commit\", \"post-merge\"], // Unified hooks system\n-  async run() {\n-    const git = useGit()\n-    const tpl = await useTemplate()\n-    const notes = useNotes()\n+## 🛠️ Development\n \n-    const commits = await git.logSinceLastTag()\n-    const body = tpl.render(\"changelog.njk\", { commits })\n-    await git.writeFile(\"CHANGELOG.md\", body)\n-    await notes.write(`changelog for ${await git.headSha()}`)\n-    return { ok: true, artifacts: [\"CHANGELOG.md\"] }\n-  }\n-})\n-```\n+### Prerequisites\n+- Node.js 18+ (LTS recommended)\n+- Git 2.30+\n+- pnpm (recommended) or npm\n \n-#### Hooks Schema\n-```javascript\n-hooks: [\n-  \"post-commit\",    // After commit\n-  \"post-merge\",     // After merge\n-  \"post-rewrite\",   // After rebase/amend (future)\n-  \"pre-push\"        // Before push (future)\n-]\n-```\n-\n-## 🎯 Job-Only Architecture\n-\n-GitVan v2 features a **job-only architecture** that eliminates complexity by having jobs handle Git operations directly:\n-\n-### **Single Layer Execution**\n-- **Jobs**: Define `hooks: [\"post-commit\", \"post-merge\"]` and handle Git operations directly\n-- **No Hooks Directory**: Eliminates `src/hooks/` complexity entirely\n-- **Registry**: Automatic job discovery and hook-to-job mapping\n-- **Loader**: Direct job execution - simple and predictable\n-\n-### **Benefits**\n-- **Eliminates Complexity**: No hooks directory to maintain\n-- **Jobs Handle Everything**: Git operations, routing, execution all in jobs\n-- **Simpler Execution**: Direct job execution without intermediate layers\n-- **Fewer Files**: Less code to maintain and understand\n-- **More Intuitive**: Developers work directly with jobs\n-\n-### **Git Hook Integration**\n+### Local Development\n ```bash\n-# Install Git hooks\n-gitvan ensure\n+# Clone the repository\n+git clone https://github.com/gitvan/gitvan.git\n+cd gitvan\n \n-# Manual hook execution (executes jobs directly)\n-gitvan hook post-commit\n-gitvan hook post-merge\n+# Install dependencies\n+pnpm install\n \n-# Event simulation\n-gitvan event simulate --files \"src/components/Button.tsx\"\n-```\n+# Run tests\n+pnpm test\n \n-## ✨ Features\n-\n-### 🎯 **Core Capabilities**\n-- **Git-Native**: Uses Git refs for locking, notes for audit trails\n-- **Job-Only Architecture**: Single layer execution with jobs handling everything\n-- **Template Engine**: Nunjucks-powered with front-matter support\n-- **Job System**: Automated task execution with hook-based scheduling\n-- **Pack System**: Reusable automation components\n-- **Composables API**: Comprehensive composables for automation workflows\n-- **AI Integration**: Generate jobs and templates with AI assistance\n-\n-### 📋 **Front-Matter Templates**\n-GitVan supports Hygen-style templates with rich front-matter:\n-\n-```yaml\n----\n-to: \"src/components/{{ name | pascalCase }}.tsx\"\n-force: \"overwrite\"\n-inject:\n-  - into: \"src/index.ts\"\n-    snippet: \"export { {{ name | pascalCase }} } from './components/{{ name | pascalCase }}';\"\n-    find: \"// EXPORTS\"\n-    where: \"after\"\n-sh:\n-  before: [\"npm run lint\"]\n-  after: [\"npm run test\"]\n-when: \"{{ createComponent }}\"\n----\n-import React from 'react';\n-\n-interface {{ name | pascalCase }}Props {\n-  // Props here\n-}\n-\n-export const {{ name | pascalCase }}: React.FC<{{ name | pascalCase }}Props> = () => {\n-  return <div>{{ name | titleCase }}</div>;\n-};\n+# Build the project\n+pnpm run build\n ```\n \n-### 🤖 **AI-Powered Workflows**\n-Generate jobs and templates using natural language:\n-\n+### Testing\n ```bash\n-gitvan chat generate \"Create a changelog job that runs on every release\"\n-gitvan llm call \"Summarize recent commits and create a release note\"\n-```\n+# Run all tests\n+pnpm test\n \n-### 📦 **Pack System**\n-Create and share reusable automation components:\n+# Run specific test suites\n+pnpm test tests/hooks/\n+pnpm test tests/workflows/\n \n-```bash\n-gitvan pack apply my-pack --inputs '{\"name\":\"MyComponent\"}'\n-gitvan scaffold react-pack:component --inputs '{\"name\":\"Button\"}'\n+# Run with coverage\n+pnpm test --coverage\n ```\n \n-## 🛠️ Commands\n+## 🤝 Contributing\n \n-### Core Commands\n-- `gitvan init` - Initialize GitVan in current directory\n-- `gitvan ensure` - Install Git hooks for unified hooks system\n-- `gitvan help` - Show all available commands\n+We welcome contributions! Please see our [Contributing Guide](./CONTRIBUTING.md) for details.\n \n-### Unified Hooks System\n-- `gitvan hook <name>` - Execute specific Git hook (post-commit, post-merge)\n-- `gitvan event simulate --files \"<path>\"` - Test router logic without real commit\n-- `gitvan ensure` - Install Git hooks for surgical precision\n+### Development Workflow\n+1. Fork the repository\n+2. Create a feature branch\n+3. Make your changes\n+4. Add tests for new functionality\n+5. Run the test suite\n+6. Submit a pull request\n \n-### Job Management\n-- `gitvan job list` - List available jobs\n-- `gitvan job run --name <job>` - Run a specific job\n-- `gitvan run <job>` - Run job (legacy syntax)\n+### Code Standards\n+- **ESLint**: Follow the configured linting rules\n+- **Prettier**: Code formatting is enforced\n+- **TypeScript**: Use TypeScript for new features\n+- **Tests**: All new features must include tests\n \n-### Template & Pack System\n-- `gitvan pack list` - List installed packs\n-- `gitvan pack apply <pack>` - Apply a pack\n-- `gitvan pack plan <pack>` - Show pack execution plan\n-- `gitvan scaffold <pack:scaffold>` - Run a scaffold\n+## 📄 License\n \n-### AI Features\n-- `gitvan chat generate <prompt>` - Generate job via AI\n-- `gitvan chat draft <prompt>` - Draft template via AI\n-- `gitvan llm call <prompt>` - Direct AI interaction\n+GitVan is licensed under the MIT License. See [LICENSE](./LICENSE) for details.\n \n-### Daemon & Hooks\n-- `gitvan daemon start` - Start GitVan daemon\n-- `gitvan daemon status` - Check daemon status\n-- `gitvan hook post-commit` - Execute post-commit hook manually\n-- `gitvan hook post-merge` - Execute post-merge hook manually\n+## 🙏 Acknowledgments\n \n-### Audit & Compliance\n-- `gitvan audit build` - Build audit report\n-- `gitvan audit verify` - Verify operation integrity\n-- `gitvan audit list` - List all receipts\n+- **Anthropic**: For Claude AI integration\n+- **RDF.js Community**: For excellent RDF tooling\n+- **Nunjucks**: For powerful templating\n+- **Contributors**: All the amazing developers who make GitVan possible\n \n-## 📁 Project Structure\n+## 🔗 Links\n \n-After running `gitvan init`:\n+- **Website**: [gitvan.dev](https://gitvan.dev)\n+- **Documentation**: [docs.gitvan.dev](https://docs.gitvan.dev)\n+- **NPM Package**: [npmjs.com/package/gitvan](https://www.npmjs.com/package/gitvan)\n+- **GitHub**: [github.com/gitvan/gitvan](https://github.com/gitvan/gitvan)\n+- **Issues**: [github.com/gitvan/gitvan/issues](https://github.com/gitvan/gitvan/issues)\n \n-```\n-my-project/\n-├── .gitvan/           # GitVan state and configuration\n-│   ├── packs/         # Installed packs\n-│   ├── state/         # Runtime state\n-│   └── backups/       # Automatic backups\n-├── src/hooks/         # Unified hooks system\n-│   ├── 10-router.post-commit.mjs\n-│   ├── 10-router.post-merge.mjs\n-│   └── _shared/       # Shared utilities\n-├── jobs/              # Job definitions (with hooks)\n-├── templates/         # Nunjucks templates\n-├── packs/             # Local pack definitions\n-└── gitvan.config.js   # Configuration file\n-```\n-\n-## ⚙️ Configuration\n-\n-GitVan uses `gitvan.config.js` for configuration:\n-\n-```javascript\n-export default {\n-  templates: {\n-    dirs: [\"templates\"],\n-    autoescape: false,\n-    noCache: true,\n-  },\n-  \n-  jobs: {\n-    dirs: [\"jobs\"],\n-  },\n-  \n-  packs: {\n-    dirs: [\"packs\", \".gitvan/packs\"],\n-  },\n-  \n-  daemon: {\n-    enabled: true,\n-    worktrees: \"current\",\n-  },\n-  \n-  shell: {\n-    allow: [\"echo\", \"git\", \"npm\", \"pnpm\", \"yarn\"],\n-  },\n-  \n-  ai: {\n-    provider: \"ollama\",\n-    model: \"qwen3-coder:30b\", // Default from GitVanDefaults\n-  },\n-  \n-  data: {\n-    project: {\n-      name: \"my-project\",\n-      description: \"A GitVan-powered project\",\n-    },\n-  },\n-};\n-```\n-\n-## 🎯 Strategy Presets\n-\n-GitVan supports multiple development strategies with preset configurations:\n-\n-### Trunk-Based (Default)\n-- Direct commits to main branch\n-- Feature branches merged via PR\n-- Continuous deployment on main\n-\n\\ No newline at end of file\n-### Release Flow\n-- Release branches for versioning\n-- Feature branches → Release → Main\n-- Tagged releases with changelogs\n-\n-### Forking Workflow\n-- External contributor support\n-- Fork-based pull requests\n-- Security scanning for external PRs\n-\n-## 📊 Event Model\n-\n-GitVan supports a comprehensive event system with standardized patterns:\n-\n-| Event        | Key payload              | Pattern example        |\n-| ------------ | ------------------------ | ---------------------- |\n-| `push`       | `ref`, `before`, `after` | `push:refs/heads/main` |\n-| `tag:create` | `ref`, `tag`             | `tag:create:v*`        |\n-| `merge`      | `from`, `into`           | `merge:into:main`      |\n-| `fs:change`  | `paths`                  | `fs:change:src/**`     |\n-| `cron`       | `cron`                   | `cron:0 */2 * * *`     |\n-\n-Predicates compose under `all` and `any`. Keep it to those two.\n-\n-## 🔄 Evolution Story\n-\n-GitVan's power lies in how the tree stays fixed while behavior changes. Here's how workflows evolve:\n-\n-### Phase 1 → Phase 2 (add release flow)\n-\n-```diff\n- // gitvan.config.js\n- export default {\n--  strategy: \"tbd\",\n-+  strategy: \"release-flow\",\n-   events: {\n-     \"push:refs/heads/main\": [\"notes:write\",\"changelog\"],\n-     \"push:refs/heads/feature/*\": [\"lint.changed\",\"test.changed\"],\n-+    \"branch:create:refs/heads/release/*\": [\"version.freeze\",\"changelog.seed\"],\n-+    \"push:refs/heads/release/*\": [\"release.plan\"],\n-     \"tag:create:v*\": [\"release.publish\"]\n-   }\n- }\n-```\n-\n-### Phase 2 → Phase 3 (enable OSS PRs)\n-\n-```diff\n-   events: {\n-     ...\n-+    \"pr:opened:external\": [\"security.scan\",\"ai.review.summary\"]\n-   }\n- }\n-```\n-\n-## 🔒 Security & Safety\n-\n-- **Path Sandboxing**: Prevents directory traversal attacks\n-- **Atomic Locking**: Git ref-based concurrency control\n-- **Shell Allowlists**: Configurable command execution\n-- **Audit Trails**: Complete operation logging in Git notes\n-- **Idempotent Operations**: Safe to run multiple times\n-\n-## 📝 Receipts\n-\n-GitVan maintains complete audit trails through Git notes:\n-\n-- **Location**: `refs/notes/gitvan/results`\n-- **Key**: `${commitSHA}:${jobName}:${timestamp}`\n-- **Body**: JSON `{ ok, startedAt, finishedAt, inputs, outputs, artifacts, seed }`\n-\n-## 🎨 Front-Matter Support\n-\n-GitVan uses YAML front-matter for all templates and configuration:\n-\n-### YAML Front-Matter\n-```yaml\n ---\n-to: \"output.txt\"\n-force: \"overwrite\"\n----\n-Content here\n-```\n \n-## 📚 Examples\n+**GitVan v2.1.0** - Where Git meets AI. Where automation becomes intelligent. Where workflows become effortless.\n \n-### Canonical Job Skeleton\n-```javascript\n-// jobs/changelog.mjs\n-import { defineJob, useGit, useTemplate, useNotes } from 'file:///Users/sac/gitvan/src/index.mjs'\n-\n-export default defineJob({\n-  meta: { name: \"changelog\", desc: \"Generate changelog from commits\" },\n-  hooks: [\"post-commit\", \"post-merge\"], // Unified hooks system\n-  async run() {\n-    const git = useGit()\n-    const tpl = await useTemplate()\n-    const notes = useNotes()\n-\n-    const commits = await git.logSinceLastTag()\n-    const body = tpl.render(\"changelog.njk\", { commits })\n-    await git.writeFile(\"CHANGELOG.md\", body)\n-    await notes.write(`changelog for ${await git.headSha()}`)\n-    return { ok: true, artifacts: [\"CHANGELOG.md\"] }\n-  }\n-})\n-```\n-\n-### Template with Front-Matter\n-```yaml\n----\n-to: \"src/{{ name | kebabCase }}.ts\"\n-force: \"overwrite\"\n-inject:\n-  - into: \"src/index.ts\"\n-    snippet: \"export * from './{{ name | kebabCase }}';\"\n-    find: \"// EXPORTS\"\n----\n-export interface {{ name | pascalCase }} {\n-  id: string;\n-  name: string;\n-}\n-```\n-\n-### Pack Definition\n-```json\n-{\n-  \"name\": \"react-component\",\n-  \"version\": \"1.0.0\",\n-  \"description\": \"Generate React components\",\n-  \"scaffolds\": {\n-    \"component\": {\n-      \"description\": \"Create a React component\",\n-      \"templates\": [\"templates/component.njk\"],\n-      \"inputs\": {\n-        \"name\": {\n-          \"type\": \"string\",\n-          \"description\": \"Component name\",\n-          \"required\": true\n-        }\n-      }\n-    }\n-  }\n-}\n-```\n-\n-### Worktree Management\n-```javascript\n-// Using the useWorktree composable\n-import { useWorktree } from 'gitvan/composables/worktree';\n-\n-const worktree = useWorktree();\n-\n-// Get worktree information\n-const info = await worktree.info();\n-console.log(`Current branch: ${info.branch}`);\n-console.log(`Worktree path: ${info.worktree}`);\n-\n-// List all worktrees\n-const worktrees = await worktree.list();\n-worktrees.forEach(wt => {\n-  console.log(`${wt.path} (${wt.branch}) ${wt.isMain ? '(main)' : ''}`);\n-});\n-\n-// Create a new worktree\n-await worktree.create('/path/to/new-worktree', 'feature-branch');\n-\n-// Get worktree status\n-const status = await worktree.status();\n-console.log(`Total worktrees: ${status.count}`);\n-console.log(`Is main worktree: ${status.isMain}`);\n-```\n-\n-## 🚀 Performance\n-\n-GitVan is optimized for autonomic operation with:\n-- **Fast Init**: < 1 second initialization with background setup\n-- **Non-Blocking**: All operations run asynchronously\n-- **Lazy Loading**: Packs and jobs loaded only when needed\n-- **Timeout Protection**: No hanging operations\n-- **Resource Efficient**: Minimal memory and CPU usage\n-\n-## 🎯 Vision: The Autonomic Future\n-\n-GitVan represents the future of development automation - where everything happens automatically after initialization. No more manual setup, no more configuration complexity, no more external dependencies for basic operations.\n-\n-**The Dream**: A user can `gitvan init` and have a complete, intelligent development environment that handles everything from commit messages to deployment - all powered by local AI and autonomic systems.\n-\n-## 🤝 Contributing\n-\n-1. Fork the repository\n-2. Create a feature branch: `git checkout -b feature-name`\n-3. Make your changes\n-4. Run tests: `pnpm test`\n-5. Commit: `gitvan save` (uses AI commit messages!)\n-6. Push: `git push origin feature-name`\n-7. Submit a pull request\n-\n-## 📄 License\n-\n-MIT License - see [LICENSE](LICENSE) file for details.\n-\n-## 🆘 Support\n-\n-- 📖 [Documentation](docs/)\n-- 🐛 [Issues](https://github.com/gitvan/gitvan/issues)\n-- 💬 [Discussions](https://github.com/gitvan/gitvan/discussions)\n-\n----\n-\n-**GitVan v2** - Transform Git into your development automation platform 🚀\n+*Transform your development workflow with the power of Git-native automation.*\n\\ No newline at end of file\n"
                },
                {
                    "date": 1758228697062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,9 +176,9 @@\n \n ## 🎯 Core Features\n \n ### 🤖 AI-Powered Automation\n-- **Claude Integration**: Anthropic Claude for intelligent task execution\n+- **Ollama Integration**: Local Ollama models for intelligent task execution\n - **Context-Aware**: AI understands your project structure and history\n - **Natural Language**: Describe tasks in plain English\n - **Learning System**: Improves over time based on your patterns\n \n@@ -276,9 +276,9 @@\n GitVan is licensed under the MIT License. See [LICENSE](./LICENSE) for details.\n \n ## 🙏 Acknowledgments\n \n-- **Anthropic**: For Claude AI integration\n+- **Ollama**: For local AI model integration\n - **RDF.js Community**: For excellent RDF tooling\n - **Nunjucks**: For powerful templating\n - **Contributors**: All the amazing developers who make GitVan possible\n \n"
                },
                {
                    "date": 1758242510976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,13 +20,26 @@\n - **Template Processing**: Advanced Nunjucks templates with filters\n - **SPARQL Integration**: Query your knowledge graph within workflows\n - **Context Management**: Rich context passing between workflow steps\n \n-### 🐳 Docker Cleanroom Support\n-- **Containerized Initialization**: Full GitVan setup in Docker environments\n-- **Reproducible Builds**: Consistent initialization across all environments\n-- **Production Ready**: Optimized Alpine Linux containers\n+### 🎯 Next.js Packs Ecosystem\n+- **Hyper-Advanced Dashboard Pack**: Next.js 15.5.2 + React 19 + shadcn/ui + deck.gl\n+- **Static CMS Pack**: React components in markdown, GitHub Pages deployment\n+- **Docker Compose Integration**: Live development with hot reloading\n+- **Production Ready**: Cleanroom tested, enterprise-grade architecture\n \n+### 🔧 Git Native I/O System\n+- **Advanced Git Operations**: Locking, queuing, and atomic operations\n+- **Snapshot Management**: Efficient state tracking and rollback capabilities\n+- **Worker Threads**: Non-blocking Git operations for performance\n+- **Receipt System**: Comprehensive operation logging and validation\n+\n+### 🤖 JTBD Hooks (Job-to-be-Done)\n+- **Business Intelligence**: Market intelligence, predictive analytics, dashboards\n+- **Development Lifecycle**: Code quality gatekeepers, test coverage enforcers\n+- **Infrastructure DevOps**: Deployment monitoring, configuration drift detection\n+- **Developer Workflow**: Daily scrum automation, sprint planning, end-of-day reporting\n+\n ## 📦 NPM Package\n \n GitVan v2.1.0 is now available on npm! Install it globally or locally:\n \n@@ -79,8 +92,53 @@\n # Run a workflow\n gitvan workflow run data-processing\n ```\n \n+## 🎯 Next.js Packs\n+\n+### 📊 Hyper-Advanced Dashboard Pack\n+Create enterprise-grade dashboards with the latest technologies:\n+\n+```bash\n+# Create a new dashboard project\n+gitvan pack install nextjs-dashboard-pack\n+\n+# Generate dashboard with Docker Compose\n+gitvan run create-dashboard-project --name \"my-dashboard\"\n+\n+# Start development with live updates\n+cd my-dashboard && docker-compose up --build\n+```\n+\n+**Features:**\n+- **Next.js 15.5.2** + **React 19** + **TypeScript 5.7.0**\n+- **shadcn/ui** components with Radix UI primitives\n+- **deck.gl** for advanced data visualization\n+- **Docker Compose** with live updates and hot reloading\n+- **AI-powered insights** and real-time data streaming\n+- **Enterprise security** and performance optimizations\n+\n+### 📝 Static CMS Pack\n+Build content management systems with React components in markdown:\n+\n+```bash\n+# Create a new CMS project\n+gitvan pack install nextjs-cms-pack\n+\n+# Generate CMS with GitHub Pages deployment\n+gitvan run create-cms-project --name \"my-cms\"\n+\n+# Deploy to GitHub Pages\n+gitvan run deploy-cms\n+```\n+\n+**Features:**\n+- **MDX Integration**: React components embedded in markdown\n+- **GitHub Pages**: Automatic deployment with GitHub Actions\n+- **Static Generation**: Fast, SEO-friendly static sites\n+- **Template System**: Nunjucks templates for content generation\n+- **Live Development**: Docker Compose with hot reloading\n+\n ## 🧠 Knowledge Hook Engine\n \n GitVan's Knowledge Hook Engine represents a paradigm shift from simple event-driven triggers to intelligent, knowledge-driven automation.\n \n@@ -173,8 +231,55 @@\n     gv:filePath \"./reports/data-analysis.txt\" ;\n     gv:dependsOn ex:analyze-data .\n ```\n \n+## 🤖 JTBD Hooks (Job-to-be-Done)\n+\n+### Business Intelligence Hooks\n+- **Market Intelligence Analyzer**: Track competitor analysis and market trends\n+- **Predictive Analytics Engine**: Forecast business metrics and outcomes\n+- **Business Intelligence Dashboard**: Real-time KPI monitoring and reporting\n+\n+### Development Lifecycle Hooks\n+- **Code Quality Gatekeeper**: Enforce coding standards and best practices\n+- **Dependency Vulnerability Scanner**: Monitor and alert on security vulnerabilities\n+- **Test Coverage Enforcer**: Ensure minimum test coverage thresholds\n+- **Performance Regression Detector**: Identify performance degradation\n+- **Documentation Sync Enforcer**: Keep documentation in sync with code\n+\n+### Infrastructure DevOps Hooks\n+- **Deployment Health Monitor**: Track deployment success and rollback triggers\n+- **Configuration Drift Detector**: Identify infrastructure configuration changes\n+- **Infrastructure Drift Detector**: Monitor resource changes and compliance\n+- **Backup Recovery Validator**: Ensure backup integrity and recovery procedures\n+- **Resource Usage Optimizer**: Optimize resource allocation and costs\n+\n+### Developer Workflow Hooks\n+- **Daily Scrum Automation**: Automated standup reports and sprint tracking\n+- **Sprint Planning**: Intelligent sprint planning based on historical data\n+- **End-of-Day Reporting**: Automated daily progress and blocker reporting\n+- **File Saving Triggers**: Context-aware actions on file changes\n+- **Definition of Done**: Automated quality gates and completion criteria\n+\n+## 🔧 Git Native I/O System\n+\n+Advanced Git operations with enterprise-grade features:\n+\n+### Core Components\n+- **GitNativeIO**: High-level Git operations with error handling\n+- **LockManager**: Distributed locking for concurrent operations\n+- **QueueManager**: Operation queuing and priority management\n+- **SnapshotStore**: Efficient state tracking and rollback\n+- **ReceiptWriter**: Comprehensive operation logging\n+- **Worker Threads**: Non-blocking Git operations\n+\n+### Features\n+- **Atomic Operations**: All-or-nothing Git operations\n+- **Concurrent Safety**: Lock-based concurrency control\n+- **Performance Optimization**: Worker threads and efficient I/O\n+- **State Management**: Snapshot-based state tracking\n+- **Audit Trail**: Complete operation history and receipts\n+\n ## 🎯 Core Features\n \n ### 🤖 AI-Powered Automation\n - **Ollama Integration**: Local Ollama models for intelligent task execution\n@@ -205,9 +310,15 @@\n ### Core Concepts\n - **[Knowledge Hook Engine](./docs/KNOWLEDGE-HOOK-IMPLEMENTATION-REPORT.md)** - Complete implementation guide\n - **[Turtle as Workflow](./docs/C4-ARCHITECTURE-TURTLE-WORKFLOW.md)** - Workflow engine architecture\n - **[RDF Composable Architecture](./docs/RDF-COMPOSABLE-ARCHITECTURE.md)** - RDF integration patterns\n+- **[Git Native I/O](./docs/GIT-NATIVE-IO-ARCHITECTURE.md)** - Advanced Git operations\n \n+### Pack Documentation\n+- **[Next.js Dashboard Pack](./packs/nextjs-dashboard-pack/README.md)** - Hyper-advanced dashboard creation\n+- **[Next.js CMS Pack](./packs/nextjs-cms-pack/README.md)** - Static CMS with React components\n+- **[Docker Compose Integration](./packs/nextjs-dashboard-pack/DASHBOARD-PACK-COMPOSE-LIVE-UPDATES-TEST-REPORT.md)** - Live development setup\n+\n ### API Reference\n - **[Composables API](./docs/api/composables.md)** - Core composables documentation\n - **[CLI Commands](./docs/api/cli.md)** - Command-line interface reference\n - **[Configuration](./docs/api/configuration.md)** - Configuration options\n@@ -215,15 +326,17 @@\n ### Examples\n - **[Knowledge Hooks](./hooks/README.md)** - Hook examples and patterns\n - **[Workflows](./workflows/README.md)** - Workflow examples\n - **[Templates](./templates/README.md)** - Template examples\n+- **[JTBD Hooks](./hooks/jtbd-hooks/README.md)** - Job-to-be-Done examples\n \n ## 🛠️ Development\n \n ### Prerequisites\n - Node.js 18+ (LTS recommended)\n - Git 2.30+\n - pnpm (recommended) or npm\n+- Docker (for containerized development)\n \n ### Local Development\n ```bash\n # Clone the repository\n@@ -247,13 +360,28 @@\n \n # Run specific test suites\n pnpm test tests/hooks/\n pnpm test tests/workflows/\n+pnpm test tests/packs/\n \n # Run with coverage\n pnpm test --coverage\n ```\n \n+### Pack Development\n+```bash\n+# Test dashboard pack\n+cd packs/nextjs-dashboard-pack\n+./test-live-updates.sh\n+\n+# Test CMS pack\n+cd packs/nextjs-cms-pack\n+./test-cleanroom-local.sh\n+\n+# Run cleanroom tests\n+./test-dashboard-pack-cleanroom.sh\n+```\n+\n ## 🤝 Contributing\n \n We welcome contributions! Please see our [Contributing Guide](./CONTRIBUTING.md) for details.\n \n@@ -269,8 +397,9 @@\n - **ESLint**: Follow the configured linting rules\n - **Prettier**: Code formatting is enforced\n - **TypeScript**: Use TypeScript for new features\n - **Tests**: All new features must include tests\n+- **Docker**: Test in cleanroom environments\n \n ## 📄 License\n \n GitVan is licensed under the MIT License. See [LICENSE](./LICENSE) for details.\n@@ -279,8 +408,11 @@\n \n - **Ollama**: For local AI model integration\n - **RDF.js Community**: For excellent RDF tooling\n - **Nunjucks**: For powerful templating\n+- **Next.js Team**: For the amazing React framework\n+- **shadcn/ui**: For beautiful UI components\n+- **deck.gl**: For advanced data visualization\n - **Contributors**: All the amazing developers who make GitVan possible\n \n ## 🔗 Links\n \n"
                },
                {
                    "date": 1758326564408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,13 +14,16 @@\n - **Threshold Monitoring**: SELECTThreshold predicates for metric-based triggers\n - **SHACL Validation**: Shape-based validation triggers\n \n ### ⚡ Turtle as Workflow Engine\n-- **Declarative Workflows**: Define complex workflows in Turtle (.ttl) format\n+- **Pure JavaScript Workflows**: Define workflows using simple JavaScript objects\n - **DAG Execution**: Topological sorting ensures proper step dependencies\n - **Template Processing**: Advanced Nunjucks templates with filters\n - **SPARQL Integration**: Query your knowledge graph within workflows\n - **Context Management**: Rich context passing between workflow steps\n+- **Step Handlers**: Modular, extensible step execution system\n+- **Error Handling**: Robust error handling with detailed diagnostics\n+- **Testing Support**: Built-in testing utilities and validation\n \n ### 🎯 Next.js Packs Ecosystem\n - **Hyper-Advanced Dashboard Pack**: Next.js 15.5.2 + React 19 + shadcn/ui + deck.gl\n - **Static CMS Pack**: React components in markdown, GitHub Pages deployment\n@@ -90,8 +93,17 @@\n gitvan workflow list\n \n # Run a workflow\n gitvan workflow run data-processing\n+\n+# Validate a workflow before execution\n+gitvan workflow validate my-workflow\n+\n+# Get workflow execution history\n+gitvan workflow history\n+\n+# View workflow execution details\n+gitvan workflow logs workflow-id\n ```\n \n ## 🎯 Next.js Packs\n \n@@ -203,36 +215,412 @@\n ```\n \n ## ⚡ Turtle as Workflow Engine\n \n-Define complex workflows declaratively in Turtle format:\n+GitVan's workflow engine executes complex multi-step processes with full dependency management, context passing, and error handling. Workflows are defined using pure JavaScript objects for maximum simplicity and maintainability.\n \n-```turtle\n-@prefix gv: <https://gitvan.dev/ontology#> .\n-@prefix op: <https://gitvan.dev/op#> .\n+### 🚀 Quick Start\n \n-# Data Processing Workflow\n-ex:data-processing-workflow rdf:type gv:Workflow ;\n-    gv:title \"Data Processing Pipeline\" ;\n-    gv:steps ex:analyze-data, ex:generate-report .\n+```javascript\n+import { WorkflowExecutor } from '@gitvan/workflow';\n \n-# Step 1: Analyze Data\n-ex:analyze-data rdf:type gv:SparqlStep ;\n-    gv:text \"\"\"\n-        PREFIX gv: <https://gitvan.dev/ontology#>\n-        SELECT (COUNT(?item) AS ?total) WHERE {\n-            ?item rdf:type gv:TestItem .\n-        }\n-    \"\"\" ;\n-    gv:outputMapping '{\"total\": \"total\"}' .\n+// Define your workflow as JavaScript objects\n+const workflowData = {\n+  hooks: [{\n+    id: \"http://example.org/my-workflow\",\n+    title: \"My Data Processing Workflow\",\n+    pipelines: [\"http://example.org/main-pipeline\"]\n+  }],\n+  pipelines: [{\n+    id: \"http://example.org/main-pipeline\",\n+    steps: [\n+      \"http://example.org/sparql-step\",\n+      \"http://example.org/template-step\",\n+      \"http://example.org/file-step\"\n+    ]\n+  }],\n+  steps: [\n+    {\n+      id: \"http://example.org/sparql-step\",\n+      type: \"sparql\",\n+      config: {\n+        query: `SELECT ?project ?version WHERE { ?project rdf:type gv:Project ; gv:version ?version }`,\n+        outputMapping: '{\"projects\": \"results\"}'\n+      }\n+    },\n+    {\n+      id: \"http://example.org/template-step\",\n+      type: \"template\",\n+      config: {\n+        template: `# Project Report\\n\\n{% for project in projects %}- {{ project.project.value }}: {{ project.version.value }}\\n{% endfor %}`,\n+        outputPath: \"reports/project-summary.md\"\n+      },\n+      dependsOn: [\"http://example.org/sparql-step\"]\n+    },\n+    {\n+      id: \"http://example.org/file-step\",\n+      type: \"file\",\n+      config: {\n+        filePath: \"reports/project-data.json\",\n+        operation: \"write\",\n+        content: `{\"projects\": {{ projects | dump }}, \"generated\": \"{{ 'now' | date('YYYY-MM-DD') }}\"}`\n+      },\n+      dependsOn: [\"http://example.org/template-step\"]\n+    }\n+  ]\n+};\n \n-# Step 2: Generate Report\n-ex:generate-report rdf:type gv:TemplateStep ;\n-    gv:text \"Total Items: {{ total }}\\\\nGenerated: {{ 'now' | date('YYYY-MM-DD') }}\" ;\n-    gv:filePath \"./reports/data-analysis.txt\" ;\n-    gv:dependsOn ex:analyze-data .\n+// Execute the workflow\n+const executor = new WorkflowExecutor({\n+  graphDir: './workflows',\n+  logger: console\n+});\n+\n+const result = await executor.execute('http://example.org/my-workflow', {});\n+console.log(`Workflow completed: ${result.success}`);\n+console.log(`Steps executed: ${result.steps.length}`);\n ```\n \n+### 📋 Step Types\n+\n+#### 🔍 SPARQL Step\n+Execute SPARQL queries against your knowledge graph:\n+\n+```javascript\n+{\n+  id: \"http://example.org/sparql-step\",\n+  type: \"sparql\",\n+  config: {\n+    query: `SELECT ?item ?status WHERE { ?item rdf:type gv:Task ; gv:status ?status }`,\n+    outputMapping: '{\"tasks\": \"results\"}'  // Maps query results to context variables\n+  }\n+}\n+```\n+\n+**Returns to context:**\n+- `type`: Query type (\"select\", \"ask\", \"construct\")\n+- `results`: Query results array\n+- `count`: Number of results\n+- `hasResults`: Boolean indicating if results exist\n+- `variables`: Query variables\n+- `queryMetadata`: Additional query information\n+\n+#### 📝 Template Step\n+Generate content using Nunjucks templates:\n+\n+```javascript\n+{\n+  id: \"http://example.org/template-step\",\n+  type: \"template\",\n+  config: {\n+    template: `# {{ title }}\\n\\n## Summary\\n{{ summary }}\\n\\n## Items\\n{% for item in items %}- {{ item.name }}: {{ item.value }}\\n{% endfor %}`,\n+    outputPath: \"reports/generated-report.md\"\n+  },\n+  dependsOn: [\"http://example.org/sparql-step\"]\n+}\n+```\n+\n+**Returns to context:**\n+- `outputPath`: Path where content was written\n+- `content`: Generated content\n+- `contentLength`: Length of generated content\n+- `templateUsed`: Type of template used (\"inline\" or file path)\n+\n+#### 📁 File Step\n+Perform file system operations:\n+\n+```javascript\n+{\n+  id: \"http://example.org/file-step\",\n+  type: \"file\",\n+  config: {\n+    filePath: \"data/output.json\",\n+    operation: \"write\",  // read, write, copy, move, delete\n+    content: `{\"data\": {{ data | dump }}, \"timestamp\": \"{{ 'now' | date('YYYY-MM-DD') }}\"}`\n+  },\n+  dependsOn: [\"http://example.org/template-step\"]\n+}\n+```\n+\n+**Returns to context:**\n+- `operation`: Operation performed\n+- `filePath`: Path of the file\n+- `contentLength`: Length of content (for write operations)\n+- `rendered`: Whether content was template-rendered\n+\n+#### 🌐 HTTP Step\n+Make HTTP requests to external APIs:\n+\n+```javascript\n+{\n+  id: \"http://example.org/http-step\",\n+  type: \"http\",\n+  config: {\n+    url: \"https://api.example.com/data\",\n+    method: \"GET\",  // GET, POST, PUT, DELETE, etc.\n+    headers: {\n+      \"Authorization\": \"Bearer {{ token }}\",\n+      \"Content-Type\": \"application/json\"\n+    },\n+    body: `{\"query\": \"{{ searchQuery }}\", \"limit\": 10}`  // Optional for POST/PUT\n+  }\n+}\n+```\n+\n+**Returns to context:**\n+- `url`: Request URL\n+- `method`: HTTP method used\n+- `status`: HTTP status code\n+- `statusText`: HTTP status text\n+- `headers`: Response headers\n+- `responseData`: Parsed response body\n+- `success`: Boolean indicating success\n+\n+#### 💻 CLI Step\n+Execute command-line commands:\n+\n+```javascript\n+{\n+  id: \"http://example.org/cli-step\",\n+  type: \"cli\",\n+  config: {\n+    command: \"echo 'Processing complete: {{ timestamp }}'\",\n+    cwd: \"/path/to/working/directory\",  // Optional\n+    timeout: 30000,  // Optional timeout in ms\n+    env: {  // Optional environment variables\n+      \"NODE_ENV\": \"production\",\n+      \"API_KEY\": \"{{ apiKey }}\"\n+    }\n+  }\n+}\n+```\n+\n+**Returns to context:**\n+- `command`: Command executed\n+- `cwd`: Working directory\n+- `stdout`: Standard output\n+- `stderr`: Standard error\n+- `exitCode`: Exit code (0 = success)\n+- `success`: Boolean indicating success\n+\n+### 🔄 Workflow Execution Flow\n+\n+1. **Parse Workflow**: Load workflow definition and validate structure\n+2. **Create Execution Plan**: Build dependency graph and determine execution order\n+3. **Initialize Context**: Set up execution context and input parameters\n+4. **Execute Steps**: Run steps in dependency order with context passing\n+5. **Handle Errors**: Graceful error handling with rollback capabilities\n+6. **Return Results**: Complete execution results with step outputs\n+\n+### 📊 Context Management\n+\n+Each step receives the full execution context and can access:\n+- **Input Parameters**: Initial workflow inputs\n+- **Previous Step Outputs**: Results from dependency steps\n+- **Global Variables**: Workflow-wide variables\n+- **Template Variables**: Available for template rendering\n+\n+```javascript\n+// Step outputs are automatically available to dependent steps\n+const context = {\n+  // From SPARQL step\n+  tasks: [\n+    { item: { value: \"task1\" }, status: { value: \"completed\" } },\n+    { item: { value: \"task2\" }, status: { value: \"pending\" } }\n+  ],\n+  \n+  // From Template step\n+  reportPath: \"reports/task-summary.md\",\n+  \n+  // From File step\n+  dataFile: \"data/tasks.json\",\n+  \n+  // Global variables\n+  timestamp: \"2024-01-01T00:00:00Z\",\n+  environment: \"production\"\n+};\n+```\n+\n+### 🛠️ Advanced Features\n+\n+#### Dependency Management\n+Steps automatically execute in the correct order based on dependencies:\n+\n+```javascript\n+// Step C depends on both A and B\n+{\n+  id: \"step-c\",\n+  dependsOn: [\"step-a\", \"step-b\"]  // Will wait for both to complete\n+}\n+```\n+\n+#### Error Handling\n+Robust error handling with detailed error information:\n+\n+```javascript\n+const result = await executor.execute('workflow-id', {});\n+if (!result.success) {\n+  console.error('Workflow failed:', result.error);\n+  console.error('Failed step:', result.failedStep);\n+}\n+```\n+\n+#### Template Filters\n+Rich template system with built-in filters:\n+\n+```javascript\n+template: `\n+# Report Generated: {{ timestamp | date('YYYY-MM-DD HH:mm') }}\n+# Items Count: {{ items.length }}\n+# Status: {{ status | capitalize }}\n+# Data: {{ data | dump(2) }}\n+`\n+```\n+\n+### 🧪 Testing Workflows\n+\n+```javascript\n+import { describe, it, expect } from 'vitest';\n+import { WorkflowExecutor } from '@gitvan/workflow';\n+\n+describe('My Workflow', () => {\n+  it('should execute all steps successfully', async () => {\n+    const executor = new WorkflowExecutor({\n+      graphDir: './test-workflows',\n+      logger: console\n+    });\n+\n+    const result = await executor.execute('http://example.org/test-workflow', {\n+      testData: 'sample'\n+    });\n+\n+    expect(result.success).toBe(true);\n+    expect(result.steps).toHaveLength(3);\n+    \n+    // Verify step outputs\n+    expect(result.steps[0].outputs.type).toBe('select');\n+    expect(result.steps[1].outputs.outputPath).toBe('reports/test-report.md');\n+    expect(result.steps[2].outputs.operation).toBe('write');\n+  });\n+});\n+```\n+\n+### 📚 Real-World Examples\n+\n+#### Data Processing Pipeline\n+```javascript\n+const dataPipeline = {\n+  hooks: [{ id: \"data-pipeline\", title: \"Data Processing\", pipelines: [\"main\"] }],\n+  pipelines: [{ id: \"main\", steps: [\"fetch\", \"process\", \"report\", \"notify\"] }],\n+  steps: [\n+    {\n+      id: \"fetch\",\n+      type: \"http\",\n+      config: { url: \"https://api.data.com/export\", method: \"GET\" }\n+    },\n+    {\n+      id: \"process\", \n+      type: \"sparql\",\n+      config: { query: \"SELECT ?item WHERE { ?item rdf:type gv:DataItem }\" },\n+      dependsOn: [\"fetch\"]\n+    },\n+    {\n+      id: \"report\",\n+      type: \"template\", \n+      config: { template: \"# Data Report\\nProcessed {{ count }} items\", outputPath: \"reports/data.md\" },\n+      dependsOn: [\"process\"]\n+    },\n+    {\n+      id: \"notify\",\n+      type: \"cli\",\n+      config: { command: \"echo 'Data processing complete: {{ count }} items processed'\" },\n+      dependsOn: [\"report\"]\n+    }\n+  ]\n+};\n+```\n+\n+#### CI/CD Automation\n+```javascript\n+const cicdWorkflow = {\n+  hooks: [{ id: \"cicd-pipeline\", title: \"CI/CD Pipeline\", pipelines: [\"deploy\"] }],\n+  pipelines: [{ id: \"deploy\", steps: [\"test\", \"build\", \"deploy\", \"verify\"] }],\n+  steps: [\n+    {\n+      id: \"test\",\n+      type: \"cli\",\n+      config: { command: \"npm test\" }\n+    },\n+    {\n+      id: \"build\",\n+      type: \"cli\", \n+      config: { command: \"npm run build\" },\n+      dependsOn: [\"test\"]\n+    },\n+    {\n+      id: \"deploy\",\n+      type: \"cli\",\n+      config: { command: \"docker push myapp:{{ version }}\" },\n+      dependsOn: [\"build\"]\n+    },\n+    {\n+      id: \"verify\",\n+      type: \"http\",\n+      config: { url: \"https://api.myservice.com/health\", method: \"GET\" },\n+      dependsOn: [\"deploy\"]\n+    }\n+  ]\n+};\n+```\n+\n+### 🎯 Workflow System Benefits\n+\n+#### ✅ **Simplicity**\n+- **Pure JavaScript**: No complex RDF parsing or Turtle file management\n+- **Intuitive Structure**: Clear, readable workflow definitions\n+- **Easy Debugging**: Step-by-step execution with detailed logging\n+\n+#### ✅ **Reliability**\n+- **Dependency Management**: Automatic execution order based on step dependencies\n+- **Error Handling**: Graceful failure handling with rollback capabilities\n+- **Context Preservation**: Full context passing between steps\n+\n+#### ✅ **Extensibility**\n+- **Modular Step Handlers**: Easy to add new step types\n+- **Template System**: Rich templating with Nunjucks filters\n+- **API Integration**: Built-in HTTP and CLI step support\n+\n+#### ✅ **Testing**\n+- **Built-in Testing**: Comprehensive testing utilities\n+- **Validation**: Workflow validation before execution\n+- **Mocking**: Easy mocking for testing environments\n+\n+### 🚀 Use Cases\n+\n+#### **Data Processing Pipelines**\n+- Extract data from APIs\n+- Process with SPARQL queries\n+- Generate reports with templates\n+- Store results in files\n+\n+#### **CI/CD Automation**\n+- Run tests\n+- Build applications\n+- Deploy to environments\n+- Verify deployments\n+\n+#### **Documentation Generation**\n+- Query project data\n+- Generate documentation\n+- Create reports\n+- Update websites\n+\n+#### **Business Intelligence**\n+- Collect metrics\n+- Analyze data\n+- Generate dashboards\n+- Send notifications\n+\n ## 🤖 JTBD Hooks (Job-to-be-Done)\n \n ### Business Intelligence Hooks\n - **Market Intelligence Analyzer**: Track competitor analysis and market trends\n"
                }
            ],
            "date": 1758042393509,
            "name": "Commit-0",
            "content": "# GitVan v2\n\n**Git-Native Automation with Composables and Templates**\n\nGitVan v2 is a lean, single-package JavaScript solution that transforms your Git repository into an intelligent automation platform. Built with modern composables, Nunjucks templates, and Git-native storage, it provides zero-configuration workflow automation with Vue-inspired ergonomics.\n\n## 🚀 Quick Start\n\n```bash\n# Install GitVan globally\nnpm install -g gitvan\n\n# Navigate to your Git repository\ncd your-project\n\n# Run a job\ngitvan run docs:changelog\n\n# Start the daemon for continuous automation\ngitvan daemon start\n```\n\n## ✨ Key Features\n\n### 🎯 **Composables-First API**\n- **Vue-inspired ergonomics** with `useGit()`, `useTemplate()`, `useExec()`\n- **Automatic dependency injection** using unctx\n- **Context isolation** for concurrent execution\n\n### 📝 **Five Execution Types**\n- **`cli`** - Shell command execution with environment control\n- **`js`** - JavaScript module execution with import resolution  \n- **`llm`** - Language model integration (Ollama, OpenAI, etc.)\n- **`job`** - Recursive job execution for composition\n- **`tmpl`** - Nunjucks template rendering with Git context\n\n### 🌳 **Git-Native Storage**\n- **Git refs** for distributed locking across worktrees\n- **Git notes** for execution metadata and receipts\n- **No external databases** - everything stored in Git\n\n### 🔄 **Worktree-Aware Design**\n- **Per-worktree daemons** with complete isolation\n- **Distributed locking** prevents conflicts\n- **Concurrent execution** across multiple branches\n\n## 🏗️ Architecture\n\nGitVan v2 is built as a **single package** with clear internal boundaries:\n\n```\nsrc/\n├── composables/          # Vue-inspired composables API\n│   ├── ctx.mjs          # Context management (unctx)\n│   ├── git.mjs          # Git operations composable\n│   ├── template.mjs     # Nunjucks template composable\n│   ├── exec.mjs         # Execution composable\n│   └── index.mjs        # Composable exports\n├── runtime/              # Core runtime engine\n│   ├── boot.mjs         # Context bootstrapping\n│   ├── define.mjs       # Job definition system\n│   ├── daemon.mjs       # Worktree-scoped daemon\n│   ├── events.mjs       # Event discovery and routing\n│   ├── locks.mjs        # Distributed locking\n│   └── receipt.mjs      # Execution receipts\n└── cli.mjs              # Command-line interface\n```\n\n## 📦 Installation\n\n### Prerequisites\n- **Node.js** 18+ \n- **Git** 2.30+ with GPG signing (recommended)\n- **pnpm** 8+ (for development)\n\n### Global Installation\n```bash\nnpm install -g gitvan\n```\n\n### Development Setup\n```bash\n# Clone the repository\ngit clone https://github.com/sac/gitvan.git\ncd gitvan\n\n# Install dependencies\npnpm install\n\n# Run tests\npnpm test\n\n# Start development CLI\npnpm dev\n```\n\n## 🎮 Usage\n\n### Basic Job Execution\n\n```bash\n# Run a specific job\ngitvan run docs:changelog\n\n# List available jobs\ngitvan list\n```\n\n### Daemon Management\n\n```bash\n# Start daemon for current worktree\ngitvan daemon start\n\n# Start daemon for all worktrees\ngitvan daemon start --worktrees all\n\n# Check daemon status\ngitvan daemon status\n\n# Stop daemon\ngitvan daemon stop\n```\n\n### Event Discovery\n\n```bash\n# List discovered events\ngitvan event list\n\n# List all worktrees\ngitvan worktree list\n```\n\n## 🔧 Job Definition\n\nJobs are defined using the `defineJob()` pattern with composables:\n\n```javascript\n// jobs/docs/changelog.mjs\nimport { defineJob } from '../../src/runtime/define.mjs'\nimport { useGit } from '../../src/composables/git.mjs'\nimport { useTemplate } from '../../src/composables/template.mjs'\n\nexport default defineJob({\n  kind: 'atomic',\n  meta: { \n    desc: 'Generate CHANGELOG.md', \n    schedule: '0 3 * * *' \n  },\n  async run() {\n    const git = useGit()\n    const t = useTemplate()\n    \n    const commits = git.run('log --pretty=%h%x09%s -n 50').split('\\n')\n    t.renderToFile('templates/changelog.njk', 'dist/CHANGELOG.md', { commits })\n    \n    return { ok: true, artifact: 'dist/CHANGELOG.md' }\n  }\n})\n```\n\n### Job Types\n\n- **`atomic`** - Single execution unit\n- **`composite`** - Multiple steps with dependencies\n- **`sequence`** - Sequential execution\n- **`parallel`** - Concurrent execution\n\n## 🎨 Template System\n\nGitVan includes first-class Nunjucks template support with Git context injection:\n\n```njk\n<!-- templates/changelog.njk -->\n# Changelog\nGenerated: {{ nowISO }}\n\n{% for line in commits %}\n- {{ line }}\n{% endfor %}\n```\n\n### Template Features\n- **Git context injection** - `{{ git.branch() }}`, `{{ git.head() }}`\n- **Deterministic helpers** - `{{ nowISO }}`, `{{ formatDate() }}`\n- **File output** - Render directly to files\n- **Include/extends** - Full Nunjucks functionality\n\n## ⚙️ Configuration\n\nCreate `gitvan.config.js` in your project root:\n\n```javascript\nexport default {\n  // Repository settings\n  repo: {\n    defaultBranch: \"main\",\n    notesRef: \"refs/notes/gitvan\",\n    signing: { require: true }\n  },\n\n  // LLM configuration\n  llm: {\n    baseURL: \"http://localhost:11434\", // Ollama\n    model: \"llama3.2\",\n    temperature: 0.2\n  },\n\n  // Event-driven automation\n  events: [\n    {\n      id: \"daily-summary\",\n      workflow: \"cron\",\n      schedule: \"0 18 * * *\",\n      run: { type: \"cookbook\", recipe: \"dev-diary\" }\n    }\n  ]\n}\n```\n\n## 🔌 Composables API\n\n### `useGit()`\n```javascript\nconst git = useGit()\ngit.run('log --oneline -10')        // Execute git command\ngit.branch()                        // Current branch\ngit.head()                          // Current HEAD\ngit.note('refs/notes/test', 'msg')  // Add git note\n```\n\n### `useTemplate()`\n```javascript\nconst t = useTemplate()\nt.render('template.njk', { data })           // Render to string\nt.renderToFile('template.njk', 'out.md', {}) // Render to file\n```\n\n### `useExec()`\n```javascript\nconst exec = useExec()\nexec.cli('npm', ['test'])                    // CLI execution\nexec.js('./script.mjs', 'default', {})       // JS execution\nexec.tmpl({ template: 'test.njk', data: {} }) // Template execution\n```\n\n## 🎯 Event System\n\nGitVan discovers events through file system conventions:\n\n```\nevents/\n├── cron/\n│   └── 0_9_*_*_*.mjs          # Daily at 9 AM\n├── merge-to/\n│   └── main.mjs               # On merge to main\n├── push-to/\n│   └── feature/*.mjs          # On push to feature/*\n└── message/\n    └── release.mjs            # On commit message \"release\"\n```\n\n### Event Handler Example\n```javascript\n// events/merge-to/main.mjs\nexport default async function handler({ payload, git, meta }) {\n  const git = useGit()\n  // Deploy to production\n  return { ok: true, action: 'deploy' }\n}\n```\n\n## 🚀 Performance\n\nGitVan v2 is optimized for speed and efficiency:\n\n- **Job execution**: < 100ms for simple tasks\n- **Template rendering**: > 1000 templates/second\n- **Daemon memory**: < 50MB baseline usage\n- **Lock contention**: < 1 second resolution\n- **Context initialization**: < 50ms\n\n## 🛡️ Security\n\n- **Git-native authentication** with signed commits\n- **Path traversal prevention** in all file operations\n- **Input validation** and sanitization\n- **No external dependencies** for core functionality\n- **Worktree isolation** prevents cross-contamination\n\n## 📚 Documentation\n\n- **[Specifications](./specs/)** - Complete system specifications\n- **[API Contracts](./specs/docs/API_CONTRACTS.md)** - Detailed API documentation\n- **[Architecture Decisions](./specs/docs/ARCHITECTURE_DECISIONS.md)** - Design rationale\n- **[Implementation Guide](./specs/docs/IMPLEMENTATION_GUIDE.md)** - Development guide\n\n## 🧪 Testing\n\n```bash\n# Run all tests\npnpm test\n\n# Run specific test suites\npnpm test composables\npnpm test runtime\npnpm test cli\n\n# Run with coverage\npnpm test --coverage\n```\n\n## 🤝 Contributing\n\nWe welcome contributions! Please see our [Contributing Guide](./CONTRIBUTING.md) for details.\n\n### Development Commands\n\n```bash\n# Install dependencies\npnpm install\n\n# Run linting\npnpm lint\n\n# Type checking\npnpm typecheck\n\n# Clean build artifacts\npnpm clean\n```\n\n## 📄 License\n\nPublished under the [MIT](./LICENSE) license.\n\n## 🙏 Acknowledgments\n\nGitVan v2 is inspired by:\n- **Vue.js** for the composables pattern\n- **Git** for the powerful foundation\n- **Nunjucks** for template rendering\n- **unctx** for context management\n\n---\n\n**Transform your Git workflow with intelligent automation. Start with GitVan v2 today!**"
        }
    ]
}