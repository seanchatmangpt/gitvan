// examples/output-step-handler-demo.mjs
// Demonstration of the OutputStepHandler capabilities

import { OutputStepHandler } from "../src/workflow/step-handlers/output-step-handler.mjs";
import { writeFile } from "node:fs/promises";
import { resolve } from "node:path";

async function demonstrateOutputHandler() {
  console.log("üöÄ GitVan OutputStepHandler Demo");
  console.log("================================\n");

  const handler = new OutputStepHandler();
  const testDir = resolve("./demo-outputs");

  // Ensure demo directory exists
  try {
    await writeFile(resolve(testDir, ".gitkeep"), "");
  } catch (error) {
    // Directory might already exist
  }

  const demoData = {
    title: "GitVan Output Demo",
    author: "GitVan System",
    date: new Date().toLocaleDateString(),
    data: [
      { name: "John Doe", role: "Developer", experience: 5 },
      { name: "Jane Smith", role: "Designer", experience: 3 },
      { name: "Bob Johnson", role: "Manager", experience: 8 },
    ],
    summary: {
      totalEmployees: 3,
      averageExperience: 5.3,
      departments: ["Engineering", "Design", "Management"],
    },
  };

  const template = `# {{title}}

**Author:** {{author}}  
**Date:** {{date}}

## Summary

- **Total Employees:** {{summary.totalEmployees}}
- **Average Experience:** {{summary.averageExperience}} years
- **Departments:** {{summary.departments.join(", ")}}

## Employee Data

| Name | Role | Experience |
|------|------|------------|
{% for person in data %}
| {{person.name}} | {{person.role}} | {{person.experience}} years |
{% endfor %}

## Analysis

This report demonstrates the capabilities of the GitVan OutputStepHandler, which can generate documents in multiple formats including:

- **Markdown** - Plain text formatting
- **HTML** - Web-ready documents with styling
- **LaTeX** - Academic papers and technical documents
- **Excel** - Data spreadsheets with formatting
- **PowerPoint** - Presentation slides
- **Word** - Professional documents

Generated by GitVan on {{date}}`;

  // Test different output formats
  const formats = [
    { format: "markdown", ext: "md", description: "Markdown document" },
    { format: "html", ext: "html", description: "HTML document" },
    { format: "latex", ext: "tex", description: "LaTeX document" },
    { format: "excel", ext: "xlsx", description: "Excel spreadsheet" },
    {
      format: "powerpoint",
      ext: "pptx",
      description: "PowerPoint presentation",
    },
  ];

  for (const { format, ext, description } of formats) {
    console.log(`üìÑ Generating ${description}...`);

    const step = {
      config: {
        template,
        outputPath: resolve(testDir, `demo-report.${ext}`),
        format,
      },
    };

    try {
      const result = await handler.execute(step, demoData, {});

      if (result.success) {
        console.log(`‚úÖ ${description} generated successfully`);
        console.log(`   üìÅ Path: ${result.data.outputPath}`);
        console.log(`   üìä Size: ${result.data.contentLength} characters`);
        console.log(`   üìã Format: ${result.data.format}\n`);
      } else {
        console.log(`‚ùå Failed to generate ${description}: ${result.error}\n`);
      }
    } catch (error) {
      console.log(`‚ùå Error generating ${description}: ${error.message}\n`);
    }
  }

  console.log(
    "üéâ Demo completed! Check the 'demo-outputs' directory for generated files."
  );
  console.log("\nüìö Usage in Workflows:");
  console.log(`
{
  "type": "output",
  "config": {
    "template": "# Your template content",
    "outputPath": "./reports/{{timestamp}}.md",
    "format": "markdown"
  }
}
  `);
}

// Run the demo
demonstrateOutputHandler().catch(console.error);
