// jobs/test/simple.mjs
// GitVan v2 â€” Simple Test Job
// Demonstrates basic job functionality

import { defineJob } from "../../src/jobs/define.mjs";
import { useGit } from "../../src/composables/git.mjs";
import { useTemplate } from "../../src/composables/template.mjs";
import { promises as fs } from "node:fs";
import { join, dirname } from "pathe";

export default defineJob({
  meta: {
    desc: "Simple test job that demonstrates basic functionality",
    tags: ["test", "demo"],
  },
  async run({ payload, ctx }) {
    const git = useGit();
    const template = await useTemplate();

    // Log job execution
    ctx.logger.log(`Running simple test job with payload:`, payload);

    // Get some git info
    const branch = await git.getCurrentBranch();
    const head = await git.head();
    const isClean = await git.isClean();

    // Create a simple report
    const reportData = {
      jobId: ctx.id,
      timestamp: ctx.nowISO,
      branch,
      head: head.substring(0, 8),
      isClean,
      payload,
    };

    // Render template to file
    const templateContent = `# Test Job Report

**Job ID:** {{ jobId }}
**Timestamp:** {{ timestamp }}
**Branch:** {{ branch }}
**Head:** {{ head }}
**Clean:** {{ isClean }}
**Payload:** {{ payload | json(2) }}

Generated by GitVan Jobs System.
`;

    const renderedContent = template.renderString(templateContent, reportData);

    // Write to file manually
    const outputPath = join(ctx.root, "dist", "test-report.md");
    await fs.mkdir(dirname(outputPath), { recursive: true });
    await fs.writeFile(outputPath, renderedContent);

    // Also create a JSON report
    const jsonReport = {
      ...reportData,
      artifacts: [outputPath],
    };

    return {
      ok: true,
      artifacts: [outputPath],
      data: jsonReport,
    };
  },
});
