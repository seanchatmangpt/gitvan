{
    "sourceFile": "tests/nunjucks-config.test.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758046012301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758046012301,
            "name": "Commit-0",
            "content": "// tests/nunjucks-config.test.mjs\n// GitVan v2 â€” Nunjucks Configuration Utility Tests\n\nimport { describe, it, expect, beforeEach, afterEach } from \"vitest\";\nimport { promises as fs } from \"node:fs\";\nimport { join } from \"pathe\";\nimport {\n  createNunjucksEnvironment,\n  getCachedEnvironment,\n  clearEnvironmentCache,\n  getCacheStats,\n  validateEnvironmentConfig,\n  createTestEnvironment,\n  listAvailableFilters,\n} from \"../src/utils/nunjucks-config.mjs\";\n\ndescribe(\"nunjucks-config\", () => {\n  let tempDir;\n  let templatesDir;\n\n  beforeEach(async () => {\n    // Create temporary directory structure\n    tempDir = join(process.cwd(), \"test-nunjucks-temp\");\n    templatesDir = join(tempDir, \"templates\");\n\n    await fs.mkdir(templatesDir, { recursive: true });\n\n    // Create test templates\n    await fs.writeFile(\n      join(templatesDir, \"test.njk\"),\n      \"Hello {{ name | capitalize }}!\",\n    );\n  });\n\n  afterEach(async () => {\n    // Clean up temporary directory and cache\n    try {\n      await fs.rm(tempDir, { recursive: true, force: true });\n    } catch {\n      // Ignore cleanup errors\n    }\n    clearEnvironmentCache();\n  });\n\n  describe(\"environment creation\", () => {\n    it(\"should create environment with basic configuration\", () => {\n      const env = createNunjucksEnvironment({\n        paths: [templatesDir],\n        autoescape: false,\n        noCache: true,\n      });\n\n      expect(env).toBeDefined();\n      expect(env.loaders).toHaveLength(1);\n    });\n\n    it(\"should render template with built-in filters\", () => {\n      const env = createNunjucksEnvironment({\n        paths: [templatesDir],\n        autoescape: false,\n        noCache: true,\n      });\n\n      const result = env.renderString(\"{{ 'hello' | upper }}\", {});\n      expect(result).toBe(\"HELLO\");\n    });\n\n    it(\"should render template with inflection filters\", () => {\n      const env = createNunjucksEnvironment({\n        paths: [templatesDir],\n        autoescape: false,\n        noCache: true,\n      });\n\n      const result = env.renderString('{{ \"user\" | pluralize }}', {});\n      expect(result).toBe(\"users\");\n    });\n  });\n\n  describe(\"determinism guards\", () => {\n    it(\"should throw error for now() calls\", () => {\n      const env = createNunjucksEnvironment({\n        paths: [templatesDir],\n        autoescape: false,\n        noCache: true,\n      });\n\n      expect(() => {\n        env.renderString(\"{{ now() }}\", {});\n      }).toThrow(\"Templates must not call now()\");\n    });\n\n    it(\"should throw error for random() calls\", () => {\n      const env = createNunjucksEnvironment({\n        paths: [templatesDir],\n        autoescape: false,\n        noCache: true,\n      });\n\n      expect(() => {\n        env.renderString(\"{{ random() }}\", {});\n      }).toThrow(\"Templates must not use random()\");\n    });\n  });\n\n  describe(\"caching\", () => {\n    it(\"should cache environments with same configuration\", () => {\n      const config = {\n        paths: [templatesDir],\n        autoescape: false,\n        noCache: true,\n      };\n\n      const env1 = getCachedEnvironment(config);\n      const env2 = getCachedEnvironment(config);\n\n      expect(env1).toBe(env2);\n    });\n\n    it(\"should create different environments for different configurations\", () => {\n      const config1 = {\n        paths: [templatesDir],\n        autoescape: false,\n        noCache: true,\n      };\n\n      const config2 = {\n        paths: [templatesDir],\n        autoescape: true,\n        noCache: true,\n      };\n\n      const env1 = getCachedEnvironment(config1);\n      const env2 = getCachedEnvironment(config2);\n\n      expect(env1).not.toBe(env2);\n    });\n\n    it(\"should clear cache when requested\", () => {\n      const config = {\n        paths: [templatesDir],\n        autoescape: false,\n        noCache: true,\n      };\n\n      getCachedEnvironment(config);\n      expect(getCacheStats().size).toBe(1);\n\n      clearEnvironmentCache();\n      expect(getCacheStats().size).toBe(0);\n    });\n\n    it(\"should provide cache statistics\", () => {\n      const config = {\n        paths: [templatesDir],\n        autoescape: false,\n        noCache: true,\n      };\n\n      getCachedEnvironment(config);\n      const stats = getCacheStats();\n\n      expect(stats.size).toBe(1);\n      expect(stats.keys).toHaveLength(1);\n      expect(stats.keys[0]).toContain('\"paths\"');\n    });\n  });\n\n  describe(\"validation\", () => {\n    it(\"should validate correct configuration\", () => {\n      const config = {\n        paths: [templatesDir],\n        autoescape: false,\n        noCache: true,\n      };\n\n      const result = validateEnvironmentConfig(config);\n      expect(result.isValid).toBe(true);\n      expect(result.errors).toHaveLength(0);\n    });\n\n    it(\"should reject invalid configuration\", () => {\n      const config = {\n        paths: [],\n        autoescape: \"not-boolean\",\n        noCache: null,\n      };\n\n      const result = validateEnvironmentConfig(config);\n      expect(result.isValid).toBe(false);\n      expect(result.errors.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe(\"test environment\", () => {\n    it(\"should create test environment with minimal config\", () => {\n      const env = createTestEnvironment([templatesDir]);\n      expect(env).toBeDefined();\n      expect(env.autoescape).toBe(false);\n    });\n  });\n\n  describe(\"filter listing\", () => {\n    it(\"should list all available filters\", () => {\n      const filters = listAvailableFilters();\n\n      expect(filters.builtIn).toContain(\"json\");\n      expect(filters.builtIn).toContain(\"slug\");\n      expect(filters.inflection).toContain(\"pluralize\");\n      expect(filters.inflection).toContain(\"camelize\");\n      expect(filters.guards).toContain(\"now\");\n      expect(filters.guards).toContain(\"random\");\n    });\n  });\n\n  describe(\"filter functionality\", () => {\n    let env;\n\n    beforeEach(() => {\n      env = createTestEnvironment([templatesDir]);\n    });\n\n    it(\"should handle built-in filters correctly\", () => {\n      expect(env.renderString(\"{{ 'Hello World!' | slug }}\", {})).toBe(\n        \"hello-world\",\n      );\n      expect(env.renderString(\"{{ 'hello' | upper }}\", {})).toBe(\"HELLO\");\n      expect(env.renderString(\"{{ 'HELLO' | lower }}\", {})).toBe(\"hello\");\n      expect(env.renderString(\"{{ '5' | pad(3) }}\", {})).toBe(\"005\");\n    });\n\n    it(\"should handle inflection filters correctly\", () => {\n      expect(env.renderString('{{ \"user\" | pluralize }}', {})).toBe(\"users\");\n      expect(env.renderString('{{ \"users\" | singularize }}', {})).toBe(\"user\");\n      expect(env.renderString('{{ \"user_profile\" | camelize }}', {})).toBe(\n        \"UserProfile\",\n      );\n      expect(env.renderString('{{ \"UserProfile\" | underscore }}', {})).toBe(\n        \"user_profile\",\n      );\n      expect(env.renderString('{{ \"hello_world\" | dasherize }}', {})).toBe(\n        \"hello-world\",\n      );\n    });\n\n    it(\"should handle json filter with spacing\", () => {\n      const data = { name: \"test\", value: 42 };\n      const result = env.renderString(\"{{ data | json(2) }}\", { data });\n      expect(result).toBe(JSON.stringify(data, null, 2));\n    });\n  });\n});\n"
        }
    ]
}