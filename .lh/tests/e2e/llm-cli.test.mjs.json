{
    "sourceFile": "tests/e2e/llm-cli.test.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1758072623002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758072837768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,13 +66,9 @@\n   }\n \n   describe(\"llm call command\", () => {\n     it(\"should call LLM with a prompt\", async () => {\n-      const result = await runCliCommand([\n-        \"llm\",\n-        \"call\",\n-        \"What is GitVan?\",\n-      ]);\n+      const result = await runCliCommand([\"llm\", \"call\", \"What is GitVan?\"]);\n \n       expect(result.code).toBe(0);\n       expect(result.stdout).toContain(\"GitVan\");\n     });\n"
                }
            ],
            "date": 1758072623002,
            "name": "Commit-0",
            "content": "// tests/e2e/llm-cli.test.mjs\n// End-to-end tests for GitVan v2 LLM CLI commands\n// Tests against the playground environment\n\nimport { describe, it, expect, beforeEach, afterEach } from \"vitest\";\nimport { spawn } from \"node:child_process\";\nimport { promises as fs } from \"node:fs\";\nimport { join } from \"pathe\";\nimport { fileURLToPath } from \"node:url\";\n\nconst __dirname = fileURLToPath(new URL(\".\", import.meta.url));\nconst playgroundDir = join(__dirname, \"../../playground\");\nconst gitvanCli = join(__dirname, \"../../src/cli.mjs\");\n\ndescribe(\"LLM CLI E2E Tests\", () => {\n  let originalCwd;\n  let tempDir;\n\n  beforeEach(async () => {\n    originalCwd = process.cwd();\n    tempDir = join(playgroundDir, \"test-llm-temp\");\n    await fs.mkdir(tempDir, { recursive: true });\n  });\n\n  afterEach(async () => {\n    process.chdir(originalCwd);\n    try {\n      await fs.rm(tempDir, { recursive: true, force: true });\n    } catch {\n      // Ignore cleanup errors\n    }\n  });\n\n  // Helper function to run CLI commands\n  async function runCliCommand(args, options = {}) {\n    return new Promise((resolve, reject) => {\n      const child = spawn(\"node\", [gitvanCli, ...args], {\n        cwd: playgroundDir,\n        stdio: [\"pipe\", \"pipe\", \"pipe\"],\n        ...options,\n      });\n\n      let stdout = \"\";\n      let stderr = \"\";\n\n      child.stdout.on(\"data\", (data) => {\n        stdout += data.toString();\n      });\n\n      child.stderr.on(\"data\", (data) => {\n        stderr += data.toString();\n      });\n\n      child.on(\"close\", (code) => {\n        resolve({\n          code,\n          stdout: stdout.trim(),\n          stderr: stderr.trim(),\n        });\n      });\n\n      child.on(\"error\", (error) => {\n        reject(error);\n      });\n    });\n  }\n\n  describe(\"llm call command\", () => {\n    it(\"should call LLM with a prompt\", async () => {\n      const result = await runCliCommand([\n        \"llm\",\n        \"call\",\n        \"What is GitVan?\",\n      ]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"GitVan\");\n    });\n\n    it(\"should call LLM with custom model\", async () => {\n      const result = await runCliCommand([\n        \"llm\",\n        \"call\",\n        \"Explain Git automation\",\n        \"--model\",\n        \"qwen3-coder:30b\",\n      ]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout.length).toBeGreaterThan(0);\n    });\n\n    it(\"should call LLM with custom temperature\", async () => {\n      const result = await runCliCommand([\n        \"llm\",\n        \"call\",\n        \"Generate a simple function\",\n        \"--temp\",\n        \"0.7\",\n      ]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout.length).toBeGreaterThan(0);\n    });\n\n    it(\"should handle AI unavailability\", async () => {\n      const result = await runCliCommand([\n        \"llm\",\n        \"call\",\n        \"Test prompt\",\n        \"--model\",\n        \"nonexistent-model\",\n      ]);\n\n      // Should either succeed with fallback or fail gracefully\n      expect(result.code).toBeDefined();\n    });\n\n    it(\"should require a prompt\", async () => {\n      const result = await runCliCommand([\"llm\", \"call\"]);\n\n      expect(result.code).toBe(1);\n      expect(result.stderr).toContain(\"Prompt required\");\n    });\n  });\n\n  describe(\"llm models command\", () => {\n    it(\"should list available models\", async () => {\n      const result = await runCliCommand([\"llm\", \"models\"]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Available models\");\n    });\n\n    it(\"should show model information\", async () => {\n      const result = await runCliCommand([\"llm\", \"models\"]);\n\n      expect(result.code).toBe(0);\n      // Should show model details\n      expect(result.stdout.length).toBeGreaterThan(0);\n    });\n\n    it(\"should handle model listing errors\", async () => {\n      const result = await runCliCommand([\"llm\", \"models\"]);\n\n      expect(result.code).toBe(0);\n      // Should either show models or indicate unavailability\n      expect(result.stdout.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe(\"llm command error handling\", () => {\n    it(\"should handle invalid llm subcommands\", async () => {\n      const result = await runCliCommand([\"llm\", \"invalid\"]);\n\n      expect(result.code).toBe(1);\n      expect(result.stderr).toContain(\"Unknown llm command\");\n    });\n\n    it(\"should provide help for llm commands\", async () => {\n      const result = await runCliCommand([\"llm\", \"help\"]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"LLM Commands:\");\n    });\n  });\n\n  describe(\"llm integration\", () => {\n    it(\"should work with playground configuration\", async () => {\n      const result = await runCliCommand([\n        \"llm\",\n        \"call\",\n        \"Analyze this playground setup\",\n      ]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout.length).toBeGreaterThan(0);\n    });\n\n    it(\"should respect playground AI settings\", async () => {\n      const result = await runCliCommand([\n        \"llm\",\n        \"call\",\n        \"What jobs are available?\",\n      ]);\n\n      expect(result.code).toBe(0);\n      // Should be able to analyze the playground\n      expect(result.stdout.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe(\"llm advanced features\", () => {\n    it(\"should handle streaming output\", async () => {\n      const result = await runCliCommand([\n        \"llm\",\n        \"call\",\n        \"Write a short poem\",\n        \"--stream\",\n      ]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout.length).toBeGreaterThan(0);\n    });\n\n    it(\"should handle context-aware prompts\", async () => {\n      const result = await runCliCommand([\n        \"llm\",\n        \"call\",\n        \"What files are in this project?\",\n      ]);\n\n      expect(result.code).toBe(0);\n      // Should be able to see project context\n      expect(result.stdout.length).toBeGreaterThan(0);\n    });\n\n    it(\"should handle code generation\", async () => {\n      const result = await runCliCommand([\n        \"llm\",\n        \"call\",\n        \"Generate a simple JavaScript function that adds two numbers\",\n      ]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"function\");\n    });\n  });\n});\n"
        }
    ]
}