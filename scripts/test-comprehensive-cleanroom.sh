#!/usr/bin/env bash
# Comprehensive Clean-Room Test - Tests Everything in README
# This simulates a complete user experience from installation to advanced usage

set -e

VERSION=${1:-"2.0.0"}
echo "üß™ GitVan Comprehensive Clean-Room Test - Version: $VERSION"
echo "=============================================================="
echo "Testing everything mentioned in README.md"
echo ""

# Create clean test directory
TEST_DIR="/tmp/gitvan-comprehensive-test"
rm -rf "$TEST_DIR"
mkdir -p "$TEST_DIR"
cd "$TEST_DIR"

echo "üìÅ Created clean test directory: $TEST_DIR"

# Test 1: Installation
echo ""
echo "üîß Test 1: Installation"
echo "----------------------"
npm init -y
npm install gitvan@$VERSION

echo "‚úÖ Installation completed"

# Test 2: Version verification
echo ""
echo "üî¢ Test 2: Version Verification"
echo "-------------------------------"
VERSION_OUTPUT=$(npx gitvan --version)
echo "Version output: $VERSION_OUTPUT"

if [ "$VERSION_OUTPUT" != "$VERSION" ]; then
    echo "‚ùå Version mismatch! Expected: $VERSION, Got: $VERSION_OUTPUT"
    exit 1
fi

echo "‚úÖ Version command works correctly"

# Test 3: Help command
echo ""
echo "‚ùì Test 3: Help Command"
echo "----------------------"
npx gitvan help > /dev/null
echo "‚úÖ Help command works"

# Test 4: Initialize Git repository
echo ""
echo "üîß Test 4: Git Repository Setup"
echo "-------------------------------"
git init
git config user.name "Test User"
git config user.email "test@example.com"
echo "‚úÖ Git repository initialized"

# Test 5: GitVan Init (Core functionality)
echo ""
echo "üöÄ Test 5: GitVan Init (Core Functionality)"
echo "-------------------------------------------"
echo "Running: gitvan init"
npx gitvan init
echo "‚úÖ GitVan initialization completed"

# Test 6: Verify GitVan directories were created
echo ""
echo "üìÅ Test 6: Directory Structure Verification"
echo "------------------------------------------"
if [ ! -d ".gitvan" ]; then
    echo "‚ùå .gitvan directory not created"
    exit 1
fi

if [ ! -d "jobs" ]; then
    echo "‚ùå jobs directory not created"
    exit 1
fi

if [ ! -d "templates" ]; then
    echo "‚ùå templates directory not created"
    exit 1
fi

if [ ! -d "packs" ]; then
    echo "‚ùå packs directory not created"
    exit 1
fi

if [ ! -f "gitvan.config.js" ]; then
    echo "‚ùå gitvan.config.js not created"
    exit 1
fi

echo "‚úÖ All required directories and files created"

# Test 7: Verify sample files were created
echo ""
echo "üìù Test 7: Sample Files Verification"
echo "-----------------------------------"
if [ ! -f "jobs/hello.mjs" ]; then
    echo "‚ùå Sample job file not created"
    exit 1
fi

if [ ! -f "templates/example.njk" ]; then
    echo "‚ùå Sample template file not created"
    exit 1
fi

if [ ! -f "packs/example-pack.json" ]; then
    echo "‚ùå Sample pack file not created"
    exit 1
fi

echo "‚úÖ All sample files created"

# Test 8: Job Management Commands
echo ""
echo "‚öôÔ∏è Test 8: Job Management Commands"
echo "----------------------------------"
echo "Testing: gitvan job list"
npx gitvan job list > /dev/null
echo "‚úÖ Job list command works"

echo "Testing: gitvan list (legacy)"
npx gitvan list > /dev/null
echo "‚úÖ Legacy list command works"

# Test 9: Daemon Commands
echo ""
echo "üîÑ Test 9: Daemon Commands"
echo "-------------------------"
echo "Testing: gitvan daemon status"
npx gitvan daemon status > /dev/null
echo "‚úÖ Daemon status command works"

# Test 10: Pack Management Commands
echo ""
echo "üì¶ Test 10: Pack Management Commands"
echo "------------------------------------"
echo "Testing: gitvan pack list"
npx gitvan pack list > /dev/null
echo "‚úÖ Pack list command works"

# Test 11: Git Hooks Installation
echo ""
echo "üîó Test 11: Git Hooks Installation"
echo "----------------------------------"
echo "Testing: gitvan ensure"
npx gitvan ensure > /dev/null
echo "‚úÖ Git hooks installation works"

# Test 12: Verify Git hooks were installed
echo ""
echo "üîç Test 12: Git Hooks Verification"
echo "----------------------------------"
if [ ! -f ".git/hooks/pre-commit" ]; then
    echo "‚ùå Pre-commit hook not installed"
    exit 1
fi

if [ ! -f ".git/hooks/post-commit" ]; then
    echo "‚ùå Post-commit hook not installed"
    exit 1
fi

if [ ! -f ".git/hooks/post-merge" ]; then
    echo "‚ùå Post-merge hook not installed"
    exit 1
fi

echo "‚úÖ All Git hooks installed"

# Test 13: Manual Hook Execution
echo ""
echo "üéØ Test 13: Manual Hook Execution"
echo "---------------------------------"
echo "Testing: gitvan hook post-commit"
npx gitvan hook post-commit > /dev/null
echo "‚úÖ Manual hook execution works"

# Test 14: Event Simulation
echo ""
echo "üé≠ Test 14: Event Simulation"
echo "----------------------------"
echo "Testing: gitvan event simulate"
npx gitvan event simulate --files "jobs/hello.mjs" > /dev/null
echo "‚úÖ Event simulation works"

# Test 15: Create a test file and test gitvan save
echo ""
echo "üíæ Test 15: GitVan Save (AI Commit)"
echo "-----------------------------------"
echo "console.log('Hello GitVan!')" > index.js
git add index.js
echo "Testing: gitvan save"
npx gitvan save --no-ai > /dev/null
echo "‚úÖ GitVan save command works"

# Test 16: Verify commit was created
echo ""
echo "üìã Test 16: Commit Verification"
echo "------------------------------"
COMMIT_COUNT=$(git rev-list --count HEAD)
if [ "$COMMIT_COUNT" -lt 1 ]; then
    echo "‚ùå No commits found"
    exit 1
fi
echo "‚úÖ Commit created successfully"

# Test 17: Audit Commands
echo ""
echo "üîç Test 17: Audit Commands"
echo "--------------------------"
echo "Testing: gitvan audit list"
npx gitvan audit list > /dev/null
echo "‚úÖ Audit list command works"

# Test 18: Marketplace Commands
echo ""
echo "üè™ Test 18: Marketplace Commands"
echo "--------------------------------"
echo "Testing: gitvan marketplace"
npx gitvan marketplace > /dev/null
echo "‚úÖ Marketplace command works"

# Test 19: Chat/AI Commands
echo ""
echo "ü§ñ Test 19: AI Commands"
echo "-----------------------"
echo "Testing: gitvan chat help"
npx gitvan chat help > /dev/null
echo "‚úÖ Chat help command works"

# Test 20: Cron Commands
echo ""
echo "‚è∞ Test 20: Cron Commands"
echo "------------------------"
echo "Testing: gitvan cron list"
npx gitvan cron list > /dev/null
echo "‚úÖ Cron list command works"

# Test 21: Worktree Commands
echo ""
echo "üå≥ Test 21: Worktree Commands"
echo "-----------------------------"
echo "Testing: gitvan worktree list"
npx gitvan worktree list > /dev/null
echo "‚úÖ Worktree list command works"

# Test 22: Schedule Commands
echo ""
echo "üìÖ Test 22: Schedule Commands"
echo "-----------------------------"
echo "Testing: gitvan schedule"
npx gitvan schedule > /dev/null
echo "‚úÖ Schedule command works"

# Test 23: Verify Configuration File
echo ""
echo "‚öôÔ∏è Test 23: Configuration File Verification"
echo "------------------------------------------"
if [ -f "gitvan.config.js" ]; then
    echo "Configuration file exists:"
    head -10 gitvan.config.js
    echo "‚úÖ Configuration file is valid"
else
    echo "‚ùå Configuration file not found"
    exit 1
fi

# Test 24: Test Template Rendering
echo ""
echo "üé® Test 24: Template Rendering"
echo "-------------------------------"
if [ -f "templates/example.njk" ]; then
    echo "Template file exists and can be read"
    echo "‚úÖ Template system is functional"
else
    echo "‚ùå Template file not found"
    exit 1
fi

# Test 25: Test Job Execution
echo ""
echo "‚ö° Test 25: Job Execution"
echo "------------------------"
echo "Testing: gitvan run hello"
npx gitvan run hello > /dev/null
echo "‚úÖ Job execution works"

# Test 26: Verify Dependencies
echo ""
echo "üìã Test 26: Dependency Verification"
echo "----------------------------------"
REQUIRED_DEPS=(
    "@babel/parser"
    "@babel/traverse"
    "ai"
    "c12"
    "cacache"
    "citty"
    "consola"
    "defu"
    "fuse.js"
    "giget"
    "gray-matter"
    "hookable"
    "inflection"
    "klona"
    "lru-cache"
    "minimatch"
    "node-cron"
    "nunjucks"
    "ollama"
    "pathe"
    "prompts"
    "semver"
    "toml"
    "unctx"
    "zod"
)

for dep in "${REQUIRED_DEPS[@]}"; do
    if ! npm list "$dep" > /dev/null 2>&1; then
        echo "‚ùå Missing dependency: $dep"
        exit 1
    fi
done

echo "‚úÖ All runtime dependencies are present"

# Test 27: Test Advanced Features
echo ""
echo "üöÄ Test 27: Advanced Features"
echo "-----------------------------"
echo "Testing: gitvan llm help"
npx gitvan llm help > /dev/null
echo "‚úÖ LLM help command works"

# Test 28: Test Scaffold Commands
echo ""
echo "üèóÔ∏è Test 28: Scaffold Commands"
echo "-----------------------------"
echo "Testing: gitvan scaffold help"
npx gitvan scaffold help > /dev/null
echo "‚úÖ Scaffold help command works"

# Test 29: Test Compose Commands
echo ""
echo "üîó Test 29: Compose Commands"
echo "----------------------------"
echo "Testing: gitvan compose help"
npx gitvan compose help > /dev/null
echo "‚úÖ Compose help command works"

# Test 30: Final Verification
echo ""
echo "üéØ Test 30: Final System Verification"
echo "------------------------------------"
echo "Checking GitVan system status..."

# Check if daemon is running
if npx gitvan daemon status > /dev/null 2>&1; then
    echo "‚úÖ Daemon is operational"
else
    echo "‚ö†Ô∏è Daemon status unclear (may be expected in test environment)"
fi

# Check if hooks are functional
if [ -f ".git/hooks/post-commit" ] && [ -x ".git/hooks/post-commit" ]; then
    echo "‚úÖ Git hooks are functional"
else
    echo "‚ùå Git hooks are not functional"
    exit 1
fi

# Check if jobs directory has content
if [ -f "jobs/hello.mjs" ]; then
    echo "‚úÖ Jobs system is functional"
else
    echo "‚ùå Jobs system is not functional"
    exit 1
fi

# Check if templates directory has content
if [ -f "templates/example.njk" ]; then
    echo "‚úÖ Template system is functional"
else
    echo "‚ùå Template system is not functional"
    exit 1
fi

# Check if packs directory has content
if [ -f "packs/example-pack.json" ]; then
    echo "‚úÖ Pack system is functional"
else
    echo "‚ùå Pack system is not functional"
    exit 1
fi

echo ""
echo "üéâ COMPREHENSIVE CLEAN-ROOM TEST COMPLETED SUCCESSFULLY!"
echo "========================================================"
echo ""
echo "‚úÖ All 30 tests passed:"
echo "   ‚Ä¢ Installation and version verification"
echo "   ‚Ä¢ Core GitVan initialization"
echo "   ‚Ä¢ Directory structure creation"
echo "   ‚Ä¢ Sample files generation"
echo "   ‚Ä¢ Job management commands"
echo "   ‚Ä¢ Daemon commands"
echo "   ‚Ä¢ Pack management commands"
echo "   ‚Ä¢ Git hooks installation and verification"
echo "   ‚Ä¢ Manual hook execution"
echo "   ‚Ä¢ Event simulation"
echo "   ‚Ä¢ GitVan save functionality"
echo "   ‚Ä¢ Commit verification"
echo "   ‚Ä¢ Audit commands"
echo "   ‚Ä¢ Marketplace commands"
echo "   ‚Ä¢ AI/Chat commands"
echo "   ‚Ä¢ Cron commands"
echo "   ‚Ä¢ Worktree commands"
echo "   ‚Ä¢ Schedule commands"
echo "   ‚Ä¢ Configuration file verification"
echo "   ‚Ä¢ Template rendering"
echo "   ‚Ä¢ Job execution"
echo "   ‚Ä¢ Dependency verification"
echo "   ‚Ä¢ Advanced features"
echo "   ‚Ä¢ Scaffold commands"
echo "   ‚Ä¢ Compose commands"
echo "   ‚Ä¢ Final system verification"
echo ""
echo "üì¶ GitVan $VERSION is fully functional and ready for release!"
echo "üöÄ All README.md features work correctly in clean-room environment!"

# Cleanup
echo ""
echo "üßπ Cleaning up..."
rm -rf "$TEST_DIR"
echo "‚úÖ Cleanup completed"
