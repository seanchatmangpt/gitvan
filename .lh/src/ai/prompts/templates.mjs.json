{
    "sourceFile": "src/ai/prompts/templates.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1758057329104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758057335360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,179 @@\n+/**\n+ * GitVan v2 AI Prompt Templates - Nunjucks templates for AI generation\n+ * Templates for generating jobs, events, and other GitVan artifacts\n+ */\n+\n+// Job writer template\n+export const JOB_WRITER_TEMPLATE = `\n+Emit ONLY valid ESM for a GitVan job module:\n+\n+import { defineJob } from \"gitvan/define\"\n+\n+export default defineJob({\n+  meta: { \n+    desc: \"{{ desc | default('Generated job') }}\", \n+    tags: {{ tags | default(\"[]\") | safe }}\n+  },\n+  {% if cron %}cron: \"{{ cron }}\",{% endif %}\n+  {% if on %}on: {{ on | safe }},{% endif %}\n+  async run({ ctx, payload }) {\n+    const { useGit } = await import(\"gitvan/composables/git\")\n+    const { useTemplate } = await import(\"gitvan/composables/template\")\n+    const git = useGit()\n+    const tpl = await useTemplate()\n+    \n+    {{ body | default(\"// TODO: implement\") }}\n+    \n+    return { ok: true, artifacts: [] }\n+  }\n+})\n+`;\n+\n+// Event writer template\n+export const EVENT_WRITER_TEMPLATE = `\n+Emit ONLY valid ESM for a GitVan event job module:\n+\n+import { defineJob } from \"gitvan/define\"\n+\n+export default defineJob({\n+  meta: { \n+    desc: \"{{ desc | default('Generated event job') }}\", \n+    tags: {{ tags | default(\"[]\") | safe }}\n+  },\n+  on: {{ on | safe }},\n+  async run({ ctx, payload, meta }) {\n+    const { useGit } = await import(\"gitvan/composables/git\")\n+    const { useTemplate } = await import(\"gitvan/composables/template\")\n+    const git = useGit()\n+    const tpl = await useTemplate()\n+    \n+    {{ body | default(\"// TODO: implement event handler\") }}\n+    \n+    return { ok: true, artifacts: [] }\n+  }\n+})\n+`;\n+\n+// Template generator template\n+export const TEMPLATE_GENERATOR_TEMPLATE = `\n+Generate a Nunjucks template for GitVan:\n+\n+{# {{ name | default('Generated Template') }} #}\n+{# Generated: {{ now | default('now') }} #}\n+\n+{{ content | default('<!-- TODO: implement template -->') }}\n+`;\n+\n+// Changelog template\n+export const CHANGELOG_TEMPLATE = `\n+# Changelog\n+\n+## {{ version | default('Unreleased') }} - {{ date | default('now') | date('YYYY-MM-DD') }}\n+\n+{% if commits %}\n+### Changes\n+{% for commit in commits %}\n+- {{ commit.message | truncate(80) }} ({{ commit.author }})\n+{% endfor %}\n+{% endif %}\n+\n+{% if features %}\n+### Features\n+{% for feature in features %}\n+- {{ feature }}\n+{% endfor %}\n+{% endif %}\n+\n+{% if fixes %}\n+### Fixes\n+{% for fix in fixes %}\n+- {{ fix }}\n+{% endfor %}\n+{% endif %}\n+`;\n+\n+// Release notes template\n+export const RELEASE_NOTES_TEMPLATE = `\n+# Release Notes - {{ version }}\n+\n+**Release Date:** {{ date | default('now') | date('YYYY-MM-DD') }}\n+\n+## Summary\n+{{ summary | default('This release includes various improvements and bug fixes.') }}\n+\n+## What's New\n+{% if features %}\n+{% for feature in features %}\n+- **{{ feature.title }}**: {{ feature.description }}\n+{% endfor %}\n+{% endif %}\n+\n+## Bug Fixes\n+{% if fixes %}\n+{% for fix in fixes %}\n+- {{ fix }}\n+{% endfor %}\n+{% endif %}\n+\n+## Breaking Changes\n+{% if breaking %}\n+{% for change in breaking %}\n+- {{ change }}\n+{% endfor %}\n+{% endif %}\n+\n+## Contributors\n+{% if contributors %}\n+{% for contributor in contributors %}\n+- {{ contributor }}\n+{% endfor %}\n+{% endif %}\n+`;\n+\n+// Dev diary template\n+export const DEV_DIARY_TEMPLATE = `\n+# Dev Diary - {{ date | default('now') | date('YYYY-MM-DD') }}\n+\n+## Today's Focus\n+{{ focus | default('Working on various tasks') }}\n+\n+## Completed\n+{% if completed %}\n+{% for item in completed %}\n+- {{ item }}\n+{% endfor %}\n+{% endif %}\n+\n+## In Progress\n+{% if inProgress %}\n+{% for item in inProgress %}\n+- {{ item }}\n+{% endfor %}\n+{% endif %}\n+\n+## Blockers\n+{% if blockers %}\n+{% for blocker in blockers %}\n+- {{ blocker }}\n+{% endfor %}\n+{% endif %}\n+\n+## Notes\n+{{ notes | default('No additional notes') }}\n+`;\n+\n+// Refinement template\n+export const REFINER_TEMPLATE = `\n+Refine the following {{ type | default('job') }} specification:\n+\n+**Original:**\n+{{ original | safe }}\n+\n+**Requirements:**\n+{{ requirements | default('Improve the specification') }}\n+\n+**Context:**\n+{{ context | default('No additional context') }}\n+\n+Provide an improved version that addresses the requirements while maintaining compatibility with GitVan v2.\n+`;\n"
                },
                {
                    "date": 1758072803590,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,183 +176,5 @@\n {{ context | default('No additional context') }}\n \n Provide an improved version that addresses the requirements while maintaining compatibility with GitVan v2.\n `;\n-/**\n- * GitVan v2 AI Prompt Templates - Nunjucks templates for AI generation\n- * Templates for generating jobs, events, and other GitVan artifacts\n- */\n \n-// Job writer template\n-export const JOB_WRITER_TEMPLATE = `\n-Emit ONLY valid ESM for a GitVan job module:\n-\n-import { defineJob } from \"gitvan/define\"\n-\n-export default defineJob({\n-  meta: { \n-    desc: \"{{ desc | default('Generated job') }}\", \n-    tags: {{ tags | default(\"[]\") | safe }}\n-  },\n-  {% if cron %}cron: \"{{ cron }}\",{% endif %}\n-  {% if on %}on: {{ on | safe }},{% endif %}\n-  async run({ ctx, payload }) {\n-    const { useGit } = await import(\"gitvan/composables/git\")\n-    const { useTemplate } = await import(\"gitvan/composables/template\")\n-    const git = useGit()\n-    const tpl = await useTemplate()\n-    \n-    {{ body | default(\"// TODO: implement\") }}\n-    \n-    return { ok: true, artifacts: [] }\n-  }\n-})\n-`;\n-\n-// Event writer template\n-export const EVENT_WRITER_TEMPLATE = `\n-Emit ONLY valid ESM for a GitVan event job module:\n-\n-import { defineJob } from \"gitvan/define\"\n-\n-export default defineJob({\n-  meta: { \n-    desc: \"{{ desc | default('Generated event job') }}\", \n-    tags: {{ tags | default(\"[]\") | safe }}\n-  },\n-  on: {{ on | safe }},\n-  async run({ ctx, payload, meta }) {\n-    const { useGit } = await import(\"gitvan/composables/git\")\n-    const { useTemplate } = await import(\"gitvan/composables/template\")\n-    const git = useGit()\n-    const tpl = await useTemplate()\n-    \n-    {{ body | default(\"// TODO: implement event handler\") }}\n-    \n-    return { ok: true, artifacts: [] }\n-  }\n-})\n-`;\n-\n-// Template generator template\n-export const TEMPLATE_GENERATOR_TEMPLATE = `\n-Generate a Nunjucks template for GitVan:\n-\n-{# {{ name | default('Generated Template') }} #}\n-{# Generated: {{ now | default('now') }} #}\n-\n-{{ content | default('<!-- TODO: implement template -->') }}\n-`;\n-\n-// Changelog template\n-export const CHANGELOG_TEMPLATE = `\n-# Changelog\n-\n-## {{ version | default('Unreleased') }} - {{ date | default('now') | date('YYYY-MM-DD') }}\n-\n-{% if commits %}\n-### Changes\n-{% for commit in commits %}\n-- {{ commit.message | truncate(80) }} ({{ commit.author }})\n-{% endfor %}\n-{% endif %}\n-\n-{% if features %}\n-### Features\n-{% for feature in features %}\n-- {{ feature }}\n-{% endfor %}\n-{% endif %}\n-\n-{% if fixes %}\n-### Fixes\n-{% for fix in fixes %}\n-- {{ fix }}\n-{% endfor %}\n-{% endif %}\n-`;\n-\n-// Release notes template\n-export const RELEASE_NOTES_TEMPLATE = `\n-# Release Notes - {{ version }}\n-\n-**Release Date:** {{ date | default('now') | date('YYYY-MM-DD') }}\n-\n-## Summary\n-{{ summary | default('This release includes various improvements and bug fixes.') }}\n-\n-## What's New\n-{% if features %}\n-{% for feature in features %}\n-- **{{ feature.title }}**: {{ feature.description }}\n-{% endfor %}\n-{% endif %}\n-\n-## Bug Fixes\n-{% if fixes %}\n-{% for fix in fixes %}\n-- {{ fix }}\n-{% endfor %}\n-{% endif %}\n-\n-## Breaking Changes\n-{% if breaking %}\n-{% for change in breaking %}\n-- {{ change }}\n-{% endfor %}\n-{% endif %}\n-\n-## Contributors\n-{% if contributors %}\n-{% for contributor in contributors %}\n-- {{ contributor }}\n-{% endfor %}\n-{% endif %}\n-`;\n-\n-// Dev diary template\n-export const DEV_DIARY_TEMPLATE = `\n-# Dev Diary - {{ date | default('now') | date('YYYY-MM-DD') }}\n-\n-## Today's Focus\n-{{ focus | default('Working on various tasks') }}\n-\n-## Completed\n-{% if completed %}\n-{% for item in completed %}\n-- {{ item }}\n-{% endfor %}\n-{% endif %}\n-\n-## In Progress\n-{% if inProgress %}\n-{% for item in inProgress %}\n-- {{ item }}\n-{% endfor %}\n-{% endif %}\n-\n-## Blockers\n-{% if blockers %}\n-{% for blocker in blockers %}\n-- {{ blocker }}\n-{% endfor %}\n-{% endif %}\n-\n-## Notes\n-{{ notes | default('No additional notes') }}\n-`;\n-\n-// Refinement template\n-export const REFINER_TEMPLATE = `\n-Refine the following {{ type | default('job') }} specification:\n-\n-**Original:**\n-{{ original | safe }}\n-\n-**Requirements:**\n-{{ requirements | default('Improve the specification') }}\n-\n-**Context:**\n-{{ context | default('No additional context') }}\n-\n-Provide an improved version that addresses the requirements while maintaining compatibility with GitVan v2.\n-`;\n"
                },
                {
                    "date": 1758077503384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,144 @@\n  * GitVan v2 AI Prompt Templates - Nunjucks templates for AI generation\n  * Templates for generating jobs, events, and other GitVan artifacts\n  */\n \n+// Enhanced verbose job writer template with comprehensive guidance\n+export const VERBOSE_JOB_WRITER_TEMPLATE = `\n+# GitVan Job Generator - Comprehensive Template\n+\n+You are an expert GitVan developer creating a production-ready job module. Follow these guidelines:\n+\n+## Context & Requirements\n+- **User Request**: \"{{ prompt }}\"\n+- **Job Type**: {{ kind | default('job') }}\n+- **Target**: {{ target | default('general automation') }}\n+\n+## GitVan Architecture Guidelines\n+\n+### 1. Job Structure\n+- Use \\`defineJob()\\` from \"gitvan/define\"\n+- Include comprehensive \\`meta\\` object with description and tags\n+- Implement proper error handling and logging\n+- Return structured results with \\`artifacts\\` array\n+\n+### 2. Available Composables\n+- **useGit()**: Git operations (commits, refs, notes, branches)\n+- **useTemplate()**: Nunjucks template rendering with front-matter\n+- **usePack()**: Pack system for reusable components\n+- **useJob()**: Job discovery and execution\n+- **useEvent()**: Event handling and scheduling\n+\n+### 3. Template System Integration\n+- Use \\`useTemplate()\\` for file generation with front-matter\n+- Support YAML, TOML, JSON front-matter formats\n+- Implement plan/apply lifecycle for safe operations\n+- Use path sandboxing for security\n+\n+### 4. Git Integration Best Practices\n+- Use atomic operations where possible\n+- Implement proper locking with Git refs\n+- Write receipts to Git notes for audit trails\n+- Handle Git errors gracefully\n+\n+### 5. Security & Safety\n+- Validate all inputs and paths\n+- Use allowlists for shell commands\n+- Implement idempotent operations\n+- Sandbox file operations to project root\n+\n+## Generated Job Template\n+\n+\\`\\`\\`javascript\n+import { defineJob } from \"gitvan/define\"\n+\n+export default defineJob({\n+  meta: { \n+    desc: \"{{ desc | default('Generated job') }}\", \n+    tags: {{ tags | default(\"[]\") | safe }},\n+    author: \"{{ author | default('GitVan AI') }}\",\n+    version: \"{{ version | default('1.0.0') }}\"\n+  },\n+  {% if cron %}cron: \"{{ cron }}\",{% endif %}\n+  {% if on %}on: {{ on | safe }},{% endif %}\n+  {% if schedule %}schedule: \"{{ schedule }}\",{% endif %}\n+  async run({ ctx, payload, meta }) {\n+    const { useGit } = await import(\"gitvan/composables/git\")\n+    const { useTemplate } = await import(\"gitvan/composables/template\")\n+    const { usePack } = await import(\"gitvan/composables/pack\")\n+    \n+    const git = useGit()\n+    const template = await useTemplate()\n+    const pack = await usePack()\n+    \n+    try {\n+      // Job implementation\n+      {{ body | default(\"// TODO: implement job logic\") }}\n+      \n+      return { \n+        ok: true, \n+        artifacts: [],\n+        summary: \"{{ summary | default('Job completed successfully') }}\"\n+      }\n+    } catch (error) {\n+      console.error('Job failed:', error.message)\n+      return { \n+        ok: false, \n+        error: error.message,\n+        artifacts: []\n+      }\n+    }\n+  }\n+})\n+\\`\\`\\`\n+\n+## Implementation Guidelines\n+\n+### Template Usage Examples\n+\\`\\`\\`javascript\n+// Generate files with front-matter\n+const plan = await template.plan('templates/component.njk', { name: 'MyComponent' })\n+const result = await template.apply(plan)\n+\n+// Render templates with data\n+const content = await template.render('templates/readme.njk', {\n+  project: { name: 'my-project', description: 'A great project' }\n+})\n+\\`\\`\\`\n+\n+### Git Operations Examples\n+\\`\\`\\`javascript\n+// Safe Git operations\n+const head = await git.head()\n+const commits = await git.log({ maxCount: 10 })\n+await git.noteAppend('refs/notes/gitvan/results', JSON.stringify(result))\n+\\`\\`\\`\n+\n+### Pack System Examples\n+\\`\\`\\`javascript\n+// Apply packs\n+const packResult = await pack.apply('react-component', {\n+  name: 'Button',\n+  props: ['variant', 'size']\n+})\n+\\`\\`\\`\n+\n+## Requirements for Generated Code\n+\n+1. **Complete Implementation**: Generate fully functional code, not TODOs\n+2. **Error Handling**: Include proper try/catch blocks and error returns\n+3. **Logging**: Add appropriate console.log statements for debugging\n+4. **Documentation**: Include JSDoc comments for complex functions\n+5. **Type Safety**: Use proper parameter destructuring and validation\n+6. **Git Integration**: Leverage Git composables for file operations\n+7. **Template Usage**: Use useTemplate() for file generation when appropriate\n+8. **Security**: Implement path validation and sandboxing\n+9. **Idempotency**: Ensure operations can be run multiple times safely\n+10. **Audit Trail**: Write receipts for important operations\n+\n+Generate a complete, production-ready job that follows all these guidelines.\n+`;\n+\n // Job writer template\n export const JOB_WRITER_TEMPLATE = `\n Emit ONLY valid ESM for a GitVan job module:\n \n@@ -176,5 +312,4 @@\n {{ context | default('No additional context') }}\n \n Provide an improved version that addresses the requirements while maintaining compatibility with GitVan v2.\n `;\n-\n"
                },
                {
                    "date": 1758077516174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,315 @@\n+/**\n+ * GitVan v2 AI Prompt Templates - Nunjucks templates for AI generation\n+ * Templates for generating jobs, events, and other GitVan artifacts\n+ */\n+\n+// Enhanced verbose job writer template with comprehensive guidance\n+export const VERBOSE_JOB_WRITER_TEMPLATE = `\n+# GitVan Job Generator - Comprehensive Template\n+\n+You are an expert GitVan developer creating a production-ready job module. Follow these guidelines:\n+\n+## Context & Requirements\n+- **User Request**: \"{{ prompt }}\"\n+- **Job Type**: {{ kind | default('job') }}\n+- **Target**: {{ target | default('general automation') }}\n+\n+## GitVan Architecture Guidelines\n+\n+### 1. Job Structure\n+- Use \\`defineJob()\\` from \"gitvan/define\"\n+- Include comprehensive \\`meta\\` object with description and tags\n+- Implement proper error handling and logging\n+- Return structured results with \\`artifacts\\` array\n+\n+### 2. Available Composables\n+- **useGit()**: Git operations (commits, refs, notes, branches)\n+- **useTemplate()**: Nunjucks template rendering with front-matter\n+- **usePack()**: Pack system for reusable components\n+- **useJob()**: Job discovery and execution\n+- **useEvent()**: Event handling and scheduling\n+\n+### 3. Template System Integration\n+- Use \\`useTemplate()\\` for file generation with front-matter\n+- Support YAML, TOML, JSON front-matter formats\n+- Implement plan/apply lifecycle for safe operations\n+- Use path sandboxing for security\n+\n+### 4. Git Integration Best Practices\n+- Use atomic operations where possible\n+- Implement proper locking with Git refs\n+- Write receipts to Git notes for audit trails\n+- Handle Git errors gracefully\n+\n+### 5. Security & Safety\n+- Validate all inputs and paths\n+- Use allowlists for shell commands\n+- Implement idempotent operations\n+- Sandbox file operations to project root\n+\n+## Generated Job Template\n+\n+\\`\\`\\`javascript\n+import { defineJob } from \"gitvan/define\"\n+\n+export default defineJob({\n+  meta: { \n+    desc: \"{{ desc | default('Generated job') }}\", \n+    tags: {{ tags | default(\"[]\") | safe }},\n+    author: \"{{ author | default('GitVan AI') }}\",\n+    version: \"{{ version | default('1.0.0') }}\"\n+  },\n+  {% if cron %}cron: \"{{ cron }}\",{% endif %}\n+  {% if on %}on: {{ on | safe }},{% endif %}\n+  {% if schedule %}schedule: \"{{ schedule }}\",{% endif %}\n+  async run({ ctx, payload, meta }) {\n+    const { useGit } = await import(\"gitvan/composables/git\")\n+    const { useTemplate } = await import(\"gitvan/composables/template\")\n+    const { usePack } = await import(\"gitvan/composables/pack\")\n+    \n+    const git = useGit()\n+    const template = await useTemplate()\n+    const pack = await usePack()\n+    \n+    try {\n+      // Job implementation\n+      {{ body | default(\"// TODO: implement job logic\") }}\n+      \n+      return { \n+        ok: true, \n+        artifacts: [],\n+        summary: \"{{ summary | default('Job completed successfully') }}\"\n+      }\n+    } catch (error) {\n+      console.error('Job failed:', error.message)\n+      return { \n+        ok: false, \n+        error: error.message,\n+        artifacts: []\n+      }\n+    }\n+  }\n+})\n+\\`\\`\\`\n+\n+## Implementation Guidelines\n+\n+### Template Usage Examples\n+\\`\\`\\`javascript\n+// Generate files with front-matter\n+const plan = await template.plan('templates/component.njk', { name: 'MyComponent' })\n+const result = await template.apply(plan)\n+\n+// Render templates with data\n+const content = await template.render('templates/readme.njk', {\n+  project: { name: 'my-project', description: 'A great project' }\n+})\n+\\`\\`\\`\n+\n+### Git Operations Examples\n+\\`\\`\\`javascript\n+// Safe Git operations\n+const head = await git.head()\n+const commits = await git.log({ maxCount: 10 })\n+await git.noteAppend('refs/notes/gitvan/results', JSON.stringify(result))\n+\\`\\`\\`\n+\n+### Pack System Examples\n+\\`\\`\\`javascript\n+// Apply packs\n+const packResult = await pack.apply('react-component', {\n+  name: 'Button',\n+  props: ['variant', 'size']\n+})\n+\\`\\`\\`\n+\n+## Requirements for Generated Code\n+\n+1. **Complete Implementation**: Generate fully functional code, not TODOs\n+2. **Error Handling**: Include proper try/catch blocks and error returns\n+3. **Logging**: Add appropriate console.log statements for debugging\n+4. **Documentation**: Include JSDoc comments for complex functions\n+5. **Type Safety**: Use proper parameter destructuring and validation\n+6. **Git Integration**: Leverage Git composables for file operations\n+7. **Template Usage**: Use useTemplate() for file generation when appropriate\n+8. **Security**: Implement path validation and sandboxing\n+9. **Idempotency**: Ensure operations can be run multiple times safely\n+10. **Audit Trail**: Write receipts for important operations\n+\n+Generate a complete, production-ready job that follows all these guidelines.\n+`;\n+\n+// Job writer template\n+export const JOB_WRITER_TEMPLATE = `\n+Emit ONLY valid ESM for a GitVan job module:\n+\n+import { defineJob } from \"gitvan/define\"\n+\n+export default defineJob({\n+  meta: { \n+    desc: \"{{ desc | default('Generated job') }}\", \n+    tags: {{ tags | default(\"[]\") | safe }}\n+  },\n+  {% if cron %}cron: \"{{ cron }}\",{% endif %}\n+  {% if on %}on: {{ on | safe }},{% endif %}\n+  async run({ ctx, payload }) {\n+    const { useGit } = await import(\"gitvan/composables/git\")\n+    const { useTemplate } = await import(\"gitvan/composables/template\")\n+    const git = useGit()\n+    const tpl = await useTemplate()\n+    \n+    {{ body | default(\"// TODO: implement\") }}\n+    \n+    return { ok: true, artifacts: [] }\n+  }\n+})\n+`;\n+\n+// Event writer template\n+export const EVENT_WRITER_TEMPLATE = `\n+Emit ONLY valid ESM for a GitVan event job module:\n+\n+import { defineJob } from \"gitvan/define\"\n+\n+export default defineJob({\n+  meta: { \n+    desc: \"{{ desc | default('Generated event job') }}\", \n+    tags: {{ tags | default(\"[]\") | safe }}\n+  },\n+  on: {{ on | safe }},\n+  async run({ ctx, payload, meta }) {\n+    const { useGit } = await import(\"gitvan/composables/git\")\n+    const { useTemplate } = await import(\"gitvan/composables/template\")\n+    const git = useGit()\n+    const tpl = await useTemplate()\n+    \n+    {{ body | default(\"// TODO: implement event handler\") }}\n+    \n+    return { ok: true, artifacts: [] }\n+  }\n+})\n+`;\n+\n+// Template generator template\n+export const TEMPLATE_GENERATOR_TEMPLATE = `\n+Generate a Nunjucks template for GitVan:\n+\n+{# {{ name | default('Generated Template') }} #}\n+{# Generated: {{ now | default('now') }} #}\n+\n+{{ content | default('<!-- TODO: implement template -->') }}\n+`;\n+\n+// Changelog template\n+export const CHANGELOG_TEMPLATE = `\n+# Changelog\n+\n+## {{ version | default('Unreleased') }} - {{ date | default('now') | date('YYYY-MM-DD') }}\n+\n+{% if commits %}\n+### Changes\n+{% for commit in commits %}\n+- {{ commit.message | truncate(80) }} ({{ commit.author }})\n+{% endfor %}\n+{% endif %}\n+\n+{% if features %}\n+### Features\n+{% for feature in features %}\n+- {{ feature }}\n+{% endfor %}\n+{% endif %}\n+\n+{% if fixes %}\n+### Fixes\n+{% for fix in fixes %}\n+- {{ fix }}\n+{% endfor %}\n+{% endif %}\n+`;\n+\n+// Release notes template\n+export const RELEASE_NOTES_TEMPLATE = `\n+# Release Notes - {{ version }}\n+\n+**Release Date:** {{ date | default('now') | date('YYYY-MM-DD') }}\n+\n+## Summary\n+{{ summary | default('This release includes various improvements and bug fixes.') }}\n+\n+## What's New\n+{% if features %}\n+{% for feature in features %}\n+- **{{ feature.title }}**: {{ feature.description }}\n+{% endfor %}\n+{% endif %}\n+\n+## Bug Fixes\n+{% if fixes %}\n+{% for fix in fixes %}\n+- {{ fix }}\n+{% endfor %}\n+{% endif %}\n+\n+## Breaking Changes\n+{% if breaking %}\n+{% for change in breaking %}\n+- {{ change }}\n+{% endfor %}\n+{% endif %}\n+\n+## Contributors\n+{% if contributors %}\n+{% for contributor in contributors %}\n+- {{ contributor }}\n+{% endfor %}\n+{% endif %}\n+`;\n+\n+// Dev diary template\n+export const DEV_DIARY_TEMPLATE = `\n+# Dev Diary - {{ date | default('now') | date('YYYY-MM-DD') }}\n+\n+## Today's Focus\n+{{ focus | default('Working on various tasks') }}\n+\n+## Completed\n+{% if completed %}\n+{% for item in completed %}\n+- {{ item }}\n+{% endfor %}\n+{% endif %}\n+\n+## In Progress\n+{% if inProgress %}\n+{% for item in inProgress %}\n+- {{ item }}\n+{% endfor %}\n+{% endif %}\n+\n+## Blockers\n+{% if blockers %}\n+{% for blocker in blockers %}\n+- {{ blocker }}\n+{% endfor %}\n+{% endif %}\n+\n+## Notes\n+{{ notes | default('No additional notes') }}\n+`;\n+\n+// Refinement template\n+export const REFINER_TEMPLATE = `\n+Refine the following {{ type | default('job') }} specification:\n+\n+**Original:**\n+{{ original | safe }}\n+\n+**Requirements:**\n+{{ requirements | default('Improve the specification') }}\n+\n+**Context:**\n+{{ context | default('No additional context') }}\n+\n+Provide an improved version that addresses the requirements while maintaining compatibility with GitVan v2.\n+`;\n"
                }
            ],
            "date": 1758057329104,
            "name": "Commit-0",
            "content": "/**\n * GitVan v2 AI Prompt Templates - Nunjucks templates for AI generation\n * Templates for generating jobs, events, and other GitVan artifacts\n */\n\n// Job writer template\nexport const JOB_WRITER_TEMPLATE = `\nEmit ONLY valid ESM for a GitVan job module:\n\nimport { defineJob } from \"gitvan/define\"\n\nexport default defineJob({\n  meta: { \n    desc: \"{{ desc | default('Generated job') }}\", \n    tags: {{ tags | default(\"[]\") | safe }}\n  },\n  {% if cron %}cron: \"{{ cron }}\",{% endif %}\n  {% if on %}on: {{ on | safe }},{% endif %}\n  async run({ ctx, payload }) {\n    const { useGit } = await import(\"gitvan/composables/git\")\n    const { useTemplate } = await import(\"gitvan/composables/template\")\n    const git = useGit()\n    const tpl = await useTemplate()\n    \n    {{ body | default(\"// TODO: implement\") }}\n    \n    return { ok: true, artifacts: [] }\n  }\n})\n`;\n\n// Event writer template\nexport const EVENT_WRITER_TEMPLATE = `\nEmit ONLY valid ESM for a GitVan event job module:\n\nimport { defineJob } from \"gitvan/define\"\n\nexport default defineJob({\n  meta: { \n    desc: \"{{ desc | default('Generated event job') }}\", \n    tags: {{ tags | default(\"[]\") | safe }}\n  },\n  on: {{ on | safe }},\n  async run({ ctx, payload, meta }) {\n    const { useGit } = await import(\"gitvan/composables/git\")\n    const { useTemplate } = await import(\"gitvan/composables/template\")\n    const git = useGit()\n    const tpl = await useTemplate()\n    \n    {{ body | default(\"// TODO: implement event handler\") }}\n    \n    return { ok: true, artifacts: [] }\n  }\n})\n`;\n\n// Template generator template\nexport const TEMPLATE_GENERATOR_TEMPLATE = `\nGenerate a Nunjucks template for GitVan:\n\n{# {{ name | default('Generated Template') }} #}\n{# Generated: {{ now | default('now') }} #}\n\n{{ content | default('<!-- TODO: implement template -->') }}\n`;\n\n// Changelog template\nexport const CHANGELOG_TEMPLATE = `\n# Changelog\n\n## {{ version | default('Unreleased') }} - {{ date | default('now') | date('YYYY-MM-DD') }}\n\n{% if commits %}\n### Changes\n{% for commit in commits %}\n- {{ commit.message | truncate(80) }} ({{ commit.author }})\n{% endfor %}\n{% endif %}\n\n{% if features %}\n### Features\n{% for feature in features %}\n- {{ feature }}\n{% endfor %}\n{% endif %}\n\n{% if fixes %}\n### Fixes\n{% for fix in fixes %}\n- {{ fix }}\n{% endfor %}\n{% endif %}\n`;\n\n// Release notes template\nexport const RELEASE_NOTES_TEMPLATE = `\n# Release Notes - {{ version }}\n\n**Release Date:** {{ date | default('now') | date('YYYY-MM-DD') }}\n\n## Summary\n{{ summary | default('This release includes various improvements and bug fixes.') }}\n\n## What's New\n{% if features %}\n{% for feature in features %}\n- **{{ feature.title }}**: {{ feature.description }}\n{% endfor %}\n{% endif %}\n\n## Bug Fixes\n{% if fixes %}\n{% for fix in fixes %}\n- {{ fix }}\n{% endfor %}\n{% endif %}\n\n## Breaking Changes\n{% if breaking %}\n{% for change in breaking %}\n- {{ change }}\n{% endfor %}\n{% endif %}\n\n## Contributors\n{% if contributors %}\n{% for contributor in contributors %}\n- {{ contributor }}\n{% endfor %}\n{% endif %}\n`;\n\n// Dev diary template\nexport const DEV_DIARY_TEMPLATE = `\n# Dev Diary - {{ date | default('now') | date('YYYY-MM-DD') }}\n\n## Today's Focus\n{{ focus | default('Working on various tasks') }}\n\n## Completed\n{% if completed %}\n{% for item in completed %}\n- {{ item }}\n{% endfor %}\n{% endif %}\n\n## In Progress\n{% if inProgress %}\n{% for item in inProgress %}\n- {{ item }}\n{% endfor %}\n{% endif %}\n\n## Blockers\n{% if blockers %}\n{% for blocker in blockers %}\n- {{ blocker }}\n{% endfor %}\n{% endif %}\n\n## Notes\n{{ notes | default('No additional notes') }}\n`;\n\n// Refinement template\nexport const REFINER_TEMPLATE = `\nRefine the following {{ type | default('job') }} specification:\n\n**Original:**\n{{ original | safe }}\n\n**Requirements:**\n{{ requirements | default('Improve the specification') }}\n\n**Context:**\n{{ context | default('No additional context') }}\n\nProvide an improved version that addresses the requirements while maintaining compatibility with GitVan v2.\n`;\n"
        }
    ]
}