{
    "sourceFile": "tests/e2e/cron-cli.test.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758072623002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758072623002,
            "name": "Commit-0",
            "content": "// tests/e2e/cron-cli.test.mjs\n// End-to-end tests for GitVan v2 Cron CLI commands\n// Tests against the playground environment\n\nimport { describe, it, expect, beforeEach, afterEach } from \"vitest\";\nimport { spawn } from \"node:child_process\";\nimport { promises as fs } from \"node:fs\";\nimport { join } from \"pathe\";\nimport { fileURLToPath } from \"node:url\";\n\nconst __dirname = fileURLToPath(new URL(\".\", import.meta.url));\nconst playgroundDir = join(__dirname, \"../../playground\");\nconst gitvanCli = join(__dirname, \"../../src/cli.mjs\");\n\ndescribe(\"Cron CLI E2E Tests\", () => {\n  let originalCwd;\n  let tempDir;\n\n  beforeEach(async () => {\n    originalCwd = process.cwd();\n    tempDir = join(playgroundDir, \"test-cron-temp\");\n    await fs.mkdir(tempDir, { recursive: true });\n  });\n\n  afterEach(async () => {\n    process.chdir(originalCwd);\n    try {\n      await fs.rm(tempDir, { recursive: true, force: true });\n    } catch {\n      // Ignore cleanup errors\n    }\n  });\n\n  // Helper function to run CLI commands\n  async function runCliCommand(args, options = {}) {\n    return new Promise((resolve, reject) => {\n      const child = spawn(\"node\", [gitvanCli, ...args], {\n        cwd: playgroundDir,\n        stdio: [\"pipe\", \"pipe\", \"pipe\"],\n        ...options,\n      });\n\n      let stdout = \"\";\n      let stderr = \"\";\n\n      child.stdout.on(\"data\", (data) => {\n        stdout += data.toString();\n      });\n\n      child.stderr.on(\"data\", (data) => {\n        stderr += data.toString();\n      });\n\n      child.on(\"close\", (code) => {\n        resolve({\n          code,\n          stdout: stdout.trim(),\n          stderr: stderr.trim(),\n        });\n      });\n\n      child.on(\"error\", (error) => {\n        reject(error);\n      });\n    });\n  }\n\n  describe(\"cron list command\", () => {\n    it(\"should list cron jobs in the playground\", async () => {\n      const result = await runCliCommand([\"cron\", \"list\"]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"cron job\");\n    });\n\n    it(\"should show detailed cron job information\", async () => {\n      const result = await runCliCommand([\"cron\", \"list\"]);\n\n      expect(result.code).toBe(0);\n      // Should show cron expressions and job details\n      expect(result.stdout).toMatch(/cron|schedule|job/i);\n    });\n\n    it(\"should handle empty cron job lists\", async () => {\n      // Test in a directory with no cron jobs\n      const result = await runCliCommand([\"cron\", \"list\"], {\n        cwd: tempDir,\n      });\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"No cron jobs found\");\n    });\n  });\n\n  describe(\"cron start command\", () => {\n    it(\"should start cron scheduler\", async () => {\n      const result = await runCliCommand([\"cron\", \"start\"]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Cron scheduler\");\n    });\n\n    it(\"should handle cron scheduler startup errors\", async () => {\n      // Test with invalid configuration\n      const result = await runCliCommand([\"cron\", \"start\"], {\n        cwd: tempDir,\n      });\n\n      // Should either succeed or fail gracefully\n      expect(result.code).toBeDefined();\n    });\n  });\n\n  describe(\"cron dry-run command\", () => {\n    it(\"should perform dry run of cron jobs\", async () => {\n      const result = await runCliCommand([\"cron\", \"dry-run\"]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Dry run\");\n    });\n\n    it(\"should show what would be executed\", async () => {\n      const result = await runCliCommand([\"cron\", \"dry-run\"]);\n\n      expect(result.code).toBe(0);\n      // Should show job names or execution plan\n      expect(result.stdout.length).toBeGreaterThan(0);\n    });\n  });\n\n  describe(\"cron status command\", () => {\n    it(\"should show cron scheduler status\", async () => {\n      const result = await runCliCommand([\"cron\", \"status\"]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Cron Scheduler Status\");\n    });\n\n    it(\"should indicate if scheduler is running\", async () => {\n      const result = await runCliCommand([\"cron\", \"status\"]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toMatch(/running|stopped|status/i);\n    });\n  });\n\n  describe(\"cron command error handling\", () => {\n    it(\"should handle invalid cron subcommands\", async () => {\n      const result = await runCliCommand([\"cron\", \"invalid\"]);\n\n      expect(result.code).toBe(1);\n      expect(result.stderr).toContain(\"Unknown cron command\");\n    });\n\n    it(\"should provide help for cron commands\", async () => {\n      const result = await runCliCommand([\"cron\", \"help\"]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Cron Commands:\");\n    });\n  });\n});\n"
        }
    ]
}