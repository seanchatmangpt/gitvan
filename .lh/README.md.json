{
    "sourceFile": "README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1758042393509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758053986045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n # GitVan v2\n \n-**Git-Native Automation with Composables and Templates**\n+**Git-Native Development Automation Platform**\n \n-GitVan v2 is a lean, single-package JavaScript solution that transforms your Git repository into an intelligent automation platform. Built with modern composables, Nunjucks templates, and Git-native storage, it provides zero-configuration workflow automation with Vue-inspired ergonomics.\n+GitVan v2 is a comprehensive Git-native automation platform that transforms your Git repository into an intelligent development environment. Built with modern composables, Nunjucks templates, and Git-native storage, it provides zero-configuration workflow automation with Vue-inspired ergonomics.\n \n ## 🚀 Quick Start\n \n ```bash\n@@ -13,9 +13,9 @@\n # Navigate to your Git repository\n cd your-project\n \n # Run a job\n-gitvan run docs:changelog\n+gitvan job run docs:changelog\n \n # Start the daemon for continuous automation\n gitvan daemon start\n ```\n@@ -26,15 +26,20 @@\n - **Vue-inspired ergonomics** with `useGit()`, `useTemplate()`, `useExec()`\n - **Automatic dependency injection** using unctx\n - **Context isolation** for concurrent execution\n \n-### 📝 **Five Execution Types**\n-- **`cli`** - Shell command execution with environment control\n-- **`js`** - JavaScript module execution with import resolution  \n-- **`llm`** - Language model integration (Ollama, OpenAI, etc.)\n-- **`job`** - Recursive job execution for composition\n-- **`tmpl`** - Nunjucks template rendering with Git context\n+### 🔄 **Git-Native Job System**\n+- **Filesystem discovery** of jobs in `jobs/` directory\n+- **Multiple job types**: on-demand, cron, event-driven\n+- **Atomic execution** with Git refs for locking\n+- **Auditable receipts** stored in Git notes\n \n+### 📝 **Advanced Template System**\n+- **Nunjucks templates** with Git context injection\n+- **Inflection filters** for string transformations\n+- **Deterministic rendering** with cached environments\n+- **File and string output** support\n+\n ### 🌳 **Git-Native Storage**\n - **Git refs** for distributed locking across worktrees\n - **Git notes** for execution metadata and receipts\n - **No external databases** - everything stored in Git\n@@ -53,18 +58,25 @@\n ├── composables/          # Vue-inspired composables API\n │   ├── ctx.mjs          # Context management (unctx)\n │   ├── git.mjs          # Git operations composable\n │   ├── template.mjs     # Nunjucks template composable\n-│   ├── exec.mjs         # Execution composable\n │   └── index.mjs        # Composable exports\n-├── runtime/              # Core runtime engine\n-│   ├── boot.mjs         # Context bootstrapping\n+├── jobs/                 # Job system implementation\n │   ├── define.mjs       # Job definition system\n-│   ├── daemon.mjs       # Worktree-scoped daemon\n-│   ├── events.mjs       # Event discovery and routing\n-│   ├── locks.mjs        # Distributed locking\n-│   └── receipt.mjs      # Execution receipts\n-└── cli.mjs              # Command-line interface\n+│   ├── scan.mjs         # Filesystem job discovery\n+│   ├── runner.mjs       # Job execution engine\n+│   ├── cron.mjs         # Cron scheduler\n+│   ├── events.mjs       # Event-driven jobs\n+│   ├── daemon.mjs       # Background daemon\n+│   └── hooks.mjs        # Lifecycle hooks\n+├── config/               # Configuration system\n+│   ├── defaults.mjs     # Default configuration\n+│   ├── loader.mjs      # Configuration loading\n+│   └── runtime-config.mjs # Runtime normalization\n+├── utils/                # Utility functions\n+│   └── nunjucks-config.mjs # Template configuration\n+└── cli/                  # Command-line interface\n+    └── job.mjs          # Job management commands\n ```\n \n ## 📦 Installation\n \n@@ -95,96 +107,122 @@\n ```\n \n ## 🎮 Usage\n \n-### Basic Job Execution\n+### Job Management\n \n ```bash\n+# List available jobs\n+gitvan job list\n+\n # Run a specific job\n-gitvan run docs:changelog\n+gitvan job run docs:changelog\n \n-# List available jobs\n-gitvan list\n+# Run job with payload\n+gitvan job run foundation:template-greeting --payload '{\"custom\": \"value\"}'\n+\n+# Show job details\n+gitvan job show docs:changelog\n+\n+# Plan job execution (dry run)\n+gitvan job plan docs:changelog\n ```\n \n ### Daemon Management\n \n ```bash\n # Start daemon for current worktree\n gitvan daemon start\n \n-# Start daemon for all worktrees\n-gitvan daemon start --worktrees all\n-\n # Check daemon status\n gitvan daemon status\n \n # Stop daemon\n gitvan daemon stop\n+\n+# View daemon statistics\n+gitvan daemon stats\n ```\n \n-### Event Discovery\n+### Lock Management\n \n ```bash\n-# List discovered events\n-gitvan event list\n+# List active job locks\n+gitvan job locks\n \n-# List all worktrees\n-gitvan worktree list\n+# Unlock a specific job\n+gitvan job unlock docs:changelog\n ```\n \n ## 🔧 Job Definition\n \n Jobs are defined using the `defineJob()` pattern with composables:\n \n ```javascript\n // jobs/docs/changelog.mjs\n-import { defineJob } from '../../src/runtime/define.mjs'\n-import { useGit } from '../../src/composables/git.mjs'\n-import { useTemplate } from '../../src/composables/template.mjs'\n+import { defineJob } from \"gitvan/define\";\n+import { useGit } from \"gitvan/useGit\";\n+import { useTemplate } from \"gitvan/useTemplate\";\n \n export default defineJob({\n-  kind: 'atomic',\n   meta: { \n-    desc: 'Generate CHANGELOG.md', \n-    schedule: '0 3 * * *' \n+    desc: \"Generate CHANGELOG.md from git log\",\n+    tags: [\"documentation\", \"changelog\"]\n   },\n-  async run() {\n-    const git = useGit()\n-    const t = useTemplate()\n+  async run({ ctx, payload }) {\n+    const git = useGit();\n+    const template = await useTemplate();\n     \n-    const commits = git.run('log --pretty=%h%x09%s -n 50').split('\\n')\n-    t.renderToFile('templates/changelog.njk', 'dist/CHANGELOG.md', { commits })\n+    // Get commits\n+    const logOutput = await git.log(\"%h%x09%s\", [\"-n\", \"50\"]);\n+    const commits = logOutput.split(\"\\n\").filter(Boolean);\n     \n-    return { ok: true, artifact: 'dist/CHANGELOG.md' }\n+    // Render template to file\n+    const outputPath = await template.renderToFile(\n+      \"changelog.njk\",\n+      \"dist/CHANGELOG.md\",\n+      { commits, generatedAt: ctx.nowISO }\n+    );\n+    \n+    return {\n+      ok: true,\n+      artifacts: [outputPath]\n+    };\n   }\n-})\n+});\n ```\n \n ### Job Types\n \n-- **`atomic`** - Single execution unit\n-- **`composite`** - Multiple steps with dependencies\n-- **`sequence`** - Sequential execution\n-- **`parallel`** - Concurrent execution\n+- **On-demand** - Manual execution via CLI\n+- **Cron** - Scheduled execution (`.cron.mjs` suffix)\n+- **Event-driven** - Triggered by Git events (`.evt.mjs` suffix)\n \n ## 🎨 Template System\n \n GitVan includes first-class Nunjucks template support with Git context injection:\n \n ```njk\n <!-- templates/changelog.njk -->\n # Changelog\n-Generated: {{ nowISO }}\n \n-{% for line in commits %}\n-- {{ line }}\n+Generated at: {{ generatedAt }}\n+Total commits: {{ commits.length }}\n+\n+## Recent Changes\n+\n+{% for commit in commits %}\n+- **{{ commit.split('\\t')[0] }}** {{ commit.split('\\t')[1] }}\n {% endfor %}\n+\n+---\n+*Generated by GitVan Jobs System*\n ```\n \n ### Template Features\n-- **Git context injection** - `{{ git.branch() }}`, `{{ git.head() }}`\n-- **Deterministic helpers** - `{{ nowISO }}`, `{{ formatDate() }}`\n+- **Git context injection** - Access to repository information\n+- **Inflection filters** - `titleize`, `camelize`, `underscore`, etc.\n+- **Deterministic helpers** - `nowISO`, `formatDate()`\n - **File output** - Render directly to files\n - **Include/extends** - Full Nunjucks functionality\n \n ## ⚙️ Configuration\n@@ -193,85 +231,103 @@\n \n ```javascript\n export default {\n   // Repository settings\n-  repo: {\n-    defaultBranch: \"main\",\n-    notesRef: \"refs/notes/gitvan\",\n-    signing: { require: true }\n+  root: process.cwd(),\n+  \n+  // Job configuration\n+  jobs: {\n+    dir: \"jobs\"\n   },\n-\n-  // LLM configuration\n-  llm: {\n-    baseURL: \"http://localhost:11434\", // Ollama\n-    model: \"llama3.2\",\n-    temperature: 0.2\n+  \n+  // Template configuration\n+  templates: {\n+    engine: \"nunjucks\",\n+    dirs: [\"templates\"]\n   },\n-\n-  // Event-driven automation\n-  events: [\n-    {\n-      id: \"daily-summary\",\n-      workflow: \"cron\",\n-      schedule: \"0 18 * * *\",\n-      run: { type: \"cookbook\", recipe: \"dev-diary\" }\n+  \n+  // Receipts configuration\n+  receipts: {\n+    ref: \"refs/notes/gitvan/results\"\n+  },\n+  \n+  // Custom hooks\n+  hooks: {\n+    \"job:after\": (payload, result) => {\n+      console.log(`Job completed: ${payload.jobId}`);\n     }\n-  ]\n-}\n+  }\n+};\n ```\n \n ## 🔌 Composables API\n \n ### `useGit()`\n ```javascript\n-const git = useGit()\n-git.run('log --oneline -10')        // Execute git command\n-git.branch()                        // Current branch\n-git.head()                          // Current HEAD\n-git.note('refs/notes/test', 'msg')  // Add git note\n+const git = useGit();\n+\n+// Basic Git operations\n+await git.run(\"log --oneline -10\");\n+await git.head();                    // Current HEAD\n+await git.getCurrentBranch();        // Current branch\n+await git.isClean();                 // Working directory status\n+\n+// Git notes\n+await git.noteAdd(\"refs/notes/test\", \"message\");\n+await git.noteShow(\"refs/notes/test\");\n+\n+// Atomic operations\n+await git.updateRefCreate(\"refs/gitvan/lock/job-id\", commitSha);\n ```\n \n ### `useTemplate()`\n ```javascript\n-const t = useTemplate()\n-t.render('template.njk', { data })           // Render to string\n-t.renderToFile('template.njk', 'out.md', {}) // Render to file\n-```\n+const template = await useTemplate();\n \n-### `useExec()`\n-```javascript\n-const exec = useExec()\n-exec.cli('npm', ['test'])                    // CLI execution\n-exec.js('./script.mjs', 'default', {})       // JS execution\n-exec.tmpl({ template: 'test.njk', data: {} }) // Template execution\n+// Render to string\n+const html = await template.renderString(\"Hello {{ name }}!\", { name: \"World\" });\n+\n+// Render to file\n+const outputPath = await template.renderToFile(\n+  \"template.njk\",\n+  \"dist/output.html\",\n+  { data: \"value\" }\n+);\n ```\n \n ## 🎯 Event System\n \n-GitVan discovers events through file system conventions:\n+GitVan supports event-driven jobs with Git-native predicates:\n \n-```\n-events/\n-├── cron/\n-│   └── 0_9_*_*_*.mjs          # Daily at 9 AM\n-├── merge-to/\n-│   └── main.mjs               # On merge to main\n-├── push-to/\n-│   └── feature/*.mjs          # On push to feature/*\n-└── message/\n-    └── release.mjs            # On commit message \"release\"\n-```\n+```javascript\n+// jobs/alerts/release.evt.mjs\n+import { defineJob } from \"gitvan/define\";\n \n-### Event Handler Example\n-```javascript\n-// events/merge-to/main.mjs\n-export default async function handler({ payload, git, meta }) {\n-  const git = useGit()\n-  // Deploy to production\n-  return { ok: true, action: 'deploy' }\n-}\n+export default defineJob({\n+  meta: {\n+    desc: \"Notify on new releases\",\n+    tags: [\"alerts\", \"releases\"]\n+  },\n+  on: {\n+    any: [\n+      { tagCreate: true },\n+      { semverTag: true }\n+    ]\n+  },\n+  async run({ ctx, payload }) {\n+    // Handle release notification\n+    return { ok: true };\n+  }\n+});\n ```\n \n+### Event Predicates\n+- **`tagCreate`** - New tag created\n+- **`semverTag`** - Semantic version tag\n+- **`branchCreate`** - New branch created\n+- **`mergeTo`** - Merge to specific branch\n+- **`pushTo`** - Push to specific branch pattern\n+\n ## 🚀 Performance\n \n GitVan v2 is optimized for speed and efficiency:\n \n@@ -290,28 +346,74 @@\n - **Worktree isolation** prevents cross-contamination\n \n ## 📚 Documentation\n \n-- **[Specifications](./specs/)** - Complete system specifications\n-- **[API Contracts](./specs/docs/API_CONTRACTS.md)** - Detailed API documentation\n-- **[Architecture Decisions](./specs/docs/ARCHITECTURE_DECISIONS.md)** - Design rationale\n-- **[Implementation Guide](./specs/docs/IMPLEMENTATION_GUIDE.md)** - Development guide\n+### Core Documentation\n+- **[Playground Guide](./docs/playground/)** - Complete developer guide for the playground application\n+- **[Cookbook](./docs/cookbook/)** - Practical recipes and patterns for common use cases\n \n+### Playground Documentation\n+- **[Playground README](./docs/playground/README.md)** - Main developer guide\n+- **[Job Examples](./docs/playground/job-examples.md)** - Detailed job examples and patterns\n+- **[Testing Guide](./docs/playground/testing-guide.md)** - Testing strategies and best practices\n+- **[Architecture Guide](./docs/playground/architecture-guide.md)** - System architecture overview\n+- **[Troubleshooting Guide](./docs/playground/troubleshooting-guide.md)** - Common issues and solutions\n+\n+### Cookbook Recipes\n+- **[Foundation Recipes](./docs/cookbook/foundation/)** - Basic job setup, configuration, templates, error handling\n+- **[Documentation Recipes](./docs/cookbook/documentation/)** - Changelog generation, documentation automation\n+- **[CI/CD Recipes](./docs/cookbook/cicd/)** - Build automation, deployment workflows\n+\n+### API Reference\n+- **[Composables API](./src/composables/)** - `useGit`, `useTemplate`, context management\n+- **[Job System API](./src/jobs/)** - Job definition, execution, scheduling\n+- **[Configuration API](./src/config/)** - Configuration loading and normalization\n+\n ## 🧪 Testing\n \n ```bash\n # Run all tests\n pnpm test\n \n # Run specific test suites\n pnpm test composables\n-pnpm test runtime\n-pnpm test cli\n+pnpm test jobs\n+pnpm test config\n \n+# Run E2E tests\n+pnpm test playground-e2e\n+pnpm test playground-cookbook-e2e\n+\n # Run with coverage\n pnpm test --coverage\n ```\n \n+## 🎮 Playground\n+\n+The GitVan playground is a self-contained example application that demonstrates all features:\n+\n+```bash\n+# Navigate to playground\n+cd playground\n+\n+# Install dependencies\n+pnpm install\n+\n+# Start development mode\n+pnpm dev\n+\n+# Run specific jobs\n+pnpm run:changelog\n+pnpm run:simple\n+```\n+\n+The playground includes:\n+- **Foundation jobs** - Basic setup, file output, templates, error handling\n+- **Documentation jobs** - Advanced changelog generation\n+- **CI/CD jobs** - Build automation workflows\n+- **Event-driven jobs** - Release notifications\n+- **Comprehensive E2E tests** - Full system validation\n+\n ## 🤝 Contributing\n \n We welcome contributions! Please see our [Contributing Guide](./CONTRIBUTING.md) for details.\n \n@@ -341,8 +443,9 @@\n - **Vue.js** for the composables pattern\n - **Git** for the powerful foundation\n - **Nunjucks** for template rendering\n - **unctx** for context management\n+- **Nitro** for configuration patterns\n \n ---\n \n **Transform your Git workflow with intelligent automation. Start with GitVan v2 today!**\n\\ No newline at end of file\n"
                },
                {
                    "date": 1758054695916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n # GitVan v2\n \n-**Git-Native Development Automation Platform**\n+**Git-Native Job System with Composables**\n \n-GitVan v2 is a comprehensive Git-native automation platform that transforms your Git repository into an intelligent development environment. Built with modern composables, Nunjucks templates, and Git-native storage, it provides zero-configuration workflow automation with Vue-inspired ergonomics.\n+GitVan v2 is a Git-native job system that transforms your Git repository into an intelligent automation platform. Built with modern composables, Nunjucks templates, and Git-native storage, it provides zero-configuration workflow automation with Vue-inspired ergonomics.\n \n ## 🚀 Quick Start\n \n ```bash\n@@ -13,18 +13,18 @@\n # Navigate to your Git repository\n cd your-project\n \n # Run a job\n-gitvan job run docs:changelog\n+gitvan run docs:changelog\n \n # Start the daemon for continuous automation\n gitvan daemon start\n ```\n \n ## ✨ Key Features\n \n ### 🎯 **Composables-First API**\n-- **Vue-inspired ergonomics** with `useGit()`, `useTemplate()`, `useExec()`\n+- **Vue-inspired ergonomics** with `useGit()`, `useTemplate()`\n - **Automatic dependency injection** using unctx\n - **Context isolation** for concurrent execution\n \n ### 🔄 **Git-Native Job System**\n@@ -114,12 +114,12 @@\n # List available jobs\n gitvan job list\n \n # Run a specific job\n-gitvan job run docs:changelog\n+gitvan job run --name docs:changelog\n \n # Run job with payload\n-gitvan job run foundation:template-greeting --payload '{\"custom\": \"value\"}'\n+gitvan job run --name foundation:template-greeting --payload '{\"custom\": \"value\"}'\n \n # Show job details\n gitvan job show docs:changelog\n \n@@ -132,16 +132,16 @@\n ```bash\n # Start daemon for current worktree\n gitvan daemon start\n \n+# Start daemon for all worktrees\n+gitvan daemon start --worktrees all\n+\n # Check daemon status\n gitvan daemon status\n \n # Stop daemon\n gitvan daemon stop\n-\n-# View daemon statistics\n-gitvan daemon stats\n ```\n \n ### Lock Management\n \n"
                },
                {
                    "date": 1758075144760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,451 +1,292 @@\n # GitVan v2\n \n-**Git-Native Job System with Composables**\n+**Git-native development automation platform with AI-powered workflows**\n \n-GitVan v2 is a Git-native job system that transforms your Git repository into an intelligent automation platform. Built with modern composables, Nunjucks templates, and Git-native storage, it provides zero-configuration workflow automation with Vue-inspired ergonomics.\n+GitVan transforms Git into a runtime environment for development automation, providing intelligent job scheduling, template generation, and AI-powered workflow creation.\n \n ## 🚀 Quick Start\n \n+### Installation\n+\n ```bash\n-# Install GitVan globally\n npm install -g gitvan\n-\n-# Navigate to your Git repository\n-cd your-project\n-\n-# Run a job\n-gitvan run docs:changelog\n-\n-# Start the daemon for continuous automation\n-gitvan daemon start\n+# or\n+npm install gitvan\n ```\n \n-## ✨ Key Features\n+### Initialize a Project\n \n-### 🎯 **Composables-First API**\n-- **Vue-inspired ergonomics** with `useGit()`, `useTemplate()`\n-- **Automatic dependency injection** using unctx\n-- **Context isolation** for concurrent execution\n-\n-### 🔄 **Git-Native Job System**\n-- **Filesystem discovery** of jobs in `jobs/` directory\n-- **Multiple job types**: on-demand, cron, event-driven\n-- **Atomic execution** with Git refs for locking\n-- **Auditable receipts** stored in Git notes\n-\n-### 📝 **Advanced Template System**\n-- **Nunjucks templates** with Git context injection\n-- **Inflection filters** for string transformations\n-- **Deterministic rendering** with cached environments\n-- **File and string output** support\n-\n-### 🌳 **Git-Native Storage**\n-- **Git refs** for distributed locking across worktrees\n-- **Git notes** for execution metadata and receipts\n-- **No external databases** - everything stored in Git\n-\n-### 🔄 **Worktree-Aware Design**\n-- **Per-worktree daemons** with complete isolation\n-- **Distributed locking** prevents conflicts\n-- **Concurrent execution** across multiple branches\n-\n-## 🏗️ Architecture\n-\n-GitVan v2 is built as a **single package** with clear internal boundaries:\n-\n+```bash\n+gitvan init\n ```\n-src/\n-├── composables/          # Vue-inspired composables API\n-│   ├── ctx.mjs          # Context management (unctx)\n-│   ├── git.mjs          # Git operations composable\n-│   ├── template.mjs     # Nunjucks template composable\n-│   └── index.mjs        # Composable exports\n-├── jobs/                 # Job system implementation\n-│   ├── define.mjs       # Job definition system\n-│   ├── scan.mjs         # Filesystem job discovery\n-│   ├── runner.mjs       # Job execution engine\n-│   ├── cron.mjs         # Cron scheduler\n-│   ├── events.mjs       # Event-driven jobs\n-│   ├── daemon.mjs       # Background daemon\n-│   └── hooks.mjs        # Lifecycle hooks\n-├── config/               # Configuration system\n-│   ├── defaults.mjs     # Default configuration\n-│   ├── loader.mjs      # Configuration loading\n-│   └── runtime-config.mjs # Runtime normalization\n-├── utils/                # Utility functions\n-│   └── nunjucks-config.mjs # Template configuration\n-└── cli/                  # Command-line interface\n-    └── job.mjs          # Job management commands\n-```\n \n-## 📦 Installation\n+This creates a complete GitVan project structure with:\n+- 📁 Directory structure (`.gitvan/`, `jobs/`, `templates/`, `packs/`)\n+- ⚙️ Configuration file (`gitvan.config.js`)\n+- 📝 Sample files (job, template, pack)\n+- 🔧 Git repository setup\n \n-### Prerequisites\n-- **Node.js** 18+ \n-- **Git** 2.30+ with GPG signing (recommended)\n-- **pnpm** 8+ (for development)\n+### Run Your First Job\n \n-### Global Installation\n ```bash\n-npm install -g gitvan\n+gitvan run hello\n ```\n \n-### Development Setup\n-```bash\n-# Clone the repository\n-git clone https://github.com/sac/gitvan.git\n-cd gitvan\n+## ✨ Features\n \n-# Install dependencies\n-pnpm install\n+### 🎯 **Core Capabilities**\n+- **Git-Native**: Uses Git refs for locking, notes for audit trails\n+- **Template Engine**: Nunjucks-powered with front-matter support\n+- **Job System**: Automated task execution with scheduling\n+- **Pack System**: Reusable automation components\n+- **AI Integration**: Generate jobs and templates with AI assistance\n \n-# Run tests\n-pnpm test\n+### 📋 **Front-Matter Templates**\n+GitVan supports Hygen-style templates with rich front-matter:\n \n-# Start development CLI\n-pnpm dev\n-```\n+```yaml\n+---\n+to: \"src/components/{{ name | pascalCase }}.tsx\"\n+force: \"overwrite\"\n+inject:\n+  - into: \"src/index.ts\"\n+    snippet: \"export { {{ name | pascalCase }} } from './components/{{ name | pascalCase }}';\"\n+    find: \"// EXPORTS\"\n+    where: \"after\"\n+sh:\n+  before: [\"npm run lint\"]\n+  after: [\"npm run test\"]\n+when: \"{{ createComponent }}\"\n+---\n+import React from 'react';\n \n-## 🎮 Usage\n+interface {{ name | pascalCase }}Props {\n+  // Props here\n+}\n \n-### Job Management\n-\n-```bash\n-# List available jobs\n-gitvan job list\n-\n-# Run a specific job\n-gitvan job run --name docs:changelog\n-\n-# Run job with payload\n-gitvan job run --name foundation:template-greeting --payload '{\"custom\": \"value\"}'\n-\n-# Show job details\n-gitvan job show docs:changelog\n-\n-# Plan job execution (dry run)\n-gitvan job plan docs:changelog\n+export const {{ name | pascalCase }}: React.FC<{{ name | pascalCase }}Props> = () => {\n+  return <div>{{ name | titleCase }}</div>;\n+};\n ```\n \n-### Daemon Management\n+### 🤖 **AI-Powered Workflows**\n+Generate jobs and templates using natural language:\n \n ```bash\n-# Start daemon for current worktree\n-gitvan daemon start\n-\n-# Start daemon for all worktrees\n-gitvan daemon start --worktrees all\n-\n-# Check daemon status\n-gitvan daemon status\n-\n-# Stop daemon\n-gitvan daemon stop\n+gitvan chat generate \"Create a changelog job that runs on every release\"\n+gitvan llm call \"Summarize recent commits and create a release note\"\n ```\n \n-### Lock Management\n+### 📦 **Pack System**\n+Create and share reusable automation components:\n \n ```bash\n-# List active job locks\n-gitvan job locks\n-\n-# Unlock a specific job\n-gitvan job unlock docs:changelog\n+gitvan pack apply my-pack --inputs '{\"name\":\"MyComponent\"}'\n+gitvan scaffold react-pack:component --inputs '{\"name\":\"Button\"}'\n ```\n \n-## 🔧 Job Definition\n+## 🛠️ Commands\n \n-Jobs are defined using the `defineJob()` pattern with composables:\n+### Core Commands\n+- `gitvan init` - Initialize GitVan in current directory\n+- `gitvan ensure` - Verify and fix GitVan configuration\n+- `gitvan help` - Show all available commands\n \n-```javascript\n-// jobs/docs/changelog.mjs\n-import { defineJob } from \"gitvan/define\";\n-import { useGit } from \"gitvan/useGit\";\n-import { useTemplate } from \"gitvan/useTemplate\";\n+### Job Management\n+- `gitvan job list` - List available jobs\n+- `gitvan job run --name <job>` - Run a specific job\n+- `gitvan run <job>` - Run job (legacy syntax)\n \n-export default defineJob({\n-  meta: { \n-    desc: \"Generate CHANGELOG.md from git log\",\n-    tags: [\"documentation\", \"changelog\"]\n-  },\n-  async run({ ctx, payload }) {\n-    const git = useGit();\n-    const template = await useTemplate();\n-    \n-    // Get commits\n-    const logOutput = await git.log(\"%h%x09%s\", [\"-n\", \"50\"]);\n-    const commits = logOutput.split(\"\\n\").filter(Boolean);\n-    \n-    // Render template to file\n-    const outputPath = await template.renderToFile(\n-      \"changelog.njk\",\n-      \"dist/CHANGELOG.md\",\n-      { commits, generatedAt: ctx.nowISO }\n-    );\n-    \n-    return {\n-      ok: true,\n-      artifacts: [outputPath]\n-    };\n-  }\n-});\n-```\n+### Template & Pack System\n+- `gitvan pack list` - List installed packs\n+- `gitvan pack apply <pack>` - Apply a pack\n+- `gitvan pack plan <pack>` - Show pack execution plan\n+- `gitvan scaffold <pack:scaffold>` - Run a scaffold\n \n-### Job Types\n+### AI Features\n+- `gitvan chat generate <prompt>` - Generate job via AI\n+- `gitvan chat draft <prompt>` - Draft template via AI\n+- `gitvan llm call <prompt>` - Direct AI interaction\n \n-- **On-demand** - Manual execution via CLI\n-- **Cron** - Scheduled execution (`.cron.mjs` suffix)\n-- **Event-driven** - Triggered by Git events (`.evt.mjs` suffix)\n+### Daemon & Events\n+- `gitvan daemon start` - Start GitVan daemon\n+- `gitvan daemon status` - Check daemon status\n+- `gitvan event simulate --files \"src/**\"` - Simulate file events\n \n-## 🎨 Template System\n+### Audit & Compliance\n+- `gitvan audit build` - Build audit report\n+- `gitvan audit verify` - Verify operation integrity\n+- `gitvan audit list` - List all receipts\n \n-GitVan includes first-class Nunjucks template support with Git context injection:\n+## 📁 Project Structure\n \n-```njk\n-<!-- templates/changelog.njk -->\n-# Changelog\n+After running `gitvan init`:\n \n-Generated at: {{ generatedAt }}\n-Total commits: {{ commits.length }}\n-\n-## Recent Changes\n-\n-{% for commit in commits %}\n-- **{{ commit.split('\\t')[0] }}** {{ commit.split('\\t')[1] }}\n-{% endfor %}\n-\n----\n-*Generated by GitVan Jobs System*\n ```\n+my-project/\n+├── .gitvan/           # GitVan state and configuration\n+│   ├── packs/         # Installed packs\n+│   ├── state/         # Runtime state\n+│   └── backups/       # Automatic backups\n+├── jobs/              # Job definitions\n+├── templates/         # Nunjucks templates\n+├── packs/             # Local pack definitions\n+├── events/            # Event handlers\n+└── gitvan.config.js   # Configuration file\n+```\n \n-### Template Features\n-- **Git context injection** - Access to repository information\n-- **Inflection filters** - `titleize`, `camelize`, `underscore`, etc.\n-- **Deterministic helpers** - `nowISO`, `formatDate()`\n-- **File output** - Render directly to files\n-- **Include/extends** - Full Nunjucks functionality\n-\n ## ⚙️ Configuration\n \n-Create `gitvan.config.js` in your project root:\n+GitVan uses `gitvan.config.js` for configuration:\n \n ```javascript\n export default {\n-  // Repository settings\n-  root: process.cwd(),\n+  templates: {\n+    dirs: [\"templates\"],\n+    autoescape: false,\n+    noCache: true,\n+  },\n   \n-  // Job configuration\n   jobs: {\n-    dir: \"jobs\"\n+    dirs: [\"jobs\"],\n   },\n   \n-  // Template configuration\n-  templates: {\n-    engine: \"nunjucks\",\n-    dirs: [\"templates\"]\n+  packs: {\n+    dirs: [\"packs\", \".gitvan/packs\"],\n   },\n   \n-  // Receipts configuration\n-  receipts: {\n-    ref: \"refs/notes/gitvan/results\"\n+  daemon: {\n+    enabled: true,\n+    worktrees: \"current\",\n   },\n   \n-  // Custom hooks\n-  hooks: {\n-    \"job:after\": (payload, result) => {\n-      console.log(`Job completed: ${payload.jobId}`);\n-    }\n-  }\n+  shell: {\n+    allow: [\"echo\", \"git\", \"npm\", \"pnpm\", \"yarn\"],\n+  },\n+  \n+  ai: {\n+    provider: \"openai\",\n+    model: \"gpt-4\",\n+  },\n+  \n+  data: {\n+    project: {\n+      name: \"my-project\",\n+      description: \"A GitVan-powered project\",\n+    },\n+  },\n };\n ```\n \n-## 🔌 Composables API\n+## 🔒 Security & Safety\n \n-### `useGit()`\n-```javascript\n-const git = useGit();\n+- **Path Sandboxing**: Prevents directory traversal attacks\n+- **Atomic Locking**: Git ref-based concurrency control\n+- **Shell Allowlists**: Configurable command execution\n+- **Audit Trails**: Complete operation logging in Git notes\n+- **Idempotent Operations**: Safe to run multiple times\n \n-// Basic Git operations\n-await git.run(\"log --oneline -10\");\n-await git.head();                    // Current HEAD\n-await git.getCurrentBranch();        // Current branch\n-await git.isClean();                 // Working directory status\n+## 🎨 Front-Matter Support\n \n-// Git notes\n-await git.noteAdd(\"refs/notes/test\", \"message\");\n-await git.noteShow(\"refs/notes/test\");\n+GitVan supports multiple front-matter formats:\n \n-// Atomic operations\n-await git.updateRefCreate(\"refs/gitvan/lock/job-id\", commitSha);\n+### YAML (Default)\n+```yaml\n+---\n+to: \"output.txt\"\n+force: \"overwrite\"\n+---\n+Content here\n ```\n \n-### `useTemplate()`\n-```javascript\n-const template = await useTemplate();\n+### TOML\n+```toml\n++++\n+to = \"output.txt\"\n+force = \"overwrite\"\n++++\n+Content here\n+```\n \n-// Render to string\n-const html = await template.renderString(\"Hello {{ name }}!\", { name: \"World\" });\n-\n-// Render to file\n-const outputPath = await template.renderToFile(\n-  \"template.njk\",\n-  \"dist/output.html\",\n-  { data: \"value\" }\n-);\n+### JSON\n+```json\n+;{\"to\":\"output.txt\",\"force\":\"overwrite\"}\n+Content here\n ```\n \n-## 🎯 Event System\n+## 📚 Examples\n \n-GitVan supports event-driven jobs with Git-native predicates:\n-\n+### Simple Job\n ```javascript\n-// jobs/alerts/release.evt.mjs\n\\ No newline at end of file\n-import { defineJob } from \"gitvan/define\";\n-\n-export default defineJob({\n-  meta: {\n-    desc: \"Notify on new releases\",\n-    tags: [\"alerts\", \"releases\"]\n-  },\n-  on: {\n-    any: [\n-      { tagCreate: true },\n-      { semverTag: true }\n-    ]\n-  },\n-  async run({ ctx, payload }) {\n-    // Handle release notification\n-    return { ok: true };\n+// jobs/greeting.mjs\n+export default {\n+  name: \"greeting\",\n+  description: \"Say hello\",\n+  \n+  async run() {\n+    console.log(\"Hello from GitVan! 🚀\");\n   }\n-});\n+};\n ```\n \n-### Event Predicates\n-- **`tagCreate`** - New tag created\n-- **`semverTag`** - Semantic version tag\n-- **`branchCreate`** - New branch created\n-- **`mergeTo`** - Merge to specific branch\n-- **`pushTo`** - Push to specific branch pattern\n-\n-## 🚀 Performance\n-\n-GitVan v2 is optimized for speed and efficiency:\n-\n-- **Job execution**: < 100ms for simple tasks\n-- **Template rendering**: > 1000 templates/second\n-- **Daemon memory**: < 50MB baseline usage\n-- **Lock contention**: < 1 second resolution\n-- **Context initialization**: < 50ms\n-\n-## 🛡️ Security\n-\n-- **Git-native authentication** with signed commits\n-- **Path traversal prevention** in all file operations\n-- **Input validation** and sanitization\n-- **No external dependencies** for core functionality\n-- **Worktree isolation** prevents cross-contamination\n-\n-## 📚 Documentation\n-\n-### Core Documentation\n-- **[Playground Guide](./docs/playground/)** - Complete developer guide for the playground application\n-- **[Cookbook](./docs/cookbook/)** - Practical recipes and patterns for common use cases\n-\n-### Playground Documentation\n-- **[Playground README](./docs/playground/README.md)** - Main developer guide\n-- **[Job Examples](./docs/playground/job-examples.md)** - Detailed job examples and patterns\n-- **[Testing Guide](./docs/playground/testing-guide.md)** - Testing strategies and best practices\n-- **[Architecture Guide](./docs/playground/architecture-guide.md)** - System architecture overview\n-- **[Troubleshooting Guide](./docs/playground/troubleshooting-guide.md)** - Common issues and solutions\n-\n-### Cookbook Recipes\n-- **[Foundation Recipes](./docs/cookbook/foundation/)** - Basic job setup, configuration, templates, error handling\n-- **[Documentation Recipes](./docs/cookbook/documentation/)** - Changelog generation, documentation automation\n-- **[CI/CD Recipes](./docs/cookbook/cicd/)** - Build automation, deployment workflows\n-\n-### API Reference\n-- **[Composables API](./src/composables/)** - `useGit`, `useTemplate`, context management\n-- **[Job System API](./src/jobs/)** - Job definition, execution, scheduling\n-- **[Configuration API](./src/config/)** - Configuration loading and normalization\n-\n-## 🧪 Testing\n-\n-```bash\n-# Run all tests\n-pnpm test\n-\n-# Run specific test suites\n-pnpm test composables\n-pnpm test jobs\n-pnpm test config\n-\n-# Run E2E tests\n-pnpm test playground-e2e\n-pnpm test playground-cookbook-e2e\n-\n-# Run with coverage\n-pnpm test --coverage\n+### Template with Front-Matter\n+```yaml\n+---\n+to: \"src/{{ name | kebabCase }}.ts\"\n+force: \"overwrite\"\n+inject:\n+  - into: \"src/index.ts\"\n+    snippet: \"export * from './{{ name | kebabCase }}';\"\n+    find: \"// EXPORTS\"\n+---\n+export interface {{ name | pascalCase }} {\n+  id: string;\n+  name: string;\n+}\n ```\n \n-## 🎮 Playground\n-\n-The GitVan playground is a self-contained example application that demonstrates all features:\n-\n-```bash\n-# Navigate to playground\n-cd playground\n-\n-# Install dependencies\n-pnpm install\n-\n-# Start development mode\n-pnpm dev\n-\n-# Run specific jobs\n-pnpm run:changelog\n-pnpm run:simple\n+### Pack Definition\n+```json\n+{\n+  \"name\": \"react-component\",\n+  \"version\": \"1.0.0\",\n+  \"description\": \"Generate React components\",\n+  \"scaffolds\": {\n+    \"component\": {\n+      \"description\": \"Create a React component\",\n+      \"templates\": [\"templates/component.njk\"],\n+      \"inputs\": {\n+        \"name\": {\n+          \"type\": \"string\",\n+          \"description\": \"Component name\",\n+          \"required\": true\n+        }\n+      }\n+    }\n+  }\n+}\n ```\n \n-The playground includes:\n-- **Foundation jobs** - Basic setup, file output, templates, error handling\n-- **Documentation jobs** - Advanced changelog generation\n-- **CI/CD jobs** - Build automation workflows\n-- **Event-driven jobs** - Release notifications\n-- **Comprehensive E2E tests** - Full system validation\n-\n ## 🤝 Contributing\n \n-We welcome contributions! Please see our [Contributing Guide](./CONTRIBUTING.md) for details.\n+1. Fork the repository\n+2. Create a feature branch: `git checkout -b feature-name`\n+3. Make your changes\n+4. Run tests: `pnpm test`\n+5. Commit: `git commit -m \"Add feature\"`\n+6. Push: `git push origin feature-name`\n+7. Submit a pull request\n \n-### Development Commands\n-\n-```bash\n-# Install dependencies\n-pnpm install\n-\n-# Run linting\n-pnpm lint\n-\n-# Type checking\n-pnpm typecheck\n-\n-# Clean build artifacts\n-pnpm clean\n-```\n-\n ## 📄 License\n \n-Published under the [MIT](./LICENSE) license.\n+MIT License - see [LICENSE](LICENSE) file for details.\n \n-## 🙏 Acknowledgments\n+## 🆘 Support\n \n-GitVan v2 is inspired by:\n-- **Vue.js** for the composables pattern\n-- **Git** for the powerful foundation\n-- **Nunjucks** for template rendering\n-- **unctx** for context management\n-- **Nitro** for configuration patterns\n+- 📖 [Documentation](docs/)\n+- 🐛 [Issues](https://github.com/gitvan/gitvan/issues)\n+- 💬 [Discussions](https://github.com/gitvan/gitvan/discussions)\n \n ---\n \n-**Transform your Git workflow with intelligent automation. Start with GitVan v2 today!**\n+**GitVan v2** - Transform Git into your development automation platform 🚀\n\\ No newline at end of file\n"
                },
                {
                    "date": 1758075651620,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,13 @@\n+---\n+title: \"GitVan v2\"\n+description: \"Git-native development automation platform with AI-powered workflows\"\n+version: \"2.0.0\"\n+author: \"GitVan Team\"\n+license: \"MIT\"\n+tags: [\"git\", \"automation\", \"templating\", \"ai\", \"workflows\"]\n+---\n+\n # GitVan v2\n \n **Git-native development automation platform with AI-powered workflows**\n \n@@ -164,10 +173,10 @@\n     allow: [\"echo\", \"git\", \"npm\", \"pnpm\", \"yarn\"],\n   },\n   \n   ai: {\n-    provider: \"openai\",\n-    model: \"gpt-4\",\n+    provider: \"ollama\",\n+    model: \"llama3.1\",\n   },\n   \n   data: {\n     project: {\n"
                },
                {
                    "date": 1758077181475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,9 +174,9 @@\n   },\n   \n   ai: {\n     provider: \"ollama\",\n-    model: \"llama3.1\",\n+    model: \"qwen3-coder:30b\",\n   },\n   \n   data: {\n     project: {\n"
                },
                {
                    "date": 1758077250460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,9 +174,9 @@\n   },\n   \n   ai: {\n     provider: \"ollama\",\n-    model: \"qwen3-coder:30b\",\n+    model: \"qwen3-coder:30b\", // Default from GitVanDefaults\n   },\n   \n   data: {\n     project: {\n"
                },
                {
                    "date": 1758088442924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,34 +196,19 @@\n - **Idempotent Operations**: Safe to run multiple times\n \n ## 🎨 Front-Matter Support\n \n-GitVan supports multiple front-matter formats:\n+GitVan uses YAML front-matter for all templates and configuration:\n \n-### YAML (Default)\n+### YAML Front-Matter\n ```yaml\n ---\n to: \"output.txt\"\n force: \"overwrite\"\n ---\n Content here\n ```\n \n-### TOML\n-```toml\n-+++\n-to = \"output.txt\"\n-force = \"overwrite\"\n-+++\n-Content here\n-```\n-\n-### JSON\n-```json\n-;{\"to\":\"output.txt\",\"force\":\"overwrite\"}\n-Content here\n-```\n-\n ## 📚 Examples\n \n ### Simple Job\n ```javascript\n"
                },
                {
                    "date": 1758089475362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -260,8 +260,35 @@\n   }\n }\n ```\n \n+### Worktree Management\n+```javascript\n+// Using the useWorktree composable\n+import { useWorktree } from 'gitvan/composables/worktree';\n+\n+const worktree = useWorktree();\n+\n+// Get worktree information\n+const info = await worktree.info();\n+console.log(`Current branch: ${info.branch}`);\n+console.log(`Worktree path: ${info.worktree}`);\n+\n+// List all worktrees\n+const worktrees = await worktree.list();\n+worktrees.forEach(wt => {\n+  console.log(`${wt.path} (${wt.branch}) ${wt.isMain ? '(main)' : ''}`);\n+});\n+\n+// Create a new worktree\n+await worktree.create('/path/to/new-worktree', 'feature-branch');\n+\n+// Get worktree status\n+const status = await worktree.status();\n+console.log(`Total worktrees: ${status.count}`);\n+console.log(`Is main worktree: ${status.isMain}`);\n+```\n+\n ## 🤝 Contributing\n \n 1. Fork the repository\n 2. Create a feature branch: `git checkout -b feature-name`\n"
                },
                {
                    "date": 1758090739990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,15 +40,65 @@\n ```bash\n gitvan run hello\n ```\n \n+## 🧩 Composables API\n+\n+GitVan v2 provides a comprehensive set of composables for building automation workflows:\n+\n+### Core Composables\n+- **`useGit`** - Git operations and repository management\n+- **`useWorktree`** - Git worktree management  \n+- **`useTemplate`** - Template rendering with Nunjucks\n+\n+### Job & Event Composables\n+- **`useJob`** - Job lifecycle and execution management\n+- **`useEvent`** - Event system and triggering\n+- **`useSchedule`** - Cron and scheduling management\n+\n+### Infrastructure Composables\n+- **`useReceipt`** - Receipt and audit management\n+- **`useLock`** - Distributed locking\n+- **`useRegistry`** - Job and event registry management\n+\n+### Example Usage\n+\n+```javascript\n+import { withGitVan, useJob, useEvent, useSchedule } from './src/composables/index.mjs';\n+\n+await withGitVan({ cwd: process.cwd(), env: process.env }, async () => {\n+  const job = useJob();\n+  const event = useEvent();\n+  const schedule = useSchedule();\n+  \n+  // Schedule a job\n+  await schedule.add('daily-backup', '0 3 * * *', 'backup-job');\n+  \n+  // Register events\n+  await event.register('backup-complete', {\n+    name: 'Backup Complete',\n+    type: 'custom',\n+    job: 'notify-job'\n+  });\n+  \n+  // Execute job with event triggering\n+  const result = await job.run('backup-job');\n+  if (result.success) {\n+    await event.trigger('backup-complete', { result });\n+  }\n+});\n+```\n+\n+**📚 Documentation**: [Composables API](docs/api/composables.md) | [Quick Reference](docs/api/composables-quick-reference.md) | [Examples](docs/examples/composables-examples.md)\n+\n ## ✨ Features\n \n ### 🎯 **Core Capabilities**\n - **Git-Native**: Uses Git refs for locking, notes for audit trails\n - **Template Engine**: Nunjucks-powered with front-matter support\n - **Job System**: Automated task execution with scheduling\n - **Pack System**: Reusable automation components\n+- **Composables API**: Comprehensive composables for automation workflows\n - **AI Integration**: Generate jobs and templates with AI assistance\n \n ### 📋 **Front-Matter Templates**\n GitVan supports Hygen-style templates with rich front-matter:\n"
                },
                {
                    "date": 1758095058485,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,36 @@\n # or\n npm install gitvan\n ```\n \n+### Deterministic First Run\n+\n+```bash\n+git init my-repo && cd my-repo\n+gitvan init\n+echo 'console.log(1)' > index.js\n+git add . && git commit -m \"init\"\n+\n+# Add a real job\n+echo \"import { defineJob, useGit, useNotes } from 'file:///Users/sac/gitvan/src/index.mjs'\n+\n+export default defineJob({\n+  meta: { name: 'touch', desc: 'Touch file on tag creation' },\n+  on: { tagCreate: 'v*' },\n+  async run() {\n+    const git = useGit()\n+    const notes = useNotes()\n+    await git.writeFile('TOUCHED', 'ok')\n+    await notes.write(\\`touch for \\${await git.headSha()}\\`)\n+    return { ok: true, artifacts: ['TOUCHED'] }\n+  }\n+})\" > jobs/touch.mjs\n+\n+git tag v0.1.0\n+gitvan event simulate --ref refs/tags/v0.1.0\n+test -f TOUCHED && echo ok\n+```\n+\n ### Initialize a Project\n \n ```bash\n gitvan init\n@@ -48,8 +76,9 @@\n ### Core Composables\n - **`useGit`** - Git operations and repository management\n - **`useWorktree`** - Git worktree management  \n - **`useTemplate`** - Template rendering with Nunjucks\n+- **`useNotes`** - Git notes management for receipts\n \n ### Job & Event Composables\n - **`useJob`** - Job lifecycle and execution management\n - **`useEvent`** - Event system and triggering\n@@ -59,38 +88,49 @@\n - **`useReceipt`** - Receipt and audit management\n - **`useLock`** - Distributed locking\n - **`useRegistry`** - Job and event registry management\n \n-### Example Usage\n+### API Reference\n \n+#### defineJob\n ```javascript\n-import { withGitVan, useJob, useEvent, useSchedule } from './src/composables/index.mjs';\n+import { defineJob, useGit, useTemplate, useNotes } from 'file:///Users/sac/gitvan/src/index.mjs'\n \n-await withGitVan({ cwd: process.cwd(), env: process.env }, async () => {\n-  const job = useJob();\n-  const event = useEvent();\n-  const schedule = useSchedule();\n+export default defineJob({\n+  meta: { name: \"changelog\", desc: \"Generate changelog from commits\" },\n+  on: { tagCreate: \"v*\" },\n+  async run() {\n+    const git = useGit()\n+    const tpl = await useTemplate()\n+    const notes = useNotes()\n+\n+    const commits = await git.logSinceLastTag()\n+    const body = tpl.render(\"changelog.njk\", { commits })\n+    await git.writeFile(\"CHANGELOG.md\", body)\n+    await notes.write(`changelog for ${await git.headSha()}`)\n+    return { ok: true, artifacts: [\"CHANGELOG.md\"] }\n+  }\n+})\n+```\n+\n+#### Event Schema\n+```javascript\n+on: {\n+  // Git events\n+  push: \"refs/heads/main\",           // Push to specific branch\n+  tagCreate: \"v*\",                   // Tag creation with pattern\n+  merge: \"into:main\",                // Merge into branch\n+  fsChange: \"src/**\",                // File system changes\n   \n-  // Schedule a job\n-  await schedule.add('daily-backup', '0 3 * * *', 'backup-job');\n+  // Cron events\n+  cron: \"0 */2 * * *\",               // Cron expression\n   \n-  // Register events\n-  await event.register('backup-complete', {\n-    name: 'Backup Complete',\n-    type: 'custom',\n-    job: 'notify-job'\n-  });\n-  \n-  // Execute job with event triggering\n-  const result = await job.run('backup-job');\n-  if (result.success) {\n-    await event.trigger('backup-complete', { result });\n-  }\n-});\n+  // Predicates compose under all/any\n+  all: [{ push: \"refs/heads/main\" }, { fsChange: \"src/**\" }],\n+  any: [{ tagCreate: \"v*\" }, { cron: \"0 0 * * *\" }]\n+}\n ```\n \n-**📚 Documentation**: [Composables API](docs/api/composables.md) | [Quick Reference](docs/api/composables-quick-reference.md) | [Examples](docs/examples/composables-examples.md)\n-\n ## ✨ Features\n \n ### 🎯 **Core Capabilities**\n - **Git-Native**: Uses Git refs for locking, notes for audit trails\n@@ -169,9 +209,9 @@\n \n ### Daemon & Events\n - `gitvan daemon start` - Start GitVan daemon\n - `gitvan daemon status` - Check daemon status\n-- `gitvan event simulate --files \"src/**\"` - Simulate file events\n+- `gitvan event simulate --ref refs/tags/v1.0.0` - Simulate events\n \n ### Audit & Compliance\n - `gitvan audit build` - Build audit report\n - `gitvan audit verify` - Verify operation integrity\n@@ -236,16 +276,88 @@\n   },\n };\n ```\n \n+## 🎯 Strategy Presets\n+\n+GitVan supports multiple development strategies with preset configurations:\n+\n+### Trunk-Based (Default)\n+- Direct commits to main branch\n+- Feature branches merged via PR\n+- Continuous deployment on main\n+\n+### Release Flow\n+- Release branches for versioning\n+- Feature branches → Release → Main\n+- Tagged releases with changelogs\n+\n+### Forking Workflow\n+- External contributor support\n+- Fork-based pull requests\n+- Security scanning for external PRs\n+\n+## 📊 Event Model\n+\n+GitVan supports a comprehensive event system with standardized patterns:\n+\n+| Event        | Key payload              | Pattern example        |\n+| ------------ | ------------------------ | ---------------------- |\n+| `push`       | `ref`, `before`, `after` | `push:refs/heads/main` |\n+| `tag:create` | `ref`, `tag`             | `tag:create:v*`        |\n+| `merge`      | `from`, `into`           | `merge:into:main`      |\n+| `fs:change`  | `paths`                  | `fs:change:src/**`     |\n+| `cron`       | `cron`                   | `cron:0 */2 * * *`     |\n+\n+Predicates compose under `all` and `any`. Keep it to those two.\n+\n+## 🔄 Evolution Story\n+\n+GitVan's power lies in how the tree stays fixed while behavior changes. Here's how workflows evolve:\n+\n+### Phase 1 → Phase 2 (add release flow)\n+\n+```diff\n+ // gitvan.config.js\n+ export default {\n+-  strategy: \"tbd\",\n++  strategy: \"release-flow\",\n+   events: {\n+     \"push:refs/heads/main\": [\"notes:write\",\"changelog\"],\n+     \"push:refs/heads/feature/*\": [\"lint.changed\",\"test.changed\"],\n++    \"branch:create:refs/heads/release/*\": [\"version.freeze\",\"changelog.seed\"],\n++    \"push:refs/heads/release/*\": [\"release.plan\"],\n+     \"tag:create:v*\": [\"release.publish\"]\n+   }\n+ }\n+```\n+\n+### Phase 2 → Phase 3 (enable OSS PRs)\n+\n+```diff\n+   events: {\n+     ...\n++    \"pr:opened:external\": [\"security.scan\",\"ai.review.summary\"]\n+   }\n+ }\n+```\n+\n ## 🔒 Security & Safety\n \n - **Path Sandboxing**: Prevents directory traversal attacks\n - **Atomic Locking**: Git ref-based concurrency control\n - **Shell Allowlists**: Configurable command execution\n - **Audit Trails**: Complete operation logging in Git notes\n - **Idempotent Operations**: Safe to run multiple times\n \n+## 📝 Receipts\n+\n+GitVan maintains complete audit trails through Git notes:\n+\n+- **Location**: `refs/notes/gitvan/results`\n+- **Key**: `${commitSHA}:${jobName}:${timestamp}`\n+- **Body**: JSON `{ ok, startedAt, finishedAt, inputs, outputs, artifacts, seed }`\n+\n ## 🎨 Front-Matter Support\n \n GitVan uses YAML front-matter for all templates and configuration:\n \n@@ -259,19 +371,28 @@\n ```\n \n ## 📚 Examples\n \n-### Simple Job\n+### Canonical Job Skeleton\n ```javascript\n-// jobs/greeting.mjs\n-export default {\n-  name: \"greeting\",\n-  description: \"Say hello\",\n-  \n+// jobs/changelog.mjs\n+import { defineJob, useGit, useTemplate, useNotes } from 'file:///Users/sac/gitvan/src/index.mjs'\n+\n+export default defineJob({\n+  meta: { name: \"changelog\", desc: \"Generate changelog from commits\" },\n+  on: { tagCreate: \"v*\" },\n   async run() {\n-    console.log(\"Hello from GitVan! 🚀\");\n+    const git = useGit()\n+    const tpl = await useTemplate()\n+    const notes = useNotes()\n+\n+    const commits = await git.logSinceLastTag()\n+    const body = tpl.render(\"changelog.njk\", { commits })\n+    await git.writeFile(\"CHANGELOG.md\", body)\n+    await notes.write(`changelog for ${await git.headSha()}`)\n+    return { ok: true, artifacts: [\"CHANGELOG.md\"] }\n   }\n-};\n+})\n ```\n \n ### Template with Front-Matter\n ```yaml\n@@ -337,8 +458,12 @@\n console.log(`Total worktrees: ${status.count}`);\n console.log(`Is main worktree: ${status.isMain}`);\n ```\n \n+## 🚀 Performance\n+\n+GitVan is optimized for sub-second execution of single-file jobs on local repositories. For complex workflows, performance scales linearly with job complexity.\n+\n ## 🤝 Contributing\n \n 1. Fork the repository\n 2. Create a feature branch: `git checkout -b feature-name`\n"
                }
            ],
            "date": 1758042393509,
            "name": "Commit-0",
            "content": "# GitVan v2\n\n**Git-Native Automation with Composables and Templates**\n\nGitVan v2 is a lean, single-package JavaScript solution that transforms your Git repository into an intelligent automation platform. Built with modern composables, Nunjucks templates, and Git-native storage, it provides zero-configuration workflow automation with Vue-inspired ergonomics.\n\n## 🚀 Quick Start\n\n```bash\n# Install GitVan globally\nnpm install -g gitvan\n\n# Navigate to your Git repository\ncd your-project\n\n# Run a job\ngitvan run docs:changelog\n\n# Start the daemon for continuous automation\ngitvan daemon start\n```\n\n## ✨ Key Features\n\n### 🎯 **Composables-First API**\n- **Vue-inspired ergonomics** with `useGit()`, `useTemplate()`, `useExec()`\n- **Automatic dependency injection** using unctx\n- **Context isolation** for concurrent execution\n\n### 📝 **Five Execution Types**\n- **`cli`** - Shell command execution with environment control\n- **`js`** - JavaScript module execution with import resolution  \n- **`llm`** - Language model integration (Ollama, OpenAI, etc.)\n- **`job`** - Recursive job execution for composition\n- **`tmpl`** - Nunjucks template rendering with Git context\n\n### 🌳 **Git-Native Storage**\n- **Git refs** for distributed locking across worktrees\n- **Git notes** for execution metadata and receipts\n- **No external databases** - everything stored in Git\n\n### 🔄 **Worktree-Aware Design**\n- **Per-worktree daemons** with complete isolation\n- **Distributed locking** prevents conflicts\n- **Concurrent execution** across multiple branches\n\n## 🏗️ Architecture\n\nGitVan v2 is built as a **single package** with clear internal boundaries:\n\n```\nsrc/\n├── composables/          # Vue-inspired composables API\n│   ├── ctx.mjs          # Context management (unctx)\n│   ├── git.mjs          # Git operations composable\n│   ├── template.mjs     # Nunjucks template composable\n│   ├── exec.mjs         # Execution composable\n│   └── index.mjs        # Composable exports\n├── runtime/              # Core runtime engine\n│   ├── boot.mjs         # Context bootstrapping\n│   ├── define.mjs       # Job definition system\n│   ├── daemon.mjs       # Worktree-scoped daemon\n│   ├── events.mjs       # Event discovery and routing\n│   ├── locks.mjs        # Distributed locking\n│   └── receipt.mjs      # Execution receipts\n└── cli.mjs              # Command-line interface\n```\n\n## 📦 Installation\n\n### Prerequisites\n- **Node.js** 18+ \n- **Git** 2.30+ with GPG signing (recommended)\n- **pnpm** 8+ (for development)\n\n### Global Installation\n```bash\nnpm install -g gitvan\n```\n\n### Development Setup\n```bash\n# Clone the repository\ngit clone https://github.com/sac/gitvan.git\ncd gitvan\n\n# Install dependencies\npnpm install\n\n# Run tests\npnpm test\n\n# Start development CLI\npnpm dev\n```\n\n## 🎮 Usage\n\n### Basic Job Execution\n\n```bash\n# Run a specific job\ngitvan run docs:changelog\n\n# List available jobs\ngitvan list\n```\n\n### Daemon Management\n\n```bash\n# Start daemon for current worktree\ngitvan daemon start\n\n# Start daemon for all worktrees\ngitvan daemon start --worktrees all\n\n# Check daemon status\ngitvan daemon status\n\n# Stop daemon\ngitvan daemon stop\n```\n\n### Event Discovery\n\n```bash\n# List discovered events\ngitvan event list\n\n# List all worktrees\ngitvan worktree list\n```\n\n## 🔧 Job Definition\n\nJobs are defined using the `defineJob()` pattern with composables:\n\n```javascript\n// jobs/docs/changelog.mjs\nimport { defineJob } from '../../src/runtime/define.mjs'\nimport { useGit } from '../../src/composables/git.mjs'\nimport { useTemplate } from '../../src/composables/template.mjs'\n\nexport default defineJob({\n  kind: 'atomic',\n  meta: { \n    desc: 'Generate CHANGELOG.md', \n    schedule: '0 3 * * *' \n  },\n  async run() {\n    const git = useGit()\n    const t = useTemplate()\n    \n    const commits = git.run('log --pretty=%h%x09%s -n 50').split('\\n')\n    t.renderToFile('templates/changelog.njk', 'dist/CHANGELOG.md', { commits })\n    \n    return { ok: true, artifact: 'dist/CHANGELOG.md' }\n  }\n})\n```\n\n### Job Types\n\n- **`atomic`** - Single execution unit\n- **`composite`** - Multiple steps with dependencies\n- **`sequence`** - Sequential execution\n- **`parallel`** - Concurrent execution\n\n## 🎨 Template System\n\nGitVan includes first-class Nunjucks template support with Git context injection:\n\n```njk\n<!-- templates/changelog.njk -->\n# Changelog\nGenerated: {{ nowISO }}\n\n{% for line in commits %}\n- {{ line }}\n{% endfor %}\n```\n\n### Template Features\n- **Git context injection** - `{{ git.branch() }}`, `{{ git.head() }}`\n- **Deterministic helpers** - `{{ nowISO }}`, `{{ formatDate() }}`\n- **File output** - Render directly to files\n- **Include/extends** - Full Nunjucks functionality\n\n## ⚙️ Configuration\n\nCreate `gitvan.config.js` in your project root:\n\n```javascript\nexport default {\n  // Repository settings\n  repo: {\n    defaultBranch: \"main\",\n    notesRef: \"refs/notes/gitvan\",\n    signing: { require: true }\n  },\n\n  // LLM configuration\n  llm: {\n    baseURL: \"http://localhost:11434\", // Ollama\n    model: \"llama3.2\",\n    temperature: 0.2\n  },\n\n  // Event-driven automation\n  events: [\n    {\n      id: \"daily-summary\",\n      workflow: \"cron\",\n      schedule: \"0 18 * * *\",\n      run: { type: \"cookbook\", recipe: \"dev-diary\" }\n    }\n  ]\n}\n```\n\n## 🔌 Composables API\n\n### `useGit()`\n```javascript\nconst git = useGit()\ngit.run('log --oneline -10')        // Execute git command\ngit.branch()                        // Current branch\ngit.head()                          // Current HEAD\ngit.note('refs/notes/test', 'msg')  // Add git note\n```\n\n### `useTemplate()`\n```javascript\nconst t = useTemplate()\nt.render('template.njk', { data })           // Render to string\nt.renderToFile('template.njk', 'out.md', {}) // Render to file\n```\n\n### `useExec()`\n```javascript\nconst exec = useExec()\nexec.cli('npm', ['test'])                    // CLI execution\nexec.js('./script.mjs', 'default', {})       // JS execution\nexec.tmpl({ template: 'test.njk', data: {} }) // Template execution\n```\n\n## 🎯 Event System\n\nGitVan discovers events through file system conventions:\n\n```\nevents/\n├── cron/\n│   └── 0_9_*_*_*.mjs          # Daily at 9 AM\n├── merge-to/\n│   └── main.mjs               # On merge to main\n├── push-to/\n│   └── feature/*.mjs          # On push to feature/*\n└── message/\n    └── release.mjs            # On commit message \"release\"\n```\n\n### Event Handler Example\n```javascript\n// events/merge-to/main.mjs\nexport default async function handler({ payload, git, meta }) {\n  const git = useGit()\n  // Deploy to production\n  return { ok: true, action: 'deploy' }\n}\n```\n\n## 🚀 Performance\n\nGitVan v2 is optimized for speed and efficiency:\n\n- **Job execution**: < 100ms for simple tasks\n- **Template rendering**: > 1000 templates/second\n- **Daemon memory**: < 50MB baseline usage\n- **Lock contention**: < 1 second resolution\n- **Context initialization**: < 50ms\n\n## 🛡️ Security\n\n- **Git-native authentication** with signed commits\n- **Path traversal prevention** in all file operations\n- **Input validation** and sanitization\n- **No external dependencies** for core functionality\n- **Worktree isolation** prevents cross-contamination\n\n## 📚 Documentation\n\n- **[Specifications](./specs/)** - Complete system specifications\n- **[API Contracts](./specs/docs/API_CONTRACTS.md)** - Detailed API documentation\n- **[Architecture Decisions](./specs/docs/ARCHITECTURE_DECISIONS.md)** - Design rationale\n- **[Implementation Guide](./specs/docs/IMPLEMENTATION_GUIDE.md)** - Development guide\n\n## 🧪 Testing\n\n```bash\n# Run all tests\npnpm test\n\n# Run specific test suites\npnpm test composables\npnpm test runtime\npnpm test cli\n\n# Run with coverage\npnpm test --coverage\n```\n\n## 🤝 Contributing\n\nWe welcome contributions! Please see our [Contributing Guide](./CONTRIBUTING.md) for details.\n\n### Development Commands\n\n```bash\n# Install dependencies\npnpm install\n\n# Run linting\npnpm lint\n\n# Type checking\npnpm typecheck\n\n# Clean build artifacts\npnpm clean\n```\n\n## 📄 License\n\nPublished under the [MIT](./LICENSE) license.\n\n## 🙏 Acknowledgments\n\nGitVan v2 is inspired by:\n- **Vue.js** for the composables pattern\n- **Git** for the powerful foundation\n- **Nunjucks** for template rendering\n- **unctx** for context management\n\n---\n\n**Transform your Git workflow with intelligent automation. Start with GitVan v2 today!**"
        }
    ]
}