{
    "sourceFile": "playground/jobs/alerts/release.evt.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1758049591947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758050158713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,15 +13,21 @@\n   },\n   async run({ ctx, trigger }) {\n     const git = useGit();\n \n-    // Get the latest tag\n-    const latestTag = await git.run([\n-      \"describe\",\n-      \"--tags\",\n-      \"--abbrev=0\",\n-      \"HEAD\",\n-    ]);\n+    // Get the latest tag (handle case where no tags exist)\n+    let latestTag;\n+    try {\n+      latestTag = await git.run([\"describe\", \"--tags\", \"--abbrev=0\", \"HEAD\"]);\n+    } catch (error) {\n+      if (error.message.includes(\"No names found\")) {\n+        // No tags exist, this is normal for new repositories\n+        ctx.logger.log(\"No tags found in repository\");\n+        latestTag = \"no-tags\";\n+      } else {\n+        throw error;\n+      }\n+    }\n \n     const notification = {\n       type: \"release\",\n       tag: latestTag.trim(),\n"
                }
            ],
            "date": 1758049591947,
            "name": "Commit-0",
            "content": "import { defineJob } from \"gitvan/define\";\nimport { useGit } from \"gitvan/useGit\";\nimport { promises as fs } from \"node:fs\";\nimport { join } from \"pathe\";\n\nexport default defineJob({\n  meta: {\n    desc: \"Notify on new tags or releases\",\n    tags: [\"notification\", \"release\"],\n  },\n  on: {\n    any: [{ tagCreate: \"v*.*.*\" }, { semverTag: true }],\n  },\n  async run({ ctx, trigger }) {\n    const git = useGit();\n\n    // Get the latest tag\n    const latestTag = await git.run([\n      \"describe\",\n      \"--tags\",\n      \"--abbrev=0\",\n      \"HEAD\",\n    ]);\n\n    const notification = {\n      type: \"release\",\n      tag: latestTag.trim(),\n      timestamp: ctx.nowISO,\n      trigger: trigger?.data || {},\n      repository: {\n        head: await git.head(),\n        branch: await git.getCurrentBranch(),\n      },\n    };\n\n    // Create notification file\n    const outputPath = join(\n      ctx.root,\n      \"dist\",\n      \"notifications\",\n      `${Date.now()}-release.json`,\n    );\n    await fs.mkdir(join(ctx.root, \"dist\", \"notifications\"), {\n      recursive: true,\n    });\n    await fs.writeFile(outputPath, JSON.stringify(notification, null, 2));\n\n    ctx.logger.log(`Release notification created for tag: ${latestTag}`);\n\n    return {\n      ok: true,\n      artifacts: [outputPath],\n      data: notification,\n    };\n  },\n});\n"
        }
    ]
}