{
    "sourceFile": "tests/template-simple.test.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758045732020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758045732020,
            "name": "Commit-0",
            "content": "// GitVan v2 â€” Simple useTemplate() tests\n// Tests core template functionality with inflection filters\n\nimport { describe, it, expect, beforeEach, afterEach } from \"vitest\";\nimport { promises as fs } from \"node:fs\";\nimport { join } from \"pathe\";\nimport { useTemplate } from \"../src/composables/template.mjs\";\nimport { withGitVan } from \"../src/composables/ctx.mjs\";\n\ndescribe(\"useTemplate\", () => {\n  let tempDir;\n  let templatesDir;\n\n  // Mock context for testing\n  const mockContext = {\n    cwd: \"/test/project\",\n    config: {\n      templates: {\n        dirs: [\"templates\"],\n        autoescape: false,\n        noCache: true,\n      },\n    },\n    now: () => \"2024-01-15T10:30:00.000Z\",\n  };\n\n  beforeEach(async () => {\n    // Create temporary directory structure\n    tempDir = join(process.cwd(), \"test-temp\");\n    templatesDir = join(tempDir, \"templates\");\n\n    await fs.mkdir(templatesDir, { recursive: true });\n\n    // Create test templates\n    await fs.writeFile(\n      join(templatesDir, \"test.njk\"),\n      \"Hello {{ name | capitalize }}! Today is {{ nowISO }}.\",\n    );\n  });\n\n  afterEach(async () => {\n    // Clean up temporary directory\n    try {\n      await fs.rm(tempDir, { recursive: true, force: true });\n    } catch {\n      // Ignore cleanup errors\n    }\n  });\n\n  describe(\"basic functionality\", () => {\n    it(\"should render template with basic data\", async () => {\n      await withGitVan(mockContext, async () => {\n        const template = await useTemplate({ paths: [templatesDir] });\n        const result = template.render(\"test.njk\", { name: \"john\" });\n\n        expect(result).toBe(\"Hello John! Today is 2024-01-15T10:30:00.000Z.\");\n      });\n    });\n\n    it(\"should render string template\", async () => {\n      await withGitVan(mockContext, async () => {\n        const template = await useTemplate({ paths: [templatesDir] });\n        const result = template.renderString(\"Hello {{ name }}!\", {\n          name: \"world\",\n        });\n\n        expect(result).toBe(\"Hello world!\");\n      });\n    });\n\n    it(\"should render to file\", async () => {\n      await withGitVan(mockContext, async () => {\n        const template = await useTemplate({ paths: [templatesDir] });\n        const outputPath = join(tempDir, \"output.txt\");\n\n        const result = await template.renderToFile(\"test.njk\", outputPath, {\n          name: \"jane\",\n        });\n\n        expect(result.path).toBe(outputPath);\n        expect(result.bytes).toBeGreaterThan(0);\n\n        const content = await fs.readFile(outputPath, \"utf8\");\n        expect(content).toBe(\"Hello Jane! Today is 2024-01-15T10:30:00.000Z.\");\n      });\n    });\n  });\n\n  describe(\"inflection filters\", () => {\n    it(\"should handle pluralization\", async () => {\n      await withGitVan(mockContext, async () => {\n        const template = await useTemplate({ paths: [templatesDir] });\n        const result = template.renderString('{{ \"user\" | pluralize }}', {});\n        expect(result).toBe(\"users\");\n      });\n    });\n\n    it(\"should handle singularization\", async () => {\n      await withGitVan(mockContext, async () => {\n        const template = await useTemplate({ paths: [templatesDir] });\n        const result = template.renderString('{{ \"users\" | singularize }}', {});\n        expect(result).toBe(\"user\");\n      });\n    });\n\n    it(\"should handle camelize\", async () => {\n      await withGitVan(mockContext, async () => {\n        const template = await useTemplate({ paths: [templatesDir] });\n        const result = template.renderString(\n          '{{ \"user_profile\" | camelize }}',\n          {},\n        );\n        expect(result).toBe(\"UserProfile\");\n      });\n    });\n\n    it(\"should handle underscore\", async () => {\n      await withGitVan(mockContext, async () => {\n        const template = await useTemplate({ paths: [templatesDir] });\n        const result = template.renderString(\n          '{{ \"UserProfile\" | underscore }}',\n          {},\n        );\n        expect(result).toBe(\"user_profile\");\n      });\n    });\n\n    it(\"should handle dasherize\", async () => {\n      await withGitVan(mockContext, async () => {\n        const template = await useTemplate({ paths: [templatesDir] });\n        const result = template.renderString(\n          '{{ \"hello_world\" | dasherize }}',\n          {},\n        );\n        expect(result).toBe(\"hello-world\");\n      });\n    });\n  });\n\n  describe(\"built-in filters\", () => {\n    it(\"should handle json filter\", async () => {\n      await withGitVan(mockContext, async () => {\n        const template = await useTemplate({ paths: [templatesDir] });\n        const data = { name: \"test\", value: 42 };\n        const result = template.renderString(\"{{ data | json }}\", { data });\n\n        expect(result).toBe(JSON.stringify(data, null, 0));\n      });\n    });\n\n    it(\"should handle slug filter\", async () => {\n      await withGitVan(mockContext, async () => {\n        const template = await useTemplate({ paths: [templatesDir] });\n        const result = template.renderString('{{ \"Hello World!\" | slug }}', {});\n        expect(result).toBe(\"hello-world\");\n      });\n    });\n\n    it(\"should handle upper filter\", async () => {\n      await withGitVan(mockContext, async () => {\n        const template = await useTemplate({ paths: [templatesDir] });\n        const result = template.renderString('{{ \"hello\" | upper }}', {});\n        expect(result).toBe(\"HELLO\");\n      });\n    });\n\n    it(\"should handle lower filter\", async () => {\n      await withGitVan(mockContext, async () => {\n        const template = await useTemplate({ paths: [templatesDir] });\n        const result = template.renderString('{{ \"HELLO\" | lower }}', {});\n        expect(result).toBe(\"hello\");\n      });\n    });\n  });\n\n  describe(\"error handling\", () => {\n    it(\"should throw error for undefined variables\", async () => {\n      await withGitVan(mockContext, async () => {\n        const template = await useTemplate({ paths: [templatesDir] });\n\n        expect(() => {\n          template.renderString(\"{{ undefined_var }}\", {});\n        }).toThrow();\n      });\n    });\n\n    it(\"should throw error for now() calls\", async () => {\n      await withGitVan(mockContext, async () => {\n        const template = await useTemplate({ paths: [templatesDir] });\n\n        expect(() => {\n          template.renderString(\"{{ now() }}\", {});\n        }).toThrow(\"Templates must not call now()\");\n      });\n    });\n\n    it(\"should throw error for random() calls\", async () => {\n      await withGitVan(mockContext, async () => {\n        const template = await useTemplate({ paths: [templatesDir] });\n\n        expect(() => {\n          template.renderString(\"{{ random() }}\", {});\n        }).toThrow(\"Templates must not use random()\");\n      });\n    });\n  });\n\n  describe(\"context integration\", () => {\n    it(\"should include git context in template data\", async () => {\n      await withGitVan(mockContext, async () => {\n        const template = await useTemplate({ paths: [templatesDir] });\n        const result = template.renderString(\"{{ git.cwd }}\", {});\n\n        expect(result).toBe(mockContext.cwd);\n      });\n    });\n\n    it(\"should include nowISO when available\", async () => {\n      await withGitVan(mockContext, async () => {\n        const template = await useTemplate({ paths: [templatesDir] });\n        const result = template.renderString(\"{{ nowISO }}\", {});\n\n        expect(result).toBe(\"2024-01-15T10:30:00.000Z\");\n      });\n    });\n  });\n});\n"
        }
    ]
}