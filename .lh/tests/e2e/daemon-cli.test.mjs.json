{
    "sourceFile": "tests/e2e/daemon-cli.test.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758072623002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758072623002,
            "name": "Commit-0",
            "content": "// tests/e2e/daemon-cli.test.mjs\n// End-to-end tests for GitVan v2 Daemon CLI commands\n// Tests against the playground environment\n\nimport { describe, it, expect, beforeEach, afterEach } from \"vitest\";\nimport { spawn } from \"node:child_process\";\nimport { promises as fs } from \"node:fs\";\nimport { join } from \"pathe\";\nimport { fileURLToPath } from \"node:url\";\n\nconst __dirname = fileURLToPath(new URL(\".\", import.meta.url));\nconst playgroundDir = join(__dirname, \"../../playground\");\nconst gitvanCli = join(__dirname, \"../../src/cli.mjs\");\n\ndescribe(\"Daemon CLI E2E Tests\", () => {\n  let originalCwd;\n  let tempDir;\n\n  beforeEach(async () => {\n    originalCwd = process.cwd();\n    tempDir = join(playgroundDir, \"test-daemon-temp\");\n    await fs.mkdir(tempDir, { recursive: true });\n  });\n\n  afterEach(async () => {\n    process.chdir(originalCwd);\n    try {\n      await fs.rm(tempDir, { recursive: true, force: true });\n    } catch {\n      // Ignore cleanup errors\n    }\n  });\n\n  // Helper function to run CLI commands\n  async function runCliCommand(args, options = {}) {\n    return new Promise((resolve, reject) => {\n      const child = spawn(\"node\", [gitvanCli, ...args], {\n        cwd: playgroundDir,\n        stdio: [\"pipe\", \"pipe\", \"pipe\"],\n        ...options,\n      });\n\n      let stdout = \"\";\n      let stderr = \"\";\n\n      child.stdout.on(\"data\", (data) => {\n        stdout += data.toString();\n      });\n\n      child.stderr.on(\"data\", (data) => {\n        stderr += data.toString();\n      });\n\n      child.on(\"close\", (code) => {\n        resolve({\n          code,\n          stdout: stdout.trim(),\n          stderr: stderr.trim(),\n        });\n      });\n\n      child.on(\"error\", (error) => {\n        reject(error);\n      });\n    });\n  }\n\n  describe(\"daemon start command\", () => {\n    it(\"should start daemon for current worktree\", async () => {\n      const result = await runCliCommand([\"daemon\", \"start\"]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Daemon started\");\n    });\n\n    it(\"should start daemon for all worktrees\", async () => {\n      const result = await runCliCommand([\n        \"daemon\",\n        \"start\",\n        \"--worktrees\",\n        \"all\",\n      ]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Daemon started\");\n    });\n\n    it(\"should handle daemon startup errors gracefully\", async () => {\n      // Test in a directory without proper Git setup\n      const result = await runCliCommand([\"daemon\", \"start\"], {\n        cwd: tempDir,\n      });\n\n      // Should either succeed or fail gracefully\n      expect(result.code).toBeDefined();\n    });\n  });\n\n  describe(\"daemon stop command\", () => {\n    it(\"should stop running daemon\", async () => {\n      const result = await runCliCommand([\"daemon\", \"stop\"]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Daemon stopped\");\n    });\n\n    it(\"should handle stopping non-running daemon\", async () => {\n      const result = await runCliCommand([\"daemon\", \"stop\"]);\n\n      expect(result.code).toBe(0);\n      // Should either show \"stopped\" or \"not running\"\n      expect(result.stdout).toMatch(/stopped|not running/i);\n    });\n  });\n\n  describe(\"daemon status command\", () => {\n    it(\"should show daemon status\", async () => {\n      const result = await runCliCommand([\"daemon\", \"status\"]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"GitVan Daemon Status:\");\n    });\n\n    it(\"should indicate daemon state\", async () => {\n      const result = await runCliCommand([\"daemon\", \"status\"]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toMatch(/running|stopped|not running/i);\n    });\n\n    it(\"should show worktree information\", async () => {\n      const result = await runCliCommand([\"daemon\", \"status\"]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Worktree:\");\n    });\n  });\n\n  describe(\"daemon restart command\", () => {\n    it(\"should restart daemon\", async () => {\n      const result = await runCliCommand([\"daemon\", \"restart\"]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Daemon restarted\");\n    });\n\n    it(\"should handle restart when daemon is not running\", async () => {\n      const result = await runCliCommand([\"daemon\", \"restart\"]);\n\n      expect(result.code).toBe(0);\n      // Should either restart or start\n      expect(result.stdout).toMatch(/restarted|started/i);\n    });\n  });\n\n  describe(\"daemon command error handling\", () => {\n    it(\"should handle invalid daemon subcommands\", async () => {\n      const result = await runCliCommand([\"daemon\", \"invalid\"]);\n\n      expect(result.code).toBe(1);\n      expect(result.stderr).toContain(\"Unknown daemon command\");\n    });\n\n    it(\"should provide help for daemon commands\", async () => {\n      const result = await runCliCommand([\"daemon\", \"help\"]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Daemon Commands:\");\n    });\n  });\n\n  describe(\"daemon integration\", () => {\n    it(\"should work with playground configuration\", async () => {\n      const result = await runCliCommand([\"daemon\", \"status\"]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"GitVan Daemon Status:\");\n    });\n\n    it(\"should respect playground settings\", async () => {\n      const result = await runCliCommand([\"daemon\", \"start\"]);\n\n      expect(result.code).toBe(0);\n      // Should use playground configuration\n      expect(result.stdout).toContain(\"Daemon started\");\n    });\n  });\n});\n"
        }
    ]
}