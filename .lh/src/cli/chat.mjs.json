{
    "sourceFile": "src/cli/chat.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1758057329120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758072818946,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,14 +60,15 @@\n  * @returns {Promise<void>}\n  */\n async function draftSpec(config, args) {\n   try {\n-    if (!args.prompt) {\n+    const prompt = args.prompt || args.arg0;\n+    if (!prompt) {\n       throw new Error(\"Prompt required for draft command\");\n     }\n \n     const input = ChatInput.parse({\n-      prompt: args.prompt,\n+      prompt: prompt,\n       kind: args.kind || \"job\",\n       options: {\n         temperature: args.temp ? parseFloat(args.temp) : 0.7,\n         model: args.model,\n@@ -100,14 +101,15 @@\n  * @returns {Promise<void>}\n  */\n async function generateFiles(config, args) {\n   try {\n-    if (!args.prompt) {\n+    const prompt = args.prompt || args.arg0;\n+    if (!prompt) {\n       throw new Error(\"Prompt required for generate command\");\n     }\n \n     const input = ChatInput.parse({\n-      prompt: args.prompt,\n+      prompt: prompt,\n       kind: args.kind || \"job\",\n       path: args.path,\n       options: {\n         temperature: args.temp ? parseFloat(args.temp) : 0.7,\n"
                },
                {
                    "date": 1758072969417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,8 +47,11 @@\n \n     case \"design\":\n       return await designWizard(config, args);\n \n+    case \"help\":\n+      return await showHelp();\n+\n     default:\n       throw new Error(`Unknown chat subcommand: ${subcommand}`);\n   }\n }\n@@ -207,8 +210,35 @@\n   }\n }\n \n /**\n+ * Show help for chat commands\n+ * @returns {Promise<void>}\n+ */\n+async function showHelp() {\n+  console.log(\"GitVan Chat Commands:\");\n+  console.log();\n+  console.log(\"  draft <prompt>              Generate job/event specification\");\n+  console.log(\"  generate <prompt>           Generate complete job/event file\");\n+  console.log(\"  preview <prompt>            Preview changes (not implemented)\");\n+  console.log(\"  apply <prompt>              Apply generated changes (not implemented)\");\n+  console.log(\"  explain <job-path>          Explain existing job (not implemented)\");\n+  console.log(\"  design <requirements>       Interactive design wizard (not implemented)\");\n+  console.log(\"  help                        Show this help\");\n+  console.log();\n+  console.log(\"Options:\");\n+  console.log(\"  --kind <type>               Job type: job, event (default: job)\");\n+  console.log(\"  --temp <number>             Temperature 0.0-1.0 (default: 0.7)\");\n+  console.log(\"  --model <name>              AI model name (default: qwen3-coder:30b)\");\n+  console.log(\"  --output <path>             Output file path (generate only)\");\n+  console.log();\n+  console.log(\"Examples:\");\n+  console.log(\"  gitvan chat draft \\\"Create a backup job\\\"\");\n+  console.log(\"  gitvan chat generate \\\"Create a cleanup job\\\" --kind job\");\n+  console.log(\"  gitvan chat draft \\\"Create a push event\\\" --kind event --temp 0.5\");\n+}\n+\n+/**\n  * Generate job specification using AI\n  * @param {object} input - Chat input\n  * @param {object} config - GitVan config\n  * @returns {Promise<object>} Generated spec\n@@ -244,10 +274,19 @@\n     model: input.options?.model,\n     config,\n   });\n \n-  // Validate generated code\n-  if (!/defineJob\\s*\\(/.test(result.output)) {\n+  // Clean up AI output - remove markdown code blocks\n+  let cleanedOutput = result.output;\n+  \n+  // Remove markdown code block wrappers\n+  cleanedOutput = cleanedOutput.replace(/^```javascript\\s*\\n?/i, '');\n+  cleanedOutput = cleanedOutput.replace(/^```js\\s*\\n?/i, '');\n+  cleanedOutput = cleanedOutput.replace(/^```\\s*\\n?/i, '');\n+  cleanedOutput = cleanedOutput.replace(/\\n?```\\s*$/i, '');\n+  \n+  // Validate cleaned code\n+  if (!/defineJob\\s*\\(/.test(cleanedOutput)) {\n     throw new Error(\"Generated output is not a valid GitVan job module\");\n   }\n \n   // Determine file path\n@@ -256,16 +295,16 @@\n   const subdir = input.kind === \"event\" ? \"events/chat\" : \"jobs/chat\";\n   const filename = `${id}${input.kind === \"event\" ? \".evt.mjs\" : \".mjs\"}`;\n   const relPath = input.path || join(subdir, filename);\n \n-  const outPath = writeFileSafe(config.rootDir, relPath, result.output);\n+  const outPath = writeFileSafe(config.rootDir, relPath, cleanedOutput);\n \n   return ChatOutput.parse({\n     ok: true,\n     id,\n     mode: input.kind === \"event\" ? \"event\" : \"on-demand\",\n     filePath: outPath,\n-    source: result.output,\n+    source: cleanedOutput,\n     summary: \"Generated via chat interface\",\n     model: result.model,\n     modelParams: result.options,\n     duration: result.duration,\n"
                },
                {
                    "date": 1758073006507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -218,24 +218,40 @@\n   console.log(\"GitVan Chat Commands:\");\n   console.log();\n   console.log(\"  draft <prompt>              Generate job/event specification\");\n   console.log(\"  generate <prompt>           Generate complete job/event file\");\n-  console.log(\"  preview <prompt>            Preview changes (not implemented)\");\n-  console.log(\"  apply <prompt>              Apply generated changes (not implemented)\");\n-  console.log(\"  explain <job-path>          Explain existing job (not implemented)\");\n-  console.log(\"  design <requirements>       Interactive design wizard (not implemented)\");\n+  console.log(\n+    \"  preview <prompt>            Preview changes (not implemented)\",\n+  );\n+  console.log(\n+    \"  apply <prompt>              Apply generated changes (not implemented)\",\n+  );\n+  console.log(\n+    \"  explain <job-path>          Explain existing job (not implemented)\",\n+  );\n+  console.log(\n+    \"  design <requirements>       Interactive design wizard (not implemented)\",\n+  );\n   console.log(\"  help                        Show this help\");\n   console.log();\n   console.log(\"Options:\");\n-  console.log(\"  --kind <type>               Job type: job, event (default: job)\");\n-  console.log(\"  --temp <number>             Temperature 0.0-1.0 (default: 0.7)\");\n-  console.log(\"  --model <name>              AI model name (default: qwen3-coder:30b)\");\n+  console.log(\n+    \"  --kind <type>               Job type: job, event (default: job)\",\n+  );\n+  console.log(\n+    \"  --temp <number>             Temperature 0.0-1.0 (default: 0.7)\",\n+  );\n+  console.log(\n+    \"  --model <name>              AI model name (default: qwen3-coder:30b)\",\n+  );\n   console.log(\"  --output <path>             Output file path (generate only)\");\n   console.log();\n   console.log(\"Examples:\");\n-  console.log(\"  gitvan chat draft \\\"Create a backup job\\\"\");\n-  console.log(\"  gitvan chat generate \\\"Create a cleanup job\\\" --kind job\");\n-  console.log(\"  gitvan chat draft \\\"Create a push event\\\" --kind event --temp 0.5\");\n+  console.log('  gitvan chat draft \"Create a backup job\"');\n+  console.log('  gitvan chat generate \"Create a cleanup job\" --kind job');\n+  console.log(\n+    '  gitvan chat draft \"Create a push event\" --kind event --temp 0.5',\n+  );\n }\n \n /**\n  * Generate job specification using AI\n@@ -276,15 +292,15 @@\n   });\n \n   // Clean up AI output - remove markdown code blocks\n   let cleanedOutput = result.output;\n-  \n+\n   // Remove markdown code block wrappers\n-  cleanedOutput = cleanedOutput.replace(/^```javascript\\s*\\n?/i, '');\n-  cleanedOutput = cleanedOutput.replace(/^```js\\s*\\n?/i, '');\n-  cleanedOutput = cleanedOutput.replace(/^```\\s*\\n?/i, '');\n-  cleanedOutput = cleanedOutput.replace(/\\n?```\\s*$/i, '');\n-  \n+  cleanedOutput = cleanedOutput.replace(/^```javascript\\s*\\n?/i, \"\");\n+  cleanedOutput = cleanedOutput.replace(/^```js\\s*\\n?/i, \"\");\n+  cleanedOutput = cleanedOutput.replace(/^```\\s*\\n?/i, \"\");\n+  cleanedOutput = cleanedOutput.replace(/\\n?```\\s*$/i, \"\");\n+\n   // Validate cleaned code\n   if (!/defineJob\\s*\\(/.test(cleanedOutput)) {\n     throw new Error(\"Generated output is not a valid GitVan job module\");\n   }\n"
                },
                {
                    "date": 1758073176769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,10 +143,34 @@\n  * @returns {Promise<void>}\n  */\n async function previewChanges(config, args) {\n   try {\n-    console.log(\"Preview functionality not implemented in this version\");\n-    console.log(\"Use 'generate' command to see proposed changes\");\n+    const prompt = args.prompt || args.arg0;\n+    if (!prompt) {\n+      throw new Error(\"Prompt required for preview command\");\n+    }\n+\n+    const input = ChatInput.parse({\n+      prompt: prompt,\n+      kind: args.kind || \"job\",\n+      options: {\n+        temperature: args.temp ? parseFloat(args.temp) : 0.7,\n+        model: args.model,\n+      },\n+    });\n+\n+    // Generate the job without writing to file\n+    const result = await generateJobFiles(input, config, false);\n+\n+    console.log(\"Preview:\");\n+    console.log(`  Job Type: ${input.kind}`);\n+    console.log(`  Mode: ${result.mode}`);\n+    console.log(`  Summary: ${result.summary}`);\n+    console.log();\n+    console.log(\"Generated Code:\");\n+    console.log(result.source);\n+    console.log();\n+    console.log(\"Note: Use 'generate' command to create the actual file\");\n   } catch (error) {\n     logger.error(\"Failed to preview changes:\", error.message);\n     throw error;\n   }\n@@ -159,14 +183,35 @@\n  * @returns {Promise<void>}\n  */\n async function applyChanges(config, args) {\n   try {\n-    if (!args.id) {\n-      throw new Error(\"Generated ID required for apply command\");\n+    const prompt = args.prompt || args.arg0;\n+    if (!prompt) {\n+      throw new Error(\"Prompt required for apply command\");\n     }\n \n-    console.log(\"Apply functionality not implemented in this version\");\n-    console.log(\"Use 'generate' command and manually copy the output\");\n+    const name = args.name || args.id;\n+    if (!name) {\n+      throw new Error(\"Job name required for apply command (use --name)\");\n+    }\n+\n+    const input = ChatInput.parse({\n+      prompt: prompt,\n+      kind: args.kind || \"job\",\n+      id: name,\n+      options: {\n+        temperature: args.temp ? parseFloat(args.temp) : 0.7,\n+        model: args.model,\n+      },\n+    });\n+\n+    // Generate and apply the job\n+    const result = await generateJobFiles(input, config);\n+\n+    console.log(`Applied job: ${name}`);\n+    console.log(`  File: ${result.filePath}`);\n+    console.log(`  Mode: ${result.mode}`);\n+    console.log(`  Summary: ${result.summary}`);\n   } catch (error) {\n     logger.error(\"Failed to apply changes:\", error.message);\n     throw error;\n   }\n@@ -179,16 +224,51 @@\n  * @returns {Promise<void>}\n  */\n async function explainJob(config, args) {\n   try {\n-    if (!args.job) {\n+    const jobPath = args.job || args.arg0;\n+    if (!jobPath) {\n       throw new Error(\"Job path required for explain command\");\n     }\n \n-    console.log(\n-      \"Job explanation functionality not implemented in this version\",\n-    );\n-    console.log(\"Use 'list' command to see available jobs\");\n+    // Find the job file\n+    const { findJobFile, loadJobDefinition } = await import(\"../runtime/jobs.mjs\");\n+    const jobFile = findJobFile(config.rootDir, jobPath);\n+    \n+    if (!jobFile) {\n+      throw new Error(`Job not found: ${jobPath}`);\n+    }\n+\n+    // Load the job definition\n+    const definition = await loadJobDefinition(jobFile);\n+    \n+    if (!definition) {\n+      throw new Error(`Failed to load job definition: ${jobPath}`);\n+    }\n+\n+    // Generate explanation using AI\n+    const prompt = `Explain this GitVan job in plain English:\n+\n+File: ${jobPath}\n+Code:\n+${JSON.stringify(definition, null, 2)}\n+\n+Provide a clear explanation of:\n+1. What this job does\n+2. When it runs\n+3. What inputs it expects\n+4. What outputs it produces\n+5. Any important configuration details`;\n+\n+    const { generateText } = await import(\"../ai/provider.mjs\");\n+    const result = await generateText({ prompt, config });\n+\n+    console.log(\"Job Analysis:\");\n+    console.log(`  Job: ${jobPath}`);\n+    console.log(`  File: ${jobFile}`);\n+    console.log();\n+    console.log(\"Explanation:\");\n+    console.log(result.output);\n   } catch (error) {\n     logger.error(\"Failed to explain job:\", error.message);\n     throw error;\n   }\n@@ -218,20 +298,12 @@\n   console.log(\"GitVan Chat Commands:\");\n   console.log();\n   console.log(\"  draft <prompt>              Generate job/event specification\");\n   console.log(\"  generate <prompt>           Generate complete job/event file\");\n-  console.log(\n-    \"  preview <prompt>            Preview changes (not implemented)\",\n-  );\n-  console.log(\n-    \"  apply <prompt>              Apply generated changes (not implemented)\",\n-  );\n-  console.log(\n-    \"  explain <job-path>          Explain existing job (not implemented)\",\n-  );\n-  console.log(\n-    \"  design <requirements>       Interactive design wizard (not implemented)\",\n-  );\n+  console.log(\"  preview <prompt>            Preview changes before applying\");\n+  console.log(\"  apply <prompt>              Apply generated changes to filesystem\");\n+  console.log(\"  explain <job-path>          Explain existing job in plain English\");\n+  console.log(\"  design <requirements>       Interactive design wizard (not implemented)\");\n   console.log(\"  help                        Show this help\");\n   console.log();\n   console.log(\"Options:\");\n   console.log(\n@@ -243,12 +315,16 @@\n   console.log(\n     \"  --model <name>              AI model name (default: qwen3-coder:30b)\",\n   );\n   console.log(\"  --output <path>             Output file path (generate only)\");\n+  console.log(\"  --name <name>               Job name (apply only)\");\n   console.log();\n   console.log(\"Examples:\");\n   console.log('  gitvan chat draft \"Create a backup job\"');\n   console.log('  gitvan chat generate \"Create a cleanup job\" --kind job');\n+  console.log('  gitvan chat preview \"Create a logging job\"');\n+  console.log('  gitvan chat apply \"Create a test job\" --name \"my-test-job\"');\n+  console.log('  gitvan chat explain \"test/simple\"');\n   console.log(\n     '  gitvan chat draft \"Create a push event\" --kind event --temp 0.5',\n   );\n }\n@@ -279,11 +355,12 @@\n /**\n  * Generate job files using AI\n  * @param {object} input - Chat input\n  * @param {object} config - GitVan config\n+ * @param {boolean} writeFile - Whether to write file to disk (default: true)\n  * @returns {Promise<object>} Generated files\n  */\n-async function generateJobFiles(input, config) {\n+async function generateJobFiles(input, config, writeFile = true) {\n   const prompt = buildJobPrompt(input);\n \n   const result = await generateText({\n     prompt,\n@@ -311,9 +388,14 @@\n   const subdir = input.kind === \"event\" ? \"events/chat\" : \"jobs/chat\";\n   const filename = `${id}${input.kind === \"event\" ? \".evt.mjs\" : \".mjs\"}`;\n   const relPath = input.path || join(subdir, filename);\n \n-  const outPath = writeFileSafe(config.rootDir, relPath, cleanedOutput);\n+  let outPath = null;\n+  if (writeFile) {\n+    outPath = writeFileSafe(config.rootDir, relPath, cleanedOutput);\n+  } else {\n+    outPath = join(config.rootDir, relPath);\n+  }\n \n   return ChatOutput.parse({\n     ok: true,\n     id,\n"
                },
                {
                    "date": 1758074349995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -230,18 +230,20 @@\n       throw new Error(\"Job path required for explain command\");\n     }\n \n     // Find the job file\n-    const { findJobFile, loadJobDefinition } = await import(\"../runtime/jobs.mjs\");\n+    const { findJobFile, loadJobDefinition } = await import(\n+      \"../runtime/jobs.mjs\"\n+    );\n     const jobFile = findJobFile(config.rootDir, jobPath);\n-    \n+\n     if (!jobFile) {\n       throw new Error(`Job not found: ${jobPath}`);\n     }\n \n     // Load the job definition\n     const definition = await loadJobDefinition(jobFile);\n-    \n+\n     if (!definition) {\n       throw new Error(`Failed to load job definition: ${jobPath}`);\n     }\n \n@@ -299,11 +301,17 @@\n   console.log();\n   console.log(\"  draft <prompt>              Generate job/event specification\");\n   console.log(\"  generate <prompt>           Generate complete job/event file\");\n   console.log(\"  preview <prompt>            Preview changes before applying\");\n-  console.log(\"  apply <prompt>              Apply generated changes to filesystem\");\n-  console.log(\"  explain <job-path>          Explain existing job in plain English\");\n-  console.log(\"  design <requirements>       Interactive design wizard (not implemented)\");\n+  console.log(\n+    \"  apply <prompt>              Apply generated changes to filesystem\",\n+  );\n+  console.log(\n+    \"  explain <job-path>          Explain existing job in plain English\",\n+  );\n+  console.log(\n+    \"  design <requirements>       Interactive design wizard (not implemented)\",\n+  );\n   console.log(\"  help                        Show this help\");\n   console.log();\n   console.log(\"Options:\");\n   console.log(\n"
                }
            ],
            "date": 1758057329120,
            "name": "Commit-0",
            "content": "/**\n * GitVan v2 Chat CLI - Conversational job generation commands\n * Provides commands for AI-powered job/event/template generation\n */\n\nimport { loadOptions } from \"../config/loader.mjs\";\nimport { getCachedEnvironment } from \"../utils/nunjucks-config.mjs\";\nimport { writeFileSafe } from \"../utils/fs.mjs\";\nimport { ChatInput, ChatOutput } from \"../schemas/chat.zod.mjs\";\nimport { JobDef } from \"../schemas/job.zod.mjs\";\nimport { generateText, checkAIAvailability } from \"../ai/provider.mjs\";\nimport { fingerprint } from \"../utils/crypto.mjs\";\nimport { join } from \"pathe\";\nimport { createLogger } from \"../utils/logger.mjs\";\nimport {\n  JOB_WRITER_TEMPLATE,\n  EVENT_WRITER_TEMPLATE,\n  TEMPLATE_GENERATOR_TEMPLATE,\n} from \"../ai/prompts/templates.mjs\";\n\nconst logger = createLogger(\"chat-cli\");\n\n/**\n * Chat CLI command handler\n * @param {string} subcommand - Subcommand (draft, generate, preview, apply, explain)\n * @param {object} args - Command arguments\n * @returns {Promise<void>}\n */\nexport async function chatCommand(subcommand = \"draft\", args = {}) {\n  const config = await loadOptions();\n\n  switch (subcommand) {\n    case \"draft\":\n      return await draftSpec(config, args);\n\n    case \"generate\":\n      return await generateFiles(config, args);\n\n    case \"preview\":\n      return await previewChanges(config, args);\n\n    case \"apply\":\n      return await applyChanges(config, args);\n\n    case \"explain\":\n      return await explainJob(config, args);\n\n    case \"design\":\n      return await designWizard(config, args);\n\n    default:\n      throw new Error(`Unknown chat subcommand: ${subcommand}`);\n  }\n}\n\n/**\n * Draft a job/event spec from prompt (no file writes)\n * @param {object} config - GitVan config\n * @param {object} args - Draft arguments\n * @returns {Promise<void>}\n */\nasync function draftSpec(config, args) {\n  try {\n    if (!args.prompt) {\n      throw new Error(\"Prompt required for draft command\");\n    }\n\n    const input = ChatInput.parse({\n      prompt: args.prompt,\n      kind: args.kind || \"job\",\n      options: {\n        temperature: args.temp ? parseFloat(args.temp) : 0.7,\n        model: args.model,\n        stream: false,\n      },\n    });\n\n    // Check AI availability\n    const availability = await checkAIAvailability(config);\n    if (!availability.available) {\n      console.log(\"AI not available, using wizard fallback...\");\n      return await designWizard(config, args);\n    }\n\n    // Generate spec using AI\n    const result = await generateSpec(input, config);\n\n    console.log(\"Generated specification:\");\n    console.log(JSON.stringify(result.spec, null, 2));\n  } catch (error) {\n    logger.error(\"Failed to draft spec:\", error.message);\n    throw error;\n  }\n}\n\n/**\n * Generate files from prompt (no writes, shows plan)\n * @param {object} config - GitVan config\n * @param {object} args - Generate arguments\n * @returns {Promise<void>}\n */\nasync function generateFiles(config, args) {\n  try {\n    if (!args.prompt) {\n      throw new Error(\"Prompt required for generate command\");\n    }\n\n    const input = ChatInput.parse({\n      prompt: args.prompt,\n      kind: args.kind || \"job\",\n      path: args.path,\n      options: {\n        temperature: args.temp ? parseFloat(args.temp) : 0.7,\n        model: args.model,\n      },\n    });\n\n    // Generate files\n    const result = await generateJobFiles(input, config);\n\n    console.log(\"Generated files:\");\n    console.log(`  File: ${result.filePath}`);\n    console.log(`  Mode: ${result.mode}`);\n    console.log(`  Summary: ${result.summary}`);\n    console.log();\n    console.log(\"Source code:\");\n    console.log(result.source);\n  } catch (error) {\n    logger.error(\"Failed to generate files:\", error.message);\n    throw error;\n  }\n}\n\n/**\n * Preview changes before applying\n * @param {object} config - GitVan config\n * @param {object} args - Preview arguments\n * @returns {Promise<void>}\n */\nasync function previewChanges(config, args) {\n  try {\n    console.log(\"Preview functionality not implemented in this version\");\n    console.log(\"Use 'generate' command to see proposed changes\");\n  } catch (error) {\n    logger.error(\"Failed to preview changes:\", error.message);\n    throw error;\n  }\n}\n\n/**\n * Apply generated changes to filesystem\n * @param {object} config - GitVan config\n * @param {object} args - Apply arguments\n * @returns {Promise<void>}\n */\nasync function applyChanges(config, args) {\n  try {\n    if (!args.id) {\n      throw new Error(\"Generated ID required for apply command\");\n    }\n\n    console.log(\"Apply functionality not implemented in this version\");\n    console.log(\"Use 'generate' command and manually copy the output\");\n  } catch (error) {\n    logger.error(\"Failed to apply changes:\", error.message);\n    throw error;\n  }\n}\n\n/**\n * Explain an existing job in plain English\n * @param {object} config - GitVan config\n * @param {object} args - Explain arguments\n * @returns {Promise<void>}\n */\nasync function explainJob(config, args) {\n  try {\n    if (!args.job) {\n      throw new Error(\"Job path required for explain command\");\n    }\n\n    console.log(\n      \"Job explanation functionality not implemented in this version\",\n    );\n    console.log(\"Use 'list' command to see available jobs\");\n  } catch (error) {\n    logger.error(\"Failed to explain job:\", error.message);\n    throw error;\n  }\n}\n\n/**\n * Interactive design wizard (no AI required)\n * @param {object} config - GitVan config\n * @param {object} args - Design arguments\n * @returns {Promise<void>}\n */\nasync function designWizard(config, args) {\n  try {\n    console.log(\"Design wizard not implemented in this version\");\n    console.log(\"Use 'draft' or 'generate' commands with AI\");\n  } catch (error) {\n    logger.error(\"Failed to run design wizard:\", error.message);\n    throw error;\n  }\n}\n\n/**\n * Generate job specification using AI\n * @param {object} input - Chat input\n * @param {object} config - GitVan config\n * @returns {Promise<object>} Generated spec\n */\nasync function generateSpec(input, config) {\n  const prompt = buildSpecPrompt(input);\n\n  const result = await generateText({\n    prompt,\n    model: input.options?.model,\n    config,\n  });\n\n  try {\n    const spec = JSON.parse(result.output);\n    return { spec, metadata: result };\n  } catch (error) {\n    throw new Error(`Failed to parse generated spec: ${error.message}`);\n  }\n}\n\n/**\n * Generate job files using AI\n * @param {object} input - Chat input\n * @param {object} config - GitVan config\n * @returns {Promise<object>} Generated files\n */\nasync function generateJobFiles(input, config) {\n  const prompt = buildJobPrompt(input);\n\n  const result = await generateText({\n    prompt,\n    model: input.options?.model,\n    config,\n  });\n\n  // Validate generated code\n  if (!/defineJob\\s*\\(/.test(result.output)) {\n    throw new Error(\"Generated output is not a valid GitVan job module\");\n  }\n\n  // Determine file path\n  const id =\n    input.id || `chat-${fingerprint({ t: Date.now(), prompt: input.prompt })}`;\n  const subdir = input.kind === \"event\" ? \"events/chat\" : \"jobs/chat\";\n  const filename = `${id}${input.kind === \"event\" ? \".evt.mjs\" : \".mjs\"}`;\n  const relPath = input.path || join(subdir, filename);\n\n  const outPath = writeFileSafe(config.rootDir, relPath, result.output);\n\n  return ChatOutput.parse({\n    ok: true,\n    id,\n    mode: input.kind === \"event\" ? \"event\" : \"on-demand\",\n    filePath: outPath,\n    source: result.output,\n    summary: \"Generated via chat interface\",\n    model: result.model,\n    modelParams: result.options,\n    duration: result.duration,\n  });\n}\n\n/**\n * Build specification generation prompt\n * @param {object} input - Chat input\n * @returns {string} Prompt text\n */\nfunction buildSpecPrompt(input) {\n  return `Generate a GitVan ${input.kind} specification in JSON format for the following request:\n\n\"${input.prompt}\"\n\nReturn only valid JSON that matches the GitVan ${input.kind} schema. Include:\n- id: unique identifier\n- meta: description and tags\n- ${input.kind === \"event\" ? \"on: event predicate\" : \"run: function signature\"}\n- appropriate configuration options\n\nDo not include any explanatory text, only the JSON specification.`;\n}\n\n/**\n * Build job generation prompt\n * @param {object} input - Chat input\n * @returns {string} Prompt text\n */\nfunction buildJobPrompt(input) {\n  const template =\n    input.kind === \"event\" ? EVENT_WRITER_TEMPLATE : JOB_WRITER_TEMPLATE;\n\n  return `Generate a GitVan ${input.kind} module for the following request:\n\n\"${input.prompt}\"\n\nUse this template structure:\n${template}\n\nReplace the placeholders with appropriate values based on the request. Generate complete, working code that can be executed by GitVan.`;\n}\n"
        }
    ]
}