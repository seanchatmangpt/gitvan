{
    "sourceFile": "docs/playground/architecture-guide.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758051254570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758051254570,
            "name": "Commit-0",
            "content": "# GitVan Playground - Architecture Guide\n\n## 🏗️ Architecture Overview\n\nThe GitVan playground demonstrates a complete Git-native job execution system with advanced features including job discovery, execution, template rendering, git integration, cron scheduling, event-driven jobs, and hooks.\n\n## 📐 System Architecture\n\n### High-Level Architecture\n\n```\n┌─────────────────────────────────────────────────────────────┐\n│                    GitVan Playground                        │\n├─────────────────────────────────────────────────────────────┤\n│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐        │\n│  │   Job CLI   │  │   Daemon    │  │   Config    │        │\n│  │             │  │             │  │             │        │\n│  └─────────────┘  └─────────────┘  └─────────────┘        │\n├─────────────────────────────────────────────────────────────┤\n│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐        │\n│  │ Job Runner  │  │  Template   │  │    Git      │        │\n│  │             │  │   Engine    │  │  Composable │        │\n│  └─────────────┘  └─────────────┘  └─────────────┘        │\n├─────────────────────────────────────────────────────────────┤\n│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐        │\n│  │   Cron     │  │   Events    │  │   Hooks     │        │\n│  │ Scheduler  │  │ Evaluator   │  │   System    │        │\n│  └─────────────┘  └─────────────┘  └─────────────┘        │\n├─────────────────────────────────────────────────────────────┤\n│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐        │\n│  │   Git      │  │   File      │  │   Config    │        │\n│  │ Operations │  │   System    │  │   System    │        │\n│  └─────────────┘  └─────────────┘  └─────────────┘        │\n└─────────────────────────────────────────────────────────────┘\n```\n\n### Component Relationships\n\n```\n┌─────────────┐    ┌─────────────┐    ┌─────────────┐\n│   dev.mjs   │───▶│  Job CLI    │───▶│ Job Runner  │\n│             │    │             │    │             │\n└─────────────┘    └─────────────┘    └─────────────┘\n       │                   │                   │\n       ▼                   ▼                   ▼\n┌─────────────┐    ┌─────────────┐    ┌─────────────┐\n│   Config    │    │   Daemon    │    │   Git       │\n│   Loader    │    │             │    │ Composable  │\n└─────────────┘    └─────────────┘    └─────────────┘\n       │                   │                   │\n       ▼                   ▼                   ▼\n┌─────────────┐    ┌─────────────┐    ┌─────────────┐\n│  Template   │    │   Cron      │    │   Events    │\n│   Engine    │    │ Scheduler   │    │ Evaluator   │\n└─────────────┘    └─────────────┘    └─────────────┘\n```\n\n## 🔧 Core Components\n\n### 1. Job Discovery System\n\n**Purpose**: Automatically discover and load job definitions from the filesystem.\n\n**Components**:\n- `src/jobs/scan.mjs` - File system scanning\n- `src/jobs/define.mjs` - Job definition validation\n- `tinyglobby` - Pattern matching for job files\n\n**Flow**:\n```\nFile System → tinyglobby → Dynamic Import → Validation → Job Registry\n```\n\n**Key Features**:\n- Recursive directory scanning\n- Pattern matching (`jobs/**/*.mjs`)\n- Dynamic ES module imports\n- Job ID inference from file paths\n- Mode detection (`.cron.mjs`, `.evt.mjs`)\n\n### 2. Job Execution Engine\n\n**Purpose**: Execute jobs with proper context, locking, and error handling.\n\n**Components**:\n- `src/jobs/runner.mjs` - Main execution engine\n- `src/composables/git.mjs` - Git operations\n- `src/composables/template.mjs` - Template rendering\n\n**Flow**:\n```\nJob Definition → Lock Acquisition → Context Building → Execution → Receipt Writing → Lock Release\n```\n\n**Key Features**:\n- Atomic locking with Git refs\n- Rich execution context\n- Error handling and recovery\n- Receipt generation\n- Artifact management\n\n### 3. Template System\n\n**Purpose**: Render dynamic content using Nunjucks templates.\n\n**Components**:\n- `src/utils/nunjucks-config.mjs` - Template configuration\n- `nunjucks` - Template engine\n- Custom filters for string transformations\n\n**Flow**:\n```\nTemplate File → Nunjucks Engine → Custom Filters → Rendered Output\n```\n\n**Key Features**:\n- Nunjucks template engine\n- Custom inflection filters\n- Template caching\n- File and string rendering\n- Dynamic variable injection\n\n### 4. Git Integration\n\n**Purpose**: Provide Git-native operations and storage.\n\n**Components**:\n- `src/composables/git.mjs` - Git operations wrapper\n- Git refs for locking\n- Git notes for receipts\n- Git log parsing\n\n**Flow**:\n```\nGit Commands → execFile → Error Handling → Formatted Output\n```\n\n**Key Features**:\n- POSIX-first Git operations\n- Deterministic environment\n- Error handling\n- Repository information\n- Commit history parsing\n\n### 5. Cron Scheduler\n\n**Purpose**: Execute jobs on a schedule using cron expressions.\n\n**Components**:\n- `src/jobs/cron.mjs` - Cron parsing and scheduling\n- `JobDaemon` - Daemon orchestration\n- Cron expression validation\n\n**Flow**:\n```\nCron Expression → Parser → Schedule → Timer → Job Execution\n```\n\n**Key Features**:\n- Cron expression parsing\n- Schedule management\n- Next execution calculation\n- Daemon integration\n\n### 6. Event System\n\n**Purpose**: Trigger jobs based on Git events using predicates.\n\n**Components**:\n- `src/jobs/events.mjs` - Event evaluation\n- Event predicates\n- Git event detection\n\n**Flow**:\n```\nGit Events → Predicate Evaluation → Job Triggering → Execution\n```\n\n**Key Features**:\n- Event predicate evaluation\n- Git event detection\n- Logical operators (any/all)\n- Pattern matching\n- Daemon integration\n\n### 7. Hooks System\n\n**Purpose**: Provide extensibility through lifecycle hooks.\n\n**Components**:\n- `src/jobs/hooks.mjs` - Hooks management\n- `unjs/hookable` - Hook implementation\n- Default hooks\n\n**Flow**:\n```\nJob Lifecycle → Hook Registration → Hook Execution → Custom Logic\n```\n\n**Key Features**:\n- Lifecycle hooks\n- Custom hook registration\n- Default hooks\n- Hook statistics\n- Error handling\n\n## 🔄 Data Flow\n\n### Job Execution Flow\n\n```\n1. Job Discovery\n   ├── Scan filesystem for job files\n   ├── Load job definitions\n   └── Validate job schemas\n\n2. Job Execution\n   ├── Acquire lock (Git ref)\n   ├── Build execution context\n   ├── Execute job function\n   ├── Write receipt (Git notes)\n   └── Release lock\n\n3. Template Rendering\n   ├── Load template file\n   ├── Apply custom filters\n   ├── Inject variables\n   └── Generate output\n\n4. Git Operations\n   ├── Execute Git commands\n   ├── Parse output\n   ├── Handle errors\n   └── Return formatted data\n```\n\n### Daemon Flow\n\n```\n1. Daemon Startup\n   ├── Load configuration\n   ├── Initialize schedulers\n   ├── Start cron scheduler\n   └── Start event monitor\n\n2. Cron Scheduling\n   ├── Parse cron expressions\n   ├── Calculate next execution\n   ├── Schedule timer\n   └── Execute jobs\n\n3. Event Monitoring\n   ├── Monitor Git events\n   ├── Evaluate predicates\n   ├── Trigger jobs\n   └── Process results\n\n4. Daemon Shutdown\n   ├── Stop schedulers\n   ├── Clean up resources\n   └── Graceful exit\n```\n\n## 🗂️ File Organization\n\n### Directory Structure\n\n```\nplayground/\n├── dev.mjs                 # Main entry point\n├── gitvan.config.js        # Configuration\n├── package.json            # Dependencies\n├── jobs/                   # Job definitions\n│   ├── docs/\n│   │   └── changelog.mjs   # Changelog job\n│   ├── test/\n│   │   ├── simple.mjs      # Simple job\n│   │   └── cleanup.cron.mjs # Cron job\n│   └── alerts/\n│       └── release.evt.mjs # Event job\n├── templates/              # Template files\n│   └── changelog.njk       # Changelog template\n└── dist/                   # Generated output\n    ├── CHANGELOG.md        # Generated changelog\n    ├── status-report.json  # Generated report\n    └── notifications/      # Release notifications\n```\n\n### Import Dependencies\n\n```\ndev.mjs\n├── src/jobs/scan.mjs\n├── src/jobs/runner.mjs\n├── src/jobs/daemon.mjs\n├── src/config/loader.mjs\n└── src/jobs/hooks.mjs\n\njobs/*.mjs\n├── gitvan/define\n├── gitvan/useGit\n└── gitvan/useTemplate\n\ntemplates/*.njk\n└── Nunjucks engine\n```\n\n## 🔐 Security Considerations\n\n### Git Operations\n\n- **Read-only by default**: Most operations are read-only\n- **Atomic operations**: Lock acquisition prevents conflicts\n- **Error handling**: Graceful failure without corruption\n- **Permission checks**: Verify Git repository access\n\n### File System\n\n- **Path validation**: Prevent directory traversal\n- **Permission checks**: Verify file system access\n- **Cleanup**: Remove temporary files\n- **Error handling**: Handle file system errors\n\n### Job Execution\n\n- **Sandboxing**: Jobs run in controlled environment\n- **Resource limits**: Prevent resource exhaustion\n- **Error isolation**: Job failures don't affect system\n- **Audit trail**: Complete execution history\n\n## ⚡ Performance Considerations\n\n### Caching\n\n- **Template caching**: Cache compiled templates\n- **Job discovery**: Cache job definitions\n- **Git operations**: Cache repository information\n- **Configuration**: Cache loaded configuration\n\n### Optimization\n\n- **Parallel execution**: Run independent operations in parallel\n- **Resource pooling**: Reuse expensive resources\n- **Lazy loading**: Load resources on demand\n- **Memory management**: Clean up unused resources\n\n### Monitoring\n\n- **Execution time**: Track job performance\n- **Resource usage**: Monitor memory and CPU\n- **Error rates**: Track failure rates\n- **Throughput**: Measure job processing rate\n\n## 🔧 Configuration Architecture\n\n### Configuration Loading\n\n```\ngitvan.config.js → c12 → defu → normalizeRuntimeConfig → Final Config\n```\n\n### Configuration Hierarchy\n\n1. **Defaults**: Built-in default values\n2. **User Config**: `gitvan.config.js` file\n3. **Environment**: Environment variables\n4. **Runtime**: Runtime overrides\n\n### Configuration Validation\n\n- **Schema validation**: Validate configuration structure\n- **Type checking**: Ensure correct data types\n- **Value validation**: Check value ranges and formats\n- **Dependency validation**: Verify required dependencies\n\n## 🧪 Testing Architecture\n\n### Test Types\n\n1. **Unit Tests**: Individual component testing\n2. **Integration Tests**: Component interaction testing\n3. **E2E Tests**: Full system testing\n4. **Performance Tests**: Performance validation\n\n### Test Structure\n\n```\ntests/\n├── playground-e2e.test.mjs  # E2E tests\n├── composables.test.mjs    # Composable tests\n├── config-simple.test.mjs  # Config tests\n└── nunjucks-config.test.mjs # Template tests\n```\n\n### Test Execution\n\n- **Vitest**: Test runner and framework\n- **E2E Testing**: Full playground validation\n- **Mocking**: Isolated component testing\n- **Coverage**: Test coverage reporting\n\n## 🚀 Deployment Architecture\n\n### Development Mode\n\n- **Hot reload**: File watching and reloading\n- **Debug logging**: Detailed execution logs\n- **Error reporting**: Comprehensive error information\n- **Development tools**: Enhanced debugging capabilities\n\n### Production Mode\n\n- **Optimized performance**: Caching and optimization\n- **Error handling**: Graceful error recovery\n- **Logging**: Production-appropriate logging\n- **Monitoring**: Performance and health monitoring\n\n### CI/CD Integration\n\n- **Automated testing**: Run tests on changes\n- **Deployment**: Automated deployment pipeline\n- **Monitoring**: Continuous monitoring\n- **Rollback**: Quick rollback capabilities\n\n## 📊 Monitoring and Observability\n\n### Metrics\n\n- **Job execution time**: Performance metrics\n- **Success/failure rates**: Reliability metrics\n- **Resource usage**: Resource consumption\n- **Throughput**: Job processing rate\n\n### Logging\n\n- **Structured logging**: JSON-formatted logs\n- **Log levels**: Debug, info, warn, error\n- **Context information**: Rich context data\n- **Log aggregation**: Centralized logging\n\n### Health Checks\n\n- **System health**: Overall system status\n- **Component health**: Individual component status\n- **Dependency health**: External dependency status\n- **Performance health**: Performance indicators\n\nThis architecture guide provides a comprehensive understanding of the GitVan playground system design and implementation.\n"
        }
    ]
}