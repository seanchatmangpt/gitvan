{
    "sourceFile": "docs/playground/troubleshooting-guide.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758051254570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758051254570,
            "name": "Commit-0",
            "content": "# GitVan Playground - Troubleshooting Guide\n\n## üîç Common Issues and Solutions\n\nThis guide helps diagnose and resolve common issues encountered when using the GitVan playground.\n\n## üö® Quick Diagnostics\n\n### Check System Status\n\n```bash\ncd playground\n\n# Check if jobs are discovered\nnpm run list\n\n# Check daemon status\nnpm run status\n\n# Check git receipts\ngit notes --ref=refs/notes/gitvan/results show HEAD\n\n# Check generated files\nls -la dist/\n```\n\n### Verify Dependencies\n\n```bash\n# Check Node.js version\nnode --version  # Should be 18+\n\n# Check pnpm installation\npnpm --version\n\n# Check Git installation\ngit --version\n\n# Check repository status\ngit status\n```\n\n## üîß Job Discovery Issues\n\n### Issue: \"No jobs found\"\n\n**Symptoms**:\n```\nDiscovered jobs:\n==================================================\nNo jobs found\n```\n\n**Causes**:\n1. Job files not in correct location\n2. Incorrect file naming\n3. Invalid ES module exports\n4. Import path errors\n\n**Solutions**:\n\n1. **Check file location**:\n   ```bash\n   ls -la jobs/\n   ls -la jobs/docs/\n   ls -la jobs/test/\n   ls -la jobs/alerts/\n   ```\n\n2. **Verify file naming**:\n   - On-demand: `*.mjs`\n   - Cron: `*.cron.mjs`\n   - Event: `*.evt.mjs`\n\n3. **Check exports**:\n   ```javascript\n   // Correct export\n   export default defineJob({\n     meta: { desc: \"Job description\" },\n     async run({ ctx }) {\n       // Job implementation\n     }\n   });\n   ```\n\n4. **Verify imports**:\n   ```javascript\n   // Correct imports\n   import { defineJob } from \"gitvan/define\";\n   import { useGit } from \"gitvan/useGit\";\n   import { useTemplate } from \"gitvan/useTemplate\";\n   ```\n\n### Issue: \"Failed to load job from...\"\n\n**Symptoms**:\n```\nFailed to load job from /path/to/job.mjs: Cannot find module...\n```\n\n**Causes**:\n1. Missing dependencies\n2. Incorrect import paths\n3. Package not installed\n\n**Solutions**:\n\n1. **Install dependencies**:\n   ```bash\n   cd playground\n   pnpm install\n   ```\n\n2. **Check package.json**:\n   ```json\n   {\n     \"devDependencies\": {\n       \"gitvan\": \"link:..\"\n     }\n   }\n   ```\n\n3. **Verify package exports**:\n   ```bash\n   # Check if package exports are working\n   node -e \"import('gitvan/define').then(m => console.log(Object.keys(m)))\"\n   ```\n\n## üéØ Job Execution Issues\n\n### Issue: \"Job not found: job-id\"\n\n**Symptoms**:\n```\nError: Job not found: job-id\n```\n\n**Causes**:\n1. Incorrect job ID\n2. Job not discovered\n3. Typo in job name\n\n**Solutions**:\n\n1. **List available jobs**:\n   ```bash\n   npm run list\n   ```\n\n2. **Use correct job ID**:\n   ```bash\n   # Correct format: path:to:job\n   npm run run:changelog  # docs:changelog\n   npm run run:simple     # test:simple\n   ```\n\n3. **Check job discovery**:\n   ```bash\n   node -e \"import('./dev.mjs').then(m=>m.list())\"\n   ```\n\n### Issue: \"Command failed: git...\"\n\n**Symptoms**:\n```\nCommand failed: git log --pretty=%h%x09%s -n\nerror: -n requires an argument\n```\n\n**Causes**:\n1. Incorrect git command arguments\n2. Git command syntax errors\n3. Missing git arguments\n\n**Solutions**:\n\n1. **Fix git command arguments**:\n   ```javascript\n   // Incorrect\n   const logOutput = await git.log(\"%h%x09%s\", \"-n\", \"30\");\n   \n   // Correct\n   const logOutput = await git.log(\"%h%x09%s\", [\"-n\", \"30\"]);\n   ```\n\n2. **Check git command syntax**:\n   ```bash\n   # Test git command manually\n   git log --pretty=%h%x09%s -n 30\n   ```\n\n3. **Verify git repository**:\n   ```bash\n   git status\n   git log --oneline -5\n   ```\n\n### Issue: \"template not found: template.njk\"\n\n**Symptoms**:\n```\ntemplate not found: template.njk\n```\n\n**Causes**:\n1. Template file missing\n2. Incorrect template path\n3. Template directory not configured\n\n**Solutions**:\n\n1. **Check template file exists**:\n   ```bash\n   ls -la templates/\n   cat templates/changelog.njk\n   ```\n\n2. **Verify template path**:\n   ```javascript\n   // Correct template path\n   const outputPath = await template.renderToFile(\n     \"changelog.njk\",  // Template name\n     \"dist/CHANGELOG.md\",  // Output path\n     data\n   );\n   ```\n\n3. **Check template configuration**:\n   ```javascript\n   // gitvan.config.js\n   export default {\n     templates: { \n       engine: \"nunjucks\", \n       dirs: [\"templates\"]  // Template directory\n     }\n   };\n   ```\n\n## üîí Lock Management Issues\n\n### Issue: \"Job job-id is already running\"\n\n**Symptoms**:\n```\nJob test:simple is already running\n```\n\n**Causes**:\n1. Previous job execution didn't complete\n2. Lock not released properly\n3. Concurrent execution attempt\n\n**Solutions**:\n\n1. **Check for running jobs**:\n   ```bash\n   # Check git refs for locks\n   git show-ref | grep gitvan/locks\n   ```\n\n2. **Release lock manually**:\n   ```bash\n   # Remove lock ref\n   git update-ref -d refs/gitvan/locks/test:simple\n   ```\n\n3. **Use force flag**:\n   ```bash\n   # Force execution (bypasses lock)\n   node -e \"import('./dev.mjs').then(m=>m.run('test:simple', {force: true}))\"\n   ```\n\n### Issue: \"fatal: update_ref failed for ref...\"\n\n**Symptoms**:\n```\nfatal: update_ref failed for ref 'refs/gitvan/locks/job-id': refusing to update ref with bad name\n```\n\n**Causes**:\n1. Invalid job ID characters\n2. Git ref naming restrictions\n3. Special characters in job ID\n\n**Solutions**:\n\n1. **Check job ID format**:\n   ```javascript\n   // Job IDs should use colons for separation\n   // Good: \"docs:changelog\", \"test:simple\"\n   // Bad: \"docs/changelog\", \"test.simple\"\n   ```\n\n2. **Verify job ID encoding**:\n   ```javascript\n   // The system automatically encodes job IDs for git refs\n   // Colons become hyphens, special chars become underscores\n   ```\n\n## üìù Template Rendering Issues\n\n### Issue: \"Template syntax error\"\n\n**Symptoms**:\n```\nTemplate syntax error: Unexpected token\n```\n\n**Causes**:\n1. Invalid Nunjucks syntax\n2. Missing template variables\n3. Incorrect filter usage\n\n**Solutions**:\n\n1. **Check template syntax**:\n   ```njk\n   <!-- Correct syntax -->\n   {{ variable }}\n   {% for item in items %}\n     {{ item }}\n   {% endfor %}\n   \n   <!-- Incorrect syntax -->\n   {{ variable\n   {% for item in items\n     {{ item\n   {% endfor\n   ```\n\n2. **Verify template variables**:\n   ```javascript\n   // Ensure all template variables are provided\n   const data = {\n     commits: commits,\n     generatedAt: ctx.nowISO,\n     totalCommits: commits.length\n   };\n   ```\n\n3. **Check filter usage**:\n   ```njk\n   <!-- Correct filter syntax -->\n   {{ 'hello' | capitalize }}\n   {{ data | json(2) }}\n   \n   <!-- Incorrect filter syntax -->\n   {{ 'hello' | capitalize 2 }}\n   {{ data | json 2 }}\n   ```\n\n### Issue: \"Filter not found\"\n\n**Symptoms**:\n```\nFilter not found: filter-name\n```\n\n**Causes**:\n1. Filter not registered\n2. Incorrect filter name\n3. Missing filter dependency\n\n**Solutions**:\n\n1. **Check available filters**:\n   ```bash\n   node -e \"import('./src/utils/nunjucks-config.mjs').then(m => console.log(m.listAvailableFilters()))\"\n   ```\n\n2. **Use correct filter names**:\n   ```njk\n   <!-- Available filters -->\n   {{ 'hello' | capitalize }}\n   {{ 'cats' | pluralize }}\n   {{ 'hello_world' | camelize }}\n   {{ 'helloWorld' | underscore }}\n   {{ 'hello_world' | dasherize }}\n   {{ 'hello_world' | humanize }}\n   {{ 'hello world' | titleize }}\n   {{ data | json(2) }}\n   ```\n\n## üîÑ Daemon Issues\n\n### Issue: \"Daemon is not running\"\n\n**Symptoms**:\n```\nDaemon is not running\n```\n\n**Causes**:\n1. Daemon not started\n2. Daemon crashed\n3. Process terminated\n\n**Solutions**:\n\n1. **Start daemon**:\n   ```bash\n   npm run daemon\n   ```\n\n2. **Check daemon status**:\n   ```bash\n   npm run status\n   ```\n\n3. **Start daemon programmatically**:\n   ```bash\n   node -e \"import('./dev.mjs').then(m=>m.startDaemon())\"\n   ```\n\n### Issue: \"Cron scheduler not working\"\n\n**Symptoms**:\n```\nNo cron jobs scheduled\n```\n\n**Causes**:\n1. No cron jobs defined\n2. Invalid cron expressions\n3. Scheduler not started\n\n**Solutions**:\n\n1. **Check cron jobs**:\n   ```bash\n   # Look for .cron.mjs files\n   find jobs/ -name \"*.cron.mjs\"\n   ```\n\n2. **Verify cron expressions**:\n   ```javascript\n   // Valid cron expressions\n   cron: \"0 2 * * *\"        // Daily at 2 AM\n   cron: \"*/15 * * * *\"     // Every 15 minutes\n   cron: \"0 9-17 * * 1-5\"   // Business hours\n   ```\n\n3. **Test cron parsing**:\n   ```bash\n   node -e \"import('./src/jobs/cron.mjs').then(m => { const s = new m.CronScheduler(); console.log(s.parseCron('0 2 * * *')); })\"\n   ```\n\n## üéØ Event System Issues\n\n### Issue: \"No event-driven jobs found\"\n\n**Symptoms**:\n```\nNo event-driven jobs found\n```\n\n**Causes**:\n1. No event jobs defined\n2. Invalid event predicates\n3. Event evaluator not working\n\n**Solutions**:\n\n1. **Check event jobs**:\n   ```bash\n   # Look for .evt.mjs files\n   find jobs/ -name \"*.evt.mjs\"\n   ```\n\n2. **Verify event predicates**:\n   ```javascript\n   // Valid event predicates\n   on: {\n     any: [\n       { tagCreate: \"v*.*.*\" },\n       { semverTag: true }\n     ]\n   }\n   ```\n\n3. **Test event evaluation**:\n   ```bash\n   node -e \"import('./src/jobs/events.mjs').then(m => { const e = new m.EventEvaluator(); console.log(e.evaluatePredicates({tagCreate: 'v*.*.*'}, {commit: 'HEAD'})); })\"\n   ```\n\n## üîß Configuration Issues\n\n### Issue: \"Configuration not loaded\"\n\n**Symptoms**:\n```\nConfiguration not loaded\n```\n\n**Causes**:\n1. Missing config file\n2. Invalid config syntax\n3. Config loading error\n\n**Solutions**:\n\n1. **Check config file**:\n   ```bash\n   ls -la gitvan.config.js\n   cat gitvan.config.js\n   ```\n\n2. **Verify config syntax**:\n   ```javascript\n   // Valid config syntax\n   export default {\n     root: process.cwd(),\n     jobs: { dir: \"jobs\" },\n     templates: { engine: \"nunjucks\", dirs: [\"templates\"] },\n     receipts: { ref: \"refs/notes/gitvan/results\" }\n   };\n   ```\n\n3. **Test config loading**:\n   ```bash\n   node -e \"import('./dev.mjs').then(m => m.loadConfig().then(c => console.log(c)))\"\n   ```\n\n## üìä Performance Issues\n\n### Issue: \"Job execution too slow\"\n\n**Symptoms**:\n- Jobs take longer than expected\n- Timeout errors\n- Resource exhaustion\n\n**Solutions**:\n\n1. **Check execution time**:\n   ```bash\n   time node -e \"import('./dev.mjs').then(m=>m.run('test:simple'))\"\n   ```\n\n2. **Optimize job implementation**:\n   ```javascript\n   // Use parallel operations\n   const [result1, result2] = await Promise.all([\n     operation1(),\n     operation2()\n   ]);\n   ```\n\n3. **Check resource usage**:\n   ```bash\n   # Monitor memory usage\n   node --inspect -e \"import('./dev.mjs').then(m=>m.run('test:simple'))\"\n   ```\n\n### Issue: \"Memory leaks\"\n\n**Symptoms**:\n- Increasing memory usage\n- Out of memory errors\n- Performance degradation\n\n**Solutions**:\n\n1. **Check for resource leaks**:\n   ```javascript\n   // Ensure proper cleanup\n   try {\n     // Job logic\n   } finally {\n     // Cleanup resources\n     await cleanup();\n   }\n   ```\n\n2. **Monitor memory usage**:\n   ```bash\n   # Use Node.js inspector\n   node --inspect --inspect-brk -e \"import('./dev.mjs').then(m=>m.run('test:simple'))\"\n   ```\n\n## üêõ Debugging Techniques\n\n### Enable Debug Logging\n\n```javascript\n// Add debug logging to jobs\nasync run({ ctx }) {\n  ctx.logger.log(\"Starting job execution\");\n  ctx.logger.log(\"Context:\", ctx);\n  \n  try {\n    // Job logic\n    ctx.logger.log(\"Job completed successfully\");\n  } catch (error) {\n    ctx.logger.error(\"Job failed:\", error);\n    throw error;\n  }\n}\n```\n\n### Use Node.js Inspector\n\n```bash\n# Start with inspector\nnode --inspect -e \"import('./dev.mjs').then(m=>m.run('test:simple'))\"\n\n# Connect with Chrome DevTools\n# Open chrome://inspect\n```\n\n### Check Git State\n\n```bash\n# Check repository status\ngit status\ngit log --oneline -5\ngit show-ref | grep gitvan\n\n# Check git notes\ngit notes --ref=refs/notes/gitvan/results show HEAD\n```\n\n### Verify File System\n\n```bash\n# Check generated files\nls -la dist/\ncat dist/CHANGELOG.md\ncat dist/status-report.json\n\n# Check job files\nls -la jobs/\ncat jobs/docs/changelog.mjs\n```\n\n## üìû Getting Help\n\n### Check Logs\n\n```bash\n# Check console output\nnpm run dev\n\n# Check error logs\nnode -e \"import('./dev.mjs').then(m=>m.run('test:simple'))\" 2>&1 | tee error.log\n```\n\n### Run Diagnostics\n\n```bash\n# Run comprehensive test\nnode test-playground.mjs\n\n# Run E2E tests\nnpx vitest run tests/playground-e2e.test.mjs\n```\n\n### Report Issues\n\nWhen reporting issues, include:\n\n1. **Error message**: Complete error output\n2. **Steps to reproduce**: Exact commands run\n3. **Environment**: Node.js version, OS, Git version\n4. **Configuration**: Relevant config files\n5. **Logs**: Console output and error logs\n\nThis troubleshooting guide should help resolve most common issues encountered with the GitVan playground.\n"
        }
    ]
}