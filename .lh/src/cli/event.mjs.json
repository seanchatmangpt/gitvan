{
    "sourceFile": "src/cli/event.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758057329115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758057329115,
            "name": "Commit-0",
            "content": "/**\n * GitVan v2 Event CLI - Event simulation and testing commands\n * Provides commands for simulating events and testing event predicates\n */\n\nimport { scanJobs } from \"../jobs/scan.mjs\";\nimport { matches } from \"../router/events.mjs\";\nimport { loadOptions } from \"../config/loader.mjs\";\nimport { createLogger } from \"../utils/logger.mjs\";\n\nconst logger = createLogger(\"event-cli\");\n\n/**\n * Event CLI command handler\n * @param {string} subcommand - Subcommand (simulate, test, list)\n * @param {object} args - Command arguments\n * @returns {Promise<void>}\n */\nexport async function eventCommand(subcommand = \"list\", args = {}) {\n  const config = await loadOptions();\n\n  switch (subcommand) {\n    case \"simulate\":\n      return await simulateEvent(config, args);\n\n    case \"test\":\n      return await testPredicate(config, args);\n\n    case \"list\":\n      return await listEventJobs(config);\n\n    case \"trigger\":\n      return await triggerEvent(config, args);\n\n    default:\n      throw new Error(`Unknown event subcommand: ${subcommand}`);\n  }\n}\n\n/**\n * Simulate an event and show which jobs would trigger\n * @param {object} config - GitVan config\n * @param {object} args - Simulation arguments\n * @returns {Promise<void>}\n */\nasync function simulateEvent(config, args) {\n  try {\n    const jobs = await scanJobs({ cwd: config.rootDir });\n    const eventJobs = jobs.filter((job) => job.on);\n\n    if (eventJobs.length === 0) {\n      console.log(\"No event jobs found\");\n      return;\n    }\n\n    // Parse event metadata from args\n    const meta = parseEventMeta(args);\n\n    console.log(`Simulating event:`);\n    console.log(JSON.stringify(meta, null, 2));\n    console.log();\n\n    const matchingJobs = [];\n\n    for (const job of eventJobs) {\n      if (matches(job.on, meta)) {\n        matchingJobs.push(job);\n      }\n    }\n\n    if (matchingJobs.length === 0) {\n      console.log(\"No jobs would trigger for this event\");\n      return;\n    }\n\n    console.log(`Jobs that would trigger (${matchingJobs.length}):`);\n    for (const job of matchingJobs) {\n      console.log(`  - ${job.id || job.filename}`);\n      console.log(`    Predicate: ${JSON.stringify(job.on, null, 2)}`);\n    }\n  } catch (error) {\n    logger.error(\"Failed to simulate event:\", error.message);\n    throw error;\n  }\n}\n\n/**\n * Test a specific predicate against event metadata\n * @param {object} config - GitVan config\n * @param {object} args - Test arguments\n * @returns {Promise<void>}\n */\nasync function testPredicate(config, args) {\n  try {\n    if (!args.predicate) {\n      throw new Error(\"Predicate required for test command\");\n    }\n\n    const predicate = JSON.parse(args.predicate);\n    const meta = parseEventMeta(args);\n\n    console.log(\"Testing predicate:\");\n    console.log(JSON.stringify(predicate, null, 2));\n    console.log();\n    console.log(\"Against event metadata:\");\n    console.log(JSON.stringify(meta, null, 2));\n    console.log();\n\n    const result = matches(predicate, meta);\n\n    console.log(`Result: ${result ? \"‚úÖ MATCH\" : \"‚ùå NO MATCH\"}`);\n  } catch (error) {\n    logger.error(\"Failed to test predicate:\", error.message);\n    throw error;\n  }\n}\n\n/**\n * List all event jobs\n * @param {object} config - GitVan config\n * @returns {Promise<void>}\n */\nasync function listEventJobs(config) {\n  try {\n    const jobs = await scanJobs({ cwd: config.rootDir });\n    const eventJobs = jobs.filter((job) => job.on);\n\n    if (eventJobs.length === 0) {\n      console.log(\"No event jobs found\");\n      return;\n    }\n\n    console.log(`Found ${eventJobs.length} event job(s):`);\n    console.log();\n\n    for (const job of eventJobs) {\n      console.log(`üéØ ${job.id || job.filename}`);\n      console.log(`   File: ${job.filePath}`);\n      if (job.meta?.desc) {\n        console.log(`   Desc: ${job.meta.desc}`);\n      }\n      console.log(`   Predicate: ${JSON.stringify(job.on, null, 2)}`);\n      console.log();\n    }\n  } catch (error) {\n    logger.error(\"Failed to list event jobs:\", error.message);\n    throw error;\n  }\n}\n\n/**\n * Trigger an actual event (for testing)\n * @param {object} config - GitVan config\n * @param {object} args - Trigger arguments\n * @returns {Promise<void>}\n */\nasync function triggerEvent(config, args) {\n  try {\n    console.log(\"Event triggering not implemented in this version\");\n    console.log(\"Use 'simulate' command to test event predicates\");\n  } catch (error) {\n    logger.error(\"Failed to trigger event:\", error.message);\n    throw error;\n  }\n}\n\n/**\n * Parse event metadata from command arguments\n * @param {object} args - Command arguments\n * @returns {object} Event metadata\n */\nfunction parseEventMeta(args) {\n  const meta = {};\n\n  if (args.files) {\n    meta.filesChanged = args.files.split(\",\");\n  }\n\n  if (args.tags) {\n    meta.tagsCreated = args.tags.split(\",\");\n  }\n\n  if (args.message) {\n    meta.message = args.message;\n  }\n\n  if (args.author) {\n    meta.authorEmail = args.author;\n  }\n\n  if (args.branch) {\n    meta.mergedTo = args.branch;\n  }\n\n  if (args.signed !== undefined) {\n    meta.signed = args.signed === \"true\";\n  }\n\n  return meta;\n}\n"
        }
    ]
}