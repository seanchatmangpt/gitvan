{
    "sourceFile": "playground/jobs/foundation/robust-error-handling.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1758052882220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758097277780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n       // Safe git operations with error handling\n       let repositoryInfo;\n       try {\n         const head = await git.head();\n-        const branch = await git.getCurrentBranch();\n+        const branch = await git.branch();\n         const isClean = await git.isClean();\n \n         repositoryInfo = {\n           head: head.substring(0, 8),\n"
                },
                {
                    "date": 1758097605063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,26 +26,26 @@\n     if (!payload || typeof payload !== \"object\") {\n       errorHandler.handleValidationError(\n         \"Payload must be an object\",\n         \"payload\",\n-        payload,\n+        payload\n       );\n     }\n \n     if (payload.requiredField && typeof payload.requiredField !== \"string\") {\n       errorHandler.handleValidationError(\n         \"requiredField must be a string\",\n         \"requiredField\",\n-        payload.requiredField,\n+        payload.requiredField\n       );\n     }\n \n     // Additional validation for test cases\n     if (payload.invalid === \"payload\") {\n       errorHandler.handleValidationError(\n         \"Invalid payload detected\",\n         \"payload\",\n-        payload,\n+        payload\n       );\n     }\n \n     ctx.logger.log(\"‚úÖ Input validation passed\");\n@@ -53,10 +53,10 @@\n     try {\n       // Safe git operations with error handling\n       let repositoryInfo;\n       try {\n-        const head = await git.head();\n-        const branch = await git.branch();\n+        const head = await git.currentHead();\n+        const branch = await git.currentBranch();\n         const isClean = await git.isClean();\n \n         repositoryInfo = {\n           head: head.substring(0, 8),\n@@ -104,9 +104,9 @@\n             repository: repositoryInfo,\n             payload: payload,\n             generatedAt: ctx.nowISO,\n             success: true,\n-          },\n+          }\n         );\n \n         ctx.logger.log(`‚úÖ Template rendered: ${templatePath}`);\n       } catch (error) {\n@@ -151,9 +151,9 @@\n         const errorPath = join(\n           ctx.root,\n           \"dist\",\n           \"foundation\",\n-          \"error-report.json\",\n+          \"error-report.json\"\n         );\n         await fs.mkdir(join(ctx.root, \"dist\", \"foundation\"), {\n           recursive: true,\n         });\n@@ -167,9 +167,9 @@\n           data: errorReport,\n         };\n       } catch (saveError) {\n         ctx.logger.error(\n-          `‚ùå Failed to save error report: ${saveError.message}`,\n+          `‚ùå Failed to save error report: ${saveError.message}`\n         );\n \n         // Re-throw original error\n         throw error;\n"
                }
            ],
            "date": 1758052882220,
            "name": "Commit-0",
            "content": "// playground/jobs/foundation/robust-error-handling.mjs\nimport { defineJob } from \"gitvan/define\";\nimport { useGit } from \"gitvan/useGit\";\nimport { useTemplate } from \"gitvan/useTemplate\";\nimport { promises as fs } from \"node:fs\";\nimport { join } from \"pathe\";\nimport {\n  createErrorHandler,\n  GitVanError,\n  GitOperationError,\n  FileSystemError,\n  ValidationError,\n} from \"../../utils/error-handler.mjs\";\n\nexport default defineJob({\n  meta: {\n    desc: \"Demonstrate robust error handling patterns in GitVan jobs\",\n    tags: [\"error-handling\", \"robust\", \"patterns\", \"foundation\"],\n  },\n  async run({ ctx, payload }) {\n    const git = useGit();\n    const template = await useTemplate();\n    const errorHandler = createErrorHandler(ctx);\n\n    // Validate input payload first - these should throw immediately\n    if (!payload || typeof payload !== \"object\") {\n      errorHandler.handleValidationError(\n        \"Payload must be an object\",\n        \"payload\",\n        payload,\n      );\n    }\n\n    if (payload.requiredField && typeof payload.requiredField !== \"string\") {\n      errorHandler.handleValidationError(\n        \"requiredField must be a string\",\n        \"requiredField\",\n        payload.requiredField,\n      );\n    }\n\n    // Additional validation for test cases\n    if (payload.invalid === \"payload\") {\n      errorHandler.handleValidationError(\n        \"Invalid payload detected\",\n        \"payload\",\n        payload,\n      );\n    }\n\n    ctx.logger.log(\"‚úÖ Input validation passed\");\n\n    try {\n      // Safe git operations with error handling\n      let repositoryInfo;\n      try {\n        const head = await git.head();\n        const branch = await git.getCurrentBranch();\n        const isClean = await git.isClean();\n\n        repositoryInfo = {\n          head: head.substring(0, 8),\n          branch,\n          isClean,\n          timestamp: ctx.nowISO,\n        };\n\n        ctx.logger.log(\"‚úÖ Git operations completed successfully\");\n      } catch (error) {\n        errorHandler.handleGitError(error, \"repository-info\");\n      }\n\n      // Safe file operations with error handling\n      let outputPath;\n      try {\n        const distDir = join(ctx.root, \"dist\", \"foundation\");\n        await fs.mkdir(distDir, { recursive: true });\n\n        outputPath = join(distDir, \"robust-job-output.json\");\n\n        const outputData = {\n          success: true,\n          repository: repositoryInfo,\n          payload: payload,\n          generatedAt: ctx.nowISO,\n          jobId: ctx.jobId || \"unknown\",\n        };\n\n        await fs.writeFile(outputPath, JSON.stringify(outputData, null, 2));\n\n        ctx.logger.log(`‚úÖ Output file created: ${outputPath}`);\n      } catch (error) {\n        errorHandler.handleFileSystemError(error, outputPath);\n      }\n\n      // Safe template operations with error handling\n      let templatePath;\n      try {\n        templatePath = await template.renderToFile(\n          \"foundation/robust-job.njk\",\n          \"dist/foundation/robust-job-report.html\",\n          {\n            title: \"Robust Job Report\",\n            repository: repositoryInfo,\n            payload: payload,\n            generatedAt: ctx.nowISO,\n            success: true,\n          },\n        );\n\n        ctx.logger.log(`‚úÖ Template rendered: ${templatePath}`);\n      } catch (error) {\n        // Template errors are not critical, log and continue\n        ctx.logger.warn(`‚ö†Ô∏è Template rendering failed: ${error.message}`);\n        templatePath = null;\n      }\n\n      // Return success result\n      return {\n        ok: true,\n        artifacts: [outputPath, templatePath].filter(Boolean),\n        data: {\n          repository: repositoryInfo,\n          payload: payload,\n          outputPath,\n          templatePath,\n          success: true,\n        },\n      };\n    } catch (error) {\n      // Handle any unexpected errors\n      ctx.logger.error(`‚ùå Job failed with error: ${error.message}`);\n\n      // Create error report\n      const errorReport = {\n        success: false,\n        error: {\n          name: error.name,\n          message: error.message,\n          code: error.code,\n          context: error.context,\n          timestamp: ctx.nowISO,\n          stack: error.stack,\n        },\n        jobId: ctx.jobId || \"unknown\",\n        payload: payload,\n      };\n\n      // Try to save error report\n      try {\n        const errorPath = join(\n          ctx.root,\n          \"dist\",\n          \"foundation\",\n          \"error-report.json\",\n        );\n        await fs.mkdir(join(ctx.root, \"dist\", \"foundation\"), {\n          recursive: true,\n        });\n        await fs.writeFile(errorPath, JSON.stringify(errorReport, null, 2));\n\n        ctx.logger.log(`üìù Error report saved: ${errorPath}`);\n\n        return {\n          ok: false,\n          artifacts: [errorPath],\n          data: errorReport,\n        };\n      } catch (saveError) {\n        ctx.logger.error(\n          `‚ùå Failed to save error report: ${saveError.message}`,\n        );\n\n        // Re-throw original error\n        throw error;\n      }\n    }\n  },\n});\n"
        }
    ]
}