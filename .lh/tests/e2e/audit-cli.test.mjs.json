{
    "sourceFile": "tests/e2e/audit-cli.test.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758072623002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758072623002,
            "name": "Commit-0",
            "content": "// tests/e2e/audit-cli.test.mjs\n// End-to-end tests for GitVan v2 Audit CLI commands\n// Tests against the playground environment\n\nimport { describe, it, expect, beforeEach, afterEach } from \"vitest\";\nimport { spawn } from \"node:child_process\";\nimport { promises as fs } from \"node:fs\";\nimport { join } from \"pathe\";\nimport { fileURLToPath } from \"node:url\";\n\nconst __dirname = fileURLToPath(new URL(\".\", import.meta.url));\nconst playgroundDir = join(__dirname, \"../../playground\");\nconst gitvanCli = join(__dirname, \"../../src/cli.mjs\");\n\ndescribe(\"Audit CLI E2E Tests\", () => {\n  let originalCwd;\n  let tempDir;\n\n  beforeEach(async () => {\n    originalCwd = process.cwd();\n    tempDir = join(playgroundDir, \"test-audit-temp\");\n    await fs.mkdir(tempDir, { recursive: true });\n  });\n\n  afterEach(async () => {\n    process.chdir(originalCwd);\n    try {\n      await fs.rm(tempDir, { recursive: true, force: true });\n    } catch {\n      // Ignore cleanup errors\n    }\n  });\n\n  // Helper function to run CLI commands\n  async function runCliCommand(args, options = {}) {\n    return new Promise((resolve, reject) => {\n      const child = spawn(\"node\", [gitvanCli, ...args], {\n        cwd: playgroundDir,\n        stdio: [\"pipe\", \"pipe\", \"pipe\"],\n        ...options,\n      });\n\n      let stdout = \"\";\n      let stderr = \"\";\n\n      child.stdout.on(\"data\", (data) => {\n        stdout += data.toString();\n      });\n\n      child.stderr.on(\"data\", (data) => {\n        stderr += data.toString();\n      });\n\n      child.on(\"close\", (code) => {\n        resolve({\n          code,\n          stdout: stdout.trim(),\n          stderr: stderr.trim(),\n        });\n      });\n\n      child.on(\"error\", (error) => {\n        reject(error);\n      });\n    });\n  }\n\n  describe(\"audit build command\", () => {\n    it(\"should build audit pack\", async () => {\n      const result = await runCliCommand([\n        \"audit\",\n        \"build\",\n        \"--out\",\n        join(tempDir, \"audit.json\"),\n      ]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Audit pack built\");\n\n      // Check if audit file was created\n      const files = await fs.readdir(tempDir);\n      expect(files).toContain(\"audit.json\");\n    });\n\n    it(\"should build audit with custom range\", async () => {\n      const result = await runCliCommand([\n        \"audit\",\n        \"build\",\n        \"--from\",\n        \"HEAD~10\",\n        \"--to\",\n        \"HEAD\",\n        \"--out\",\n        join(tempDir, \"range-audit.json\"),\n      ]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Audit pack built\");\n    });\n\n    it(\"should handle build errors gracefully\", async () => {\n      const result = await runCliCommand([\n        \"audit\",\n        \"build\",\n        \"--out\",\n        \"/invalid/path/audit.json\",\n      ]);\n\n      // Should either succeed or fail gracefully\n      expect(result.code).toBeDefined();\n    });\n  });\n\n  describe(\"audit verify command\", () => {\n    it(\"should verify receipts\", async () => {\n      const result = await runCliCommand([\"audit\", \"verify\"]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Receipt verification\");\n    });\n\n    it(\"should verify specific receipt\", async () => {\n      const result = await runCliCommand([\n        \"audit\",\n        \"verify\",\n        \"--receipt\",\n        \"test-receipt-id\",\n      ]);\n\n      expect(result.code).toBe(0);\n      // Should either verify or show not found\n      expect(result.stdout).toMatch(/verified|not found/i);\n    });\n\n    it(\"should handle verification errors\", async () => {\n      const result = await runCliCommand([\n        \"audit\",\n        \"verify\",\n        \"--receipt\",\n        \"nonexistent-receipt\",\n      ]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"not found\");\n    });\n  });\n\n  describe(\"audit list command\", () => {\n    it(\"should list receipts\", async () => {\n      const result = await runCliCommand([\"audit\", \"list\"]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Receipts:\");\n    });\n\n    it(\"should list receipts with details\", async () => {\n      const result = await runCliCommand([\"audit\", \"list\", \"--detailed\"]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Receipts:\");\n    });\n\n    it(\"should filter receipts by date\", async () => {\n      const result = await runCliCommand([\n        \"audit\",\n        \"list\",\n        \"--since\",\n        \"2024-01-01\",\n      ]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Receipts:\");\n    });\n\n    it(\"should handle empty receipt lists\", async () => {\n      const result = await runCliCommand([\"audit\", \"list\"], {\n        cwd: tempDir,\n      });\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"No receipts found\");\n    });\n  });\n\n  describe(\"audit show command\", () => {\n    it(\"should show receipt details\", async () => {\n      const result = await runCliCommand([\n        \"audit\",\n        \"show\",\n        \"--receipt\",\n        \"test-receipt\",\n      ]);\n\n      expect(result.code).toBe(0);\n      // Should either show details or indicate not found\n      expect(result.stdout.length).toBeGreaterThan(0);\n    });\n\n    it(\"should show receipt with full details\", async () => {\n      const result = await runCliCommand([\n        \"audit\",\n        \"show\",\n        \"--receipt\",\n        \"test-receipt\",\n        \"--full\",\n      ]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout.length).toBeGreaterThan(0);\n    });\n\n    it(\"should handle non-existent receipts\", async () => {\n      const result = await runCliCommand([\n        \"audit\",\n        \"show\",\n        \"--receipt\",\n        \"nonexistent-receipt\",\n      ]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"not found\");\n    });\n  });\n\n  describe(\"audit command error handling\", () => {\n    it(\"should handle invalid audit subcommands\", async () => {\n      const result = await runCliCommand([\"audit\", \"invalid\"]);\n\n      expect(result.code).toBe(1);\n      expect(result.stderr).toContain(\"Unknown audit command\");\n    });\n\n    it(\"should provide help for audit commands\", async () => {\n      const result = await runCliCommand([\"audit\", \"help\"]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Audit Commands:\");\n    });\n  });\n\n  describe(\"audit integration\", () => {\n    it(\"should work with playground receipts\", async () => {\n      const result = await runCliCommand([\"audit\", \"list\"]);\n\n      expect(result.code).toBe(0);\n      // Should work with playground's receipt system\n      expect(result.stdout.length).toBeGreaterThan(0);\n    });\n\n    it(\"should respect playground configuration\", async () => {\n      const result = await runCliCommand([\n        \"audit\",\n        \"build\",\n        \"--out\",\n        join(tempDir, \"playground-audit.json\"),\n      ]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Audit pack built\");\n    });\n  });\n});\n"
        }
    ]
}