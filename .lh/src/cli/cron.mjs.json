{
    "sourceFile": "src/cli/cron.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758057329097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758057329097,
            "name": "Commit-0",
            "content": "/**\n * GitVan v2 Cron CLI - Cron job management commands\n * Provides commands for listing, starting, and managing cron jobs\n */\n\nimport { startCronScheduler } from \"../jobs/cron.mjs\";\nimport { scanJobs } from \"../jobs/scan.mjs\";\nimport { loadOptions } from \"../config/loader.mjs\";\nimport { createLogger } from \"../utils/logger.mjs\";\n\nconst logger = createLogger(\"cron-cli\");\n\n/**\n * Cron CLI command handler\n * @param {string} subcommand - Subcommand (list, start, dry-run)\n * @param {object} args - Command arguments\n * @returns {Promise<void>}\n */\nexport async function cronCommand(subcommand = \"list\", args = {}) {\n  const config = await loadOptions();\n\n  switch (subcommand) {\n    case \"list\":\n      return await listCronJobs(config);\n\n    case \"start\":\n      return await startCronScheduler(config);\n\n    case \"dry-run\":\n      return await dryRunCronJobs(config, args.at);\n\n    case \"status\":\n      return await cronStatus(config);\n\n    default:\n      throw new Error(`Unknown cron subcommand: ${subcommand}`);\n  }\n}\n\n/**\n * List all cron jobs\n * @param {object} config - GitVan config\n * @returns {Promise<void>}\n */\nasync function listCronJobs(config) {\n  try {\n    const jobs = await scanJobs({ cwd: config.rootDir });\n    const cronJobs = jobs.filter((job) => job.cron);\n\n    if (cronJobs.length === 0) {\n      console.log(\"No cron jobs found\");\n      return;\n    }\n\n    console.log(`Found ${cronJobs.length} cron job(s):`);\n    console.log();\n\n    for (const job of cronJobs) {\n      console.log(`ðŸ“… ${job.id || job.filename}`);\n      console.log(`   Cron: ${job.cron}`);\n      console.log(`   File: ${job.filePath}`);\n      if (job.meta?.desc) {\n        console.log(`   Desc: ${job.meta.desc}`);\n      }\n      console.log();\n    }\n  } catch (error) {\n    logger.error(\"Failed to list cron jobs:\", error.message);\n    throw error;\n  }\n}\n\n/**\n * Dry run cron jobs for a specific time\n * @param {object} config - GitVan config\n * @param {string} at - Time to check (ISO string)\n * @returns {Promise<void>}\n */\nasync function dryRunCronJobs(config, at) {\n  try {\n    const jobs = await scanJobs({ cwd: config.rootDir });\n    const cronJobs = jobs.filter((job) => job.cron);\n    const checkTime = at ? new Date(at) : new Date();\n\n    console.log(`Dry run for ${checkTime.toISOString()}:`);\n    console.log();\n\n    const matchingJobs = [];\n\n    for (const job of cronJobs) {\n      // Simple cron matching logic (would need proper cron parser in production)\n      if (shouldRunAtTime(job.cron, checkTime)) {\n        matchingJobs.push(job);\n      }\n    }\n\n    if (matchingJobs.length === 0) {\n      console.log(\"No jobs would run at this time\");\n      return;\n    }\n\n    console.log(`Jobs that would run:`);\n    for (const job of matchingJobs) {\n      console.log(`  - ${job.id || job.filename} (${job.cron})`);\n    }\n  } catch (error) {\n    logger.error(\"Failed to dry run cron jobs:\", error.message);\n    throw error;\n  }\n}\n\n/**\n * Check if cron job should run at given time\n * @param {string} cron - Cron expression\n * @param {Date} time - Time to check\n * @returns {boolean} True if should run\n */\nfunction shouldRunAtTime(cron, time) {\n  // Simplified cron matching - in production would use proper cron parser\n  const parts = cron.trim().split(/\\s+/);\n  if (parts.length !== 5) return false;\n\n  const [min, hour, day, month, weekday] = parts;\n\n  // Simple patterns\n  if (min === \"*\" && hour === \"*\") return true; // Every minute\n  if (min === \"0\" && hour === \"*\") return true; // Every hour\n  if (min === \"0\" && hour === \"0\") return true; // Daily\n\n  return false;\n}\n\n/**\n * Get cron scheduler status\n * @param {object} config - GitVan config\n * @returns {Promise<void>}\n */\nasync function cronStatus(config) {\n  console.log(\"Cron scheduler status:\");\n  console.log(\"  Status: Not implemented in this version\");\n  console.log(\"  Config: \", JSON.stringify(config.jobs, null, 2));\n}\n"
        }
    ]
}