{
    "sourceFile": "tests/e2e/event-cli.test.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758072623002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758072623002,
            "name": "Commit-0",
            "content": "// tests/e2e/event-cli.test.mjs\n// End-to-end tests for GitVan v2 Event CLI commands\n// Tests against the playground environment\n\nimport { describe, it, expect, beforeEach, afterEach } from \"vitest\";\nimport { spawn } from \"node:child_process\";\nimport { promises as fs } from \"node:fs\";\nimport { join } from \"pathe\";\nimport { fileURLToPath } from \"node:url\";\n\nconst __dirname = fileURLToPath(new URL(\".\", import.meta.url));\nconst playgroundDir = join(__dirname, \"../../playground\");\nconst gitvanCli = join(__dirname, \"../../src/cli.mjs\");\n\ndescribe(\"Event CLI E2E Tests\", () => {\n  let originalCwd;\n  let tempDir;\n\n  beforeEach(async () => {\n    originalCwd = process.cwd();\n    tempDir = join(playgroundDir, \"test-event-temp\");\n    await fs.mkdir(tempDir, { recursive: true });\n  });\n\n  afterEach(async () => {\n    process.chdir(originalCwd);\n    try {\n      await fs.rm(tempDir, { recursive: true, force: true });\n    } catch {\n      // Ignore cleanup errors\n    }\n  });\n\n  // Helper function to run CLI commands\n  async function runCliCommand(args, options = {}) {\n    return new Promise((resolve, reject) => {\n      const child = spawn(\"node\", [gitvanCli, ...args], {\n        cwd: playgroundDir,\n        stdio: [\"pipe\", \"pipe\", \"pipe\"],\n        ...options,\n      });\n\n      let stdout = \"\";\n      let stderr = \"\";\n\n      child.stdout.on(\"data\", (data) => {\n        stdout += data.toString();\n      });\n\n      child.stderr.on(\"data\", (data) => {\n        stderr += data.toString();\n      });\n\n      child.on(\"close\", (code) => {\n        resolve({\n          code,\n          stdout: stdout.trim(),\n          stderr: stderr.trim(),\n        });\n      });\n\n      child.on(\"error\", (error) => {\n        reject(error);\n      });\n    });\n  }\n\n  describe(\"event list command\", () => {\n    it(\"should list events in the playground\", async () => {\n      const result = await runCliCommand([\"event\", \"list\"]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Event\");\n    });\n\n    it(\"should show event details\", async () => {\n      const result = await runCliCommand([\"event\", \"list\"]);\n\n      expect(result.code).toBe(0);\n      // Should show event information\n      expect(result.stdout.length).toBeGreaterThan(0);\n    });\n\n    it(\"should handle empty event lists\", async () => {\n      const result = await runCliCommand([\"event\", \"list\"], {\n        cwd: tempDir,\n      });\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"No events found\");\n    });\n  });\n\n  describe(\"event simulate command\", () => {\n    it(\"should simulate file change events\", async () => {\n      const result = await runCliCommand([\n        \"event\",\n        \"simulate\",\n        \"--files\",\n        \"src/**\",\n      ]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Simulated event\");\n    });\n\n    it(\"should simulate push events\", async () => {\n      const result = await runCliCommand([\n        \"event\",\n        \"simulate\",\n        \"--type\",\n        \"push\",\n        \"--branch\",\n        \"main\",\n      ]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Simulated event\");\n    });\n\n    it(\"should simulate tag events\", async () => {\n      const result = await runCliCommand([\n        \"event\",\n        \"simulate\",\n        \"--type\",\n        \"tag\",\n        \"--tag\",\n        \"v1.0.0\",\n      ]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Simulated event\");\n    });\n\n    it(\"should handle invalid simulation parameters\", async () => {\n      const result = await runCliCommand([\n        \"event\",\n        \"simulate\",\n        \"--invalid\",\n        \"param\",\n      ]);\n\n      // Should either succeed (ignoring invalid params) or fail gracefully\n      expect(result.code).toBeDefined();\n    });\n  });\n\n  describe(\"event test command\", () => {\n    it(\"should test event predicates\", async () => {\n      const result = await runCliCommand([\n        \"event\",\n        \"test\",\n        \"--predicate\",\n        '{\"type\":\"push\",\"branch\":\"main\"}',\n      ]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Predicate test\");\n    });\n\n    it(\"should require predicate for test command\", async () => {\n      const result = await runCliCommand([\"event\", \"test\"]);\n\n      expect(result.code).toBe(1);\n      expect(result.stderr).toContain(\"Predicate required\");\n    });\n\n    it(\"should validate predicate format\", async () => {\n      const result = await runCliCommand([\n        \"event\",\n        \"test\",\n        \"--predicate\",\n        \"invalid-json\",\n      ]);\n\n      expect(result.code).toBe(1);\n      expect(result.stderr).toContain(\"Invalid predicate\");\n    });\n  });\n\n  describe(\"event trigger command\", () => {\n    it(\"should trigger events manually\", async () => {\n      const result = await runCliCommand([\n        \"event\",\n        \"trigger\",\n        \"--type\",\n        \"push\",\n      ]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Event triggered\");\n    });\n\n    it(\"should trigger events with context\", async () => {\n      const result = await runCliCommand([\n        \"event\",\n        \"trigger\",\n        \"--type\",\n        \"file-change\",\n        \"--files\",\n        \"src/test.js\",\n      ]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Event triggered\");\n    });\n  });\n\n  describe(\"event command error handling\", () => {\n    it(\"should handle invalid event subcommands\", async () => {\n      const result = await runCliCommand([\"event\", \"invalid\"]);\n\n      expect(result.code).toBe(1);\n      expect(result.stderr).toContain(\"Unknown event command\");\n    });\n\n    it(\"should provide help for event commands\", async () => {\n      const result = await runCliCommand([\"event\", \"help\"]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Event Commands:\");\n    });\n  });\n\n  describe(\"event integration\", () => {\n    it(\"should work with playground events\", async () => {\n      const result = await runCliCommand([\"event\", \"list\"]);\n\n      expect(result.code).toBe(0);\n      // Should find playground events\n      expect(result.stdout.length).toBeGreaterThan(0);\n    });\n\n    it(\"should respect playground configuration\", async () => {\n      const result = await runCliCommand([\n        \"event\",\n        \"simulate\",\n        \"--files\",\n        \"jobs/**\",\n      ]);\n\n      expect(result.code).toBe(0);\n      expect(result.stdout).toContain(\"Simulated event\");\n    });\n  });\n});\n"
        }
    ]
}