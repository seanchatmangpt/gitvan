{
    "sourceFile": "playground/jobs/documentation/advanced-changelog.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758052882220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758052882220,
            "name": "Commit-0",
            "content": "// playground/jobs/documentation/advanced-changelog.mjs\nimport { defineJob } from \"gitvan/define\";\nimport { useGit } from \"gitvan/useGit\";\nimport { useTemplate } from \"gitvan/useTemplate\";\n\nexport default defineJob({\n  meta: {\n    desc: \"Generate advanced changelog with release notes and statistics\",\n    tags: [\"documentation\", \"changelog\", \"advanced\", \"releases\", \"cookbook\"],\n  },\n  async run({ ctx, payload }) {\n    const git = useGit();\n    const template = await useTemplate();\n\n    // Get configuration\n    const since = payload?.since || \"1 month ago\";\n    const limit = payload?.limit || 100;\n    const includeStats = payload?.includeStats !== false;\n\n    // Get commits since specified date\n    const logOutput = await git.log(\"%h%x09%s%x09%an%x09%ae%x09%ad%x09%at\", [\n      \"--since\",\n      since,\n      \"-n\",\n      limit.toString(),\n    ]);\n\n    const lines = logOutput.split(\"\\n\").filter(Boolean);\n    const commits = lines.map((line) => {\n      const [hash, subject, author, email, date, timestamp] = line.split(\"\\t\");\n      return {\n        hash,\n        subject,\n        author,\n        email,\n        date: new Date(date).toISOString(),\n        timestamp: parseInt(timestamp),\n        shortHash: hash.substring(0, 7),\n      };\n    });\n\n    // Analyze commits\n    const analysis = {\n      totalCommits: commits.length,\n      uniqueAuthors: [...new Set(commits.map((c) => c.author))].length,\n      dateRange: {\n        first: commits[commits.length - 1]?.date,\n        last: commits[0]?.date,\n      },\n      commitTypes: {},\n      authorStats: {},\n      weeklyStats: {},\n    };\n\n    // Analyze commit types\n    commits.forEach((commit) => {\n      const type = commit.subject.split(\":\")[0].toLowerCase();\n      analysis.commitTypes[type] = (analysis.commitTypes[type] || 0) + 1;\n\n      // Author statistics\n      analysis.authorStats[commit.author] =\n        (analysis.authorStats[commit.author] || 0) + 1;\n\n      // Weekly statistics\n      const week = new Date(commit.timestamp * 1000);\n      const weekKey = `${week.getFullYear()}-W${Math.ceil(week.getDate() / 7)}`;\n      analysis.weeklyStats[weekKey] = (analysis.weeklyStats[weekKey] || 0) + 1;\n    });\n\n    // Group commits by type\n    const groupedCommits = {\n      features: [],\n      fixes: [],\n      docs: [],\n      style: [],\n      refactor: [],\n      test: [],\n      chore: [],\n      breaking: [],\n      other: [],\n    };\n\n    commits.forEach((commit) => {\n      const subject = commit.subject.toLowerCase();\n      const type = subject.split(\":\")[0];\n\n      if (subject.includes(\"breaking change\") || subject.includes(\"!:\")) {\n        groupedCommits.breaking.push(commit);\n      } else if (type === \"feat\") {\n        groupedCommits.features.push(commit);\n      } else if (type === \"fix\") {\n        groupedCommits.fixes.push(commit);\n      } else if (type === \"docs\") {\n        groupedCommits.docs.push(commit);\n      } else if (type === \"style\") {\n        groupedCommits.style.push(commit);\n      } else if (type === \"refactor\") {\n        groupedCommits.refactor.push(commit);\n      } else if (type === \"test\") {\n        groupedCommits.test.push(commit);\n      } else if (type === \"chore\") {\n        groupedCommits.chore.push(commit);\n      } else {\n        groupedCommits.other.push(commit);\n      }\n    });\n\n    // Get repository information\n    const repository = {\n      head: await git.head(),\n      branch: await git.getCurrentBranch(),\n      isClean: await git.isClean(),\n    };\n\n    // Prepare template data\n    const data = {\n      title: \"Advanced Changelog - Cookbook Recipe\",\n      subtitle: `Generated from ${commits.length} commits since ${since}`,\n      commits,\n      groupedCommits,\n      analysis: includeStats ? analysis : null,\n      generatedAt: ctx.nowISO,\n      repository,\n      config: {\n        since,\n        limit,\n        includeStats,\n      },\n    };\n\n    // Render template to file\n    const outputPath = await template.renderToFile(\n      \"documentation/advanced-changelog.njk\",\n      \"dist/documentation/ADVANCED_CHANGELOG.md\",\n      data,\n    );\n\n    ctx.logger.log(`📝 Advanced changelog generated: ${outputPath}`);\n    ctx.logger.log(\n      `📊 Processed ${commits.length} commits from ${analysis.uniqueAuthors} authors`,\n    );\n\n    return {\n      ok: true,\n      artifacts: [outputPath],\n      data: {\n        outputPath,\n        analysis,\n        groupedCommits: Object.keys(groupedCommits).reduce((acc, key) => {\n          acc[key] = groupedCommits[key].length;\n          return acc;\n        }, {}),\n      },\n    };\n  },\n});\n"
        }
    ]
}