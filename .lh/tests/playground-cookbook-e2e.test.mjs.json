{
    "sourceFile": "tests/playground-cookbook-e2e.test.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758052882219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758052882219,
            "name": "Commit-0",
            "content": "import { describe, it, expect, beforeEach, afterEach } from \"vitest\";\nimport { promises as fs } from \"node:fs\";\nimport { join } from \"pathe\";\nimport { execFile } from \"node:child_process\";\nimport { promisify } from \"node:util\";\n\nconst execFileAsync = promisify(execFile);\n\ndescribe(\"GitVan Playground Cookbook E2E Tests\", () => {\n  let playgroundDir;\n  let originalCwd;\n\n  beforeEach(async () => {\n    originalCwd = process.cwd();\n    playgroundDir = join(process.cwd(), \"playground\");\n\n    // Ensure we're in the playground directory\n    process.chdir(playgroundDir);\n  });\n\n  afterEach(async () => {\n    // Restore original working directory\n    process.chdir(originalCwd);\n  });\n\n  describe(\"Foundation Recipes\", () => {\n    it(\"should discover all foundation jobs correctly\", async () => {\n      const result = await execFileAsync(\"node\", [\n        \"-e\",\n        \"import('./dev.mjs').then(m=>m.list())\",\n      ]);\n\n      expect(result.stdout).toContain(\"foundation:basic-job-setup\");\n      expect(result.stdout).toContain(\"foundation:file-output-job\");\n      expect(result.stdout).toContain(\"foundation:template-greeting\");\n      expect(result.stdout).toContain(\"foundation:robust-error-handling\");\n      expect(result.stdout).toContain(\"foundation\");\n    });\n\n    it(\"should execute basic job setup successfully\", async () => {\n      const result = await execFileAsync(\"node\", [\n        \"-e\",\n        \"import('./dev.mjs').then(m=>m.run('foundation:basic-job-setup'))\",\n      ]);\n\n      expect(result.stdout).toContain(\"Status: SUCCESS\");\n      expect(result.stdout).toContain(\"🎉 Greeting generated successfully!\");\n      expect(result.stdout).toContain(\"Repository:\");\n      expect(result.stdout).toContain(\"Clean:\");\n    });\n\n    it(\"should execute file output job successfully\", async () => {\n      const result = await execFileAsync(\"node\", [\n        \"-e\",\n        \"import('./dev.mjs').then(m=>m.run('foundation:file-output-job', {test: 'data'}))\",\n      ]);\n\n      expect(result.stdout).toContain(\"Status: SUCCESS\");\n      expect(result.stdout).toContain(\"Artifacts: 1\");\n\n      // Check that the file was created\n      const reportPath = join(\n        playgroundDir,\n        \"dist\",\n        \"foundation\",\n        \"greeting-report.json\",\n      );\n      const reportExists = await fs\n        .access(reportPath)\n        .then(() => true)\n        .catch(() => false);\n      expect(reportExists).toBe(true);\n\n      // Check file content\n      const reportContent = await fs.readFile(reportPath, \"utf-8\");\n      const reportData = JSON.parse(reportContent);\n      expect(reportData.payload).toBeDefined();\n      expect(reportData.repository).toBeDefined();\n      expect(reportData.environment).toBeDefined();\n    });\n\n    it(\"should execute template greeting job successfully\", async () => {\n      const result = await execFileAsync(\"node\", [\n        \"-e\",\n        \"import('./dev.mjs').then(m=>m.run('foundation:template-greeting', {custom: 'value'}))\",\n      ]);\n\n      expect(result.stdout).toContain(\"Status: SUCCESS\");\n      expect(result.stdout).toContain(\"Artifacts: 1\");\n\n      // Check that the HTML file was created\n      const htmlPath = join(\n        playgroundDir,\n        \"dist\",\n        \"foundation\",\n        \"greeting-template.html\",\n      );\n      const htmlExists = await fs\n        .access(htmlPath)\n        .then(() => true)\n        .catch(() => false);\n      expect(htmlExists).toBe(true);\n\n      // Check HTML content\n      const htmlContent = await fs.readFile(htmlPath, \"utf-8\");\n      expect(htmlContent).toContain(\n        \"Hello from GitVan Cookbook Template System!\",\n      );\n      expect(htmlContent).toContain(\"Custom\");\n      expect(htmlContent).toContain(\"value\");\n      expect(htmlContent).toContain(\"Repository Information\");\n      expect(htmlContent).toContain(\"Environment\");\n    });\n\n    it(\"should handle robust error handling job with valid payload\", async () => {\n      const result = await execFileAsync(\"node\", [\n        \"-e\",\n        \"import('./dev.mjs').then(m=>m.run('foundation:robust-error-handling', {requiredField: 'test'}))\",\n      ]);\n\n      expect(result.stdout).toContain(\"Status: SUCCESS\");\n      expect(result.stdout).toContain(\"Input validation passed\");\n      expect(result.stdout).toContain(\"Git operations completed successfully\");\n      expect(result.stdout).toContain(\"Output file created\");\n\n      // Check that files were created\n      const jsonPath = join(\n        playgroundDir,\n        \"dist\",\n        \"foundation\",\n        \"robust-job-output.json\",\n      );\n      const htmlPath = join(\n        playgroundDir,\n        \"dist\",\n        \"foundation\",\n        \"robust-job-report.html\",\n      );\n\n      const jsonExists = await fs\n        .access(jsonPath)\n        .then(() => true)\n        .catch(() => false);\n      const htmlExists = await fs\n        .access(htmlPath)\n        .then(() => true)\n        .catch(() => false);\n\n      expect(jsonExists).toBe(true);\n      expect(htmlExists).toBe(true);\n    });\n\n    it(\"should handle robust error handling job with invalid payload\", async () => {\n      try {\n        await execFileAsync(\"node\", [\n          \"-e\",\n          \"import('./dev.mjs').then(m=>m.run('foundation:robust-error-handling', {requiredField: 123}))\",\n        ]);\n        expect.fail(\"Expected job to fail with validation error\");\n      } catch (error) {\n        expect(error.stderr).toContain(\"Validation failed\");\n        expect(error.stderr).toContain(\"requiredField must be a string\");\n      }\n    });\n  });\n\n  describe(\"Documentation Recipes\", () => {\n    it(\"should discover documentation jobs correctly\", async () => {\n      const result = await execFileAsync(\"node\", [\n        \"-e\",\n        \"import('./dev.mjs').then(m=>m.list())\",\n      ]);\n\n      expect(result.stdout).toContain(\"documentation:advanced-changelog\");\n      expect(result.stdout).toContain(\"advanced-changelog\");\n    });\n\n    it(\"should execute advanced changelog job successfully\", async () => {\n      const result = await execFileAsync(\"node\", [\n        \"-e\",\n        \"import('./dev.mjs').then(m=>m.run('documentation:advanced-changelog', {limit: 20}))\",\n      ]);\n\n      expect(result.stdout).toContain(\"Status: SUCCESS\");\n      expect(result.stdout).toContain(\"Advanced changelog generated\");\n      expect(result.stdout).toContain(\"Processed\");\n      expect(result.stdout).toContain(\"commits from\");\n      expect(result.stdout).toContain(\"authors\");\n\n      // Check that the changelog was created\n      const changelogPath = join(\n        playgroundDir,\n        \"dist\",\n        \"documentation\",\n        \"ADVANCED_CHANGELOG.md\",\n      );\n      const changelogExists = await fs\n        .access(changelogPath)\n        .then(() => true)\n        .catch(() => false);\n      expect(changelogExists).toBe(true);\n\n      // Check changelog content\n      const changelogContent = await fs.readFile(changelogPath, \"utf-8\");\n      expect(changelogContent).toContain(\n        \"# Advanced Changelog - Cookbook Recipe\",\n      );\n      expect(changelogContent).toContain(\"## 📊 Statistics\");\n      expect(changelogContent).toContain(\"## 📝 Changes by Category\");\n      expect(changelogContent).toContain(\"## 📋 All Commits\");\n      expect(changelogContent).toContain(\n        \"*Generated by GitVan Jobs System - Cookbook Recipe: Advanced Changelog Generation*\",\n      );\n    });\n\n    it(\"should handle changelog job with custom parameters\", async () => {\n      const result = await execFileAsync(\"node\", [\n        \"-e\",\n        \"import('./dev.mjs').then(m=>m.run('documentation:advanced-changelog', {since: '1 week ago', includeStats: true}))\",\n      ]);\n\n      expect(result.stdout).toContain(\"Status: SUCCESS\");\n      expect(result.stdout).toContain(\"Advanced changelog generated\");\n\n      // Check that the changelog was created with custom parameters\n      const changelogPath = join(\n        playgroundDir,\n        \"dist\",\n        \"documentation\",\n        \"ADVANCED_CHANGELOG.md\",\n      );\n      const changelogContent = await fs.readFile(changelogPath, \"utf-8\");\n      expect(changelogContent).toContain(\"Generated from\");\n      expect(changelogContent).toContain(\"commits since 1 week ago\");\n    });\n  });\n\n  describe(\"CI/CD Recipes\", () => {\n    it(\"should discover CI/CD jobs correctly\", async () => {\n      const result = await execFileAsync(\"node\", [\n        \"-e\",\n        \"import('./dev.mjs').then(m=>m.list())\",\n      ]);\n\n      expect(result.stdout).toContain(\"cicd:build-automation\");\n      expect(result.stdout).toContain(\"Automated build process\");\n    });\n\n    it(\"should execute build automation job successfully\", async () => {\n      const result = await execFileAsync(\"node\", [\n        \"-e\",\n        \"import('./dev.mjs').then(m=>m.run('cicd:build-automation', {environment: 'development', allowDirty: true}))\",\n      ]);\n\n      expect(result.stdout).toContain(\"Status: SUCCESS\");\n      expect(result.stdout).toContain(\n        \"Starting production build for development environment\",\n      );\n      expect(result.stdout).toContain(\"Build completed successfully\");\n      expect(result.stdout).toContain(\"Build report:\");\n\n      // Check that build artifacts were created\n      const jsonPath = join(\n        playgroundDir,\n        \"dist\",\n        \"cicd\",\n        \"build\",\n        \"build-report.json\",\n      );\n      const htmlPath = join(\n        playgroundDir,\n        \"dist\",\n        \"cicd\",\n        \"build\",\n        \"build-report.html\",\n      );\n\n      const jsonExists = await fs\n        .access(jsonPath)\n        .then(() => true)\n        .catch(() => false);\n      const htmlExists = await fs\n        .access(htmlPath)\n        .then(() => true)\n        .catch(() => false);\n\n      expect(jsonExists).toBe(true);\n      expect(htmlExists).toBe(true);\n\n      // Check build report content\n      const reportContent = await fs.readFile(jsonPath, \"utf-8\");\n      const reportData = JSON.parse(reportContent);\n      expect(reportData.success).toBe(true);\n      expect(reportData.environment).toBe(\"development\");\n      expect(reportData.buildType).toBe(\"production\");\n      expect(reportData.steps).toBeDefined();\n      expect(reportData.summary).toBeDefined();\n      expect(reportData.summary.totalSteps).toBeGreaterThan(0);\n    });\n\n    it(\"should handle build automation with different environments\", async () => {\n      const result = await execFileAsync(\"node\", [\n        \"-e\",\n        \"import('./dev.mjs').then(m=>m.run('cicd:build-automation', {environment: 'production', buildType: 'release', allowDirty: true}))\",\n      ]);\n\n      expect(result.stdout).toContain(\"Status: SUCCESS\");\n      expect(result.stdout).toContain(\"Starting release build\");\n\n      // Check build report content\n      const jsonPath = join(\n        playgroundDir,\n        \"dist\",\n        \"cicd\",\n        \"build\",\n        \"build-report.json\",\n      );\n      const reportContent = await fs.readFile(jsonPath, \"utf-8\");\n      const reportData = JSON.parse(reportContent);\n      expect(reportData.environment).toBe(\"production\");\n      expect(reportData.buildType).toBe(\"release\");\n    });\n\n    it(\"should handle build automation with clean build\", async () => {\n      const result = await execFileAsync(\"node\", [\n        \"-e\",\n        \"import('./dev.mjs').then(m=>m.run('cicd:build-automation', {cleanBuild: true, allowDirty: true}))\",\n      ]);\n\n      expect(result.stdout).toContain(\"Status: SUCCESS\");\n      expect(result.stdout).toContain(\"Cleaned build directory\");\n    });\n  });\n\n  describe(\"Template System Integration\", () => {\n    it(\"should render foundation templates correctly\", async () => {\n      const result = await execFileAsync(\"node\", [\n        \"-e\",\n        \"import('./dev.mjs').then(m=>m.run('foundation:template-greeting'))\",\n      ]);\n\n      expect(result.stdout).toContain(\"Status: SUCCESS\");\n\n      // Check HTML template rendering\n      const htmlPath = join(\n        playgroundDir,\n        \"dist\",\n        \"foundation\",\n        \"greeting-template.html\",\n      );\n      const htmlContent = await fs.readFile(htmlPath, \"utf-8\");\n\n      expect(htmlContent).toContain(\"<!DOCTYPE html>\");\n      expect(htmlContent).toContain(\n        \"Hello from GitVan Cookbook Template System!\",\n      );\n      expect(htmlContent).toContain(\"Repository Information\");\n      expect(htmlContent).toContain(\"Environment\");\n      expect(htmlContent).toContain(\"Foundation Recipe: Template System\");\n    });\n\n    it(\"should render CI/CD templates correctly\", async () => {\n      const result = await execFileAsync(\"node\", [\n        \"-e\",\n        \"import('./dev.mjs').then(m=>m.run('cicd:build-automation', {allowDirty: true}))\",\n      ]);\n\n      expect(result.stdout).toContain(\"Status: SUCCESS\");\n\n      // Check HTML template rendering\n      const htmlPath = join(\n        playgroundDir,\n        \"dist\",\n        \"cicd\",\n        \"build\",\n        \"build-report.html\",\n      );\n      const htmlContent = await fs.readFile(htmlPath, \"utf-8\");\n\n      expect(htmlContent).toContain(\"<!DOCTYPE html>\");\n      expect(htmlContent).toContain(\"Build Report - Cookbook Recipe\");\n      expect(htmlContent).toContain(\"Build Steps\");\n      expect(htmlContent).toContain(\"Build Information\");\n    });\n\n    it(\"should render documentation templates correctly\", async () => {\n      const result = await execFileAsync(\"node\", [\n        \"-e\",\n        \"import('./dev.mjs').then(m=>m.run('documentation:advanced-changelog', {limit: 10}))\",\n      ]);\n\n      expect(result.stdout).toContain(\"Status: SUCCESS\");\n\n      // Check Markdown template rendering\n      const mdPath = join(\n        playgroundDir,\n        \"dist\",\n        \"documentation\",\n        \"ADVANCED_CHANGELOG.md\",\n      );\n      const mdContent = await fs.readFile(mdPath, \"utf-8\");\n\n      expect(mdContent).toContain(\"# Advanced Changelog - Cookbook Recipe\");\n      expect(mdContent).toContain(\"## 📊 Statistics\");\n      expect(mdContent).toContain(\"## 📝 Changes by Category\");\n      expect(mdContent).toContain(\n        \"*Generated by GitVan Jobs System - Cookbook Recipe: Advanced Changelog Generation*\",\n      );\n    });\n  });\n\n  describe(\"Error Handling and Recovery\", () => {\n    it(\"should handle validation errors gracefully\", async () => {\n      try {\n        await execFileAsync(\"node\", [\n          \"-e\",\n          \"import('./dev.mjs').then(m=>m.run('foundation:robust-error-handling', {invalid: 'payload'}))\",\n        ]);\n        expect.fail(\"Expected job to fail with validation error\");\n      } catch (error) {\n        expect(error.stderr).toContain(\"Validation failed\");\n        expect(error.stderr).toContain(\"Invalid payload detected\");\n      }\n    });\n\n    it(\"should handle build failures gracefully\", async () => {\n      // This test would require mocking the build steps to fail\n      // For now, we'll test that the build system handles errors properly\n      const result = await execFileAsync(\"node\", [\n        \"-e\",\n        \"import('./dev.mjs').then(m=>m.run('cicd:build-automation', {environment: 'test', allowDirty: true}))\",\n      ]);\n\n      // Even if some steps fail, the job should complete and generate a report\n      expect(result.stdout).toContain(\"Build report:\");\n\n      const jsonPath = join(\n        playgroundDir,\n        \"dist\",\n        \"cicd\",\n        \"build\",\n        \"build-report.json\",\n      );\n      const jsonExists = await fs\n        .access(jsonPath)\n        .then(() => true)\n        .catch(() => false);\n      expect(jsonExists).toBe(true);\n    });\n  });\n\n  describe(\"Performance and Reliability\", () => {\n    it(\"should complete jobs within reasonable time\", async () => {\n      const startTime = Date.now();\n\n      await execFileAsync(\"node\", [\n        \"-e\",\n        \"import('./dev.mjs').then(m=>m.run('foundation:basic-job-setup'))\",\n      ]);\n\n      const duration = Date.now() - startTime;\n      expect(duration).toBeLessThan(10000); // Should complete within 10 seconds\n    });\n\n    it(\"should handle concurrent job discovery\", async () => {\n      const [result1, result2, result3] = await Promise.all([\n        execFileAsync(\"node\", [\"-e\", \"import('./dev.mjs').then(m=>m.list())\"]),\n        execFileAsync(\"node\", [\"-e\", \"import('./dev.mjs').then(m=>m.list())\"]),\n        execFileAsync(\"node\", [\"-e\", \"import('./dev.mjs').then(m=>m.list())\"]),\n      ]);\n\n      // All should return the same result\n      expect(result1.stdout).toContain(\"foundation:basic-job-setup\");\n      expect(result2.stdout).toContain(\"foundation:basic-job-setup\");\n      expect(result3.stdout).toContain(\"foundation:basic-job-setup\");\n    });\n  });\n\n  describe(\"Integration with GitVan Core\", () => {\n    it(\"should use correct GitVan configuration\", async () => {\n      const configPath = join(playgroundDir, \"gitvan.config.js\");\n      const configExists = await fs\n        .access(configPath)\n        .then(() => true)\n        .catch(() => false);\n      expect(configExists).toBe(true);\n\n      const configContent = await fs.readFile(configPath, \"utf-8\");\n      expect(configContent).toContain(\n        'templates: { engine: \"nunjucks\", dirs: [\"templates\"] }',\n      );\n      expect(configContent).toContain(\n        'receipts: { ref: \"refs/notes/gitvan/results\" }',\n      );\n    });\n\n    it(\"should integrate with all core systems\", async () => {\n      // Test that jobs can use all core systems\n      const result = await execFileAsync(\"node\", [\n        \"-e\",\n        \"import('./dev.mjs').then(m=>m.run('foundation:template-greeting', {test: 'integration'}))\",\n      ]);\n\n      expect(result.stdout).toContain(\"Status: SUCCESS\");\n      expect(result.stdout).toContain(\"Template greeting created\");\n\n      // Verify that the job used git, templates, and file system\n      const htmlPath = join(\n        playgroundDir,\n        \"dist\",\n        \"foundation\",\n        \"greeting-template.html\",\n      );\n      const htmlContent = await fs.readFile(htmlPath, \"utf-8\");\n      expect(htmlContent).toContain(\"Test\");\n      expect(htmlContent).toContain(\"integration\");\n    });\n  });\n});\n"
        }
    ]
}