{
    "sourceFile": "docs/v2/AI-PRD-V2.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758055553643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758055553643,
            "name": "Commit-0",
            "content": "# GitVan v2 — AI PRD\n\n## 1) Summary\n\nShip a **local-first, auditable AI layer** for GitVan that drafts routine developer artifacts (changelog, release notes, dev diary, PR summaries) using **templates + LLMs**, with **deterministic controls** and **Git-native receipts**. Default: **Ollama local**. Cloud models are **opt-in**.\n\n---\n\n## 2) Objectives & Success Metrics\n\n* **TTFAI (time-to-first-AI job)** ≤ 5 min (install → `gitvan llm call` works).\n* **Receipt coverage** 100% of AI calls include model, params, hashes, status.\n* **Repro control** Seed recorded on 100% calls; `verify` passes on ≥ 95% (hash & metadata).\n* **Security** 0 secrets leaked in receipts (sampled).\n* **Adoption** ≥ 3 dark-matter AI recipes used by pilot teams within 30 days.\n\n---\n\n## 3) Scope (v2)\n\n**In**\n\n* Providers: **Ollama (default)**; **Generic HTTP**; **Vercel AI SDK** (opt-in).\n* Ops: text **generate**, **embed** (single/batch), optional **stream to TTY**.\n* Templates: **Nunjucks** prompts with repo context; string & file outputs.\n* Receipts: **Git notes** (`refs/notes/gitvan/results`) with redaction.\n* Events: cron + git-event triggering of AI jobs.\n* Worktree-aware isolation & locking.\n\n**Out**\n\n* Fine-tuning, RAG store, hosted DB, proprietary telemetry, GUI.\n\n---\n\n## 4) Personas & JTBD (short)\n\n* **Indie Dev**: “Draft my changelog on tag, locally, no setup.”\n* **DevEx**: “Standardize AI helpers with audit.”\n* **Compliance**: “Show me the **prompt, model, params, output hash** for any doc.”\n* **SRE/Sec**: “No secret leakage, deterministic controls, offline default.”\n\n---\n\n## 5) User Stories\n\n1. As a dev, I run `gitvan llm call \"Summarize today\"` and get output + a signed receipt.\n2. On tag `vX.Y.Z`, a job renders **release notes** from a Nunjucks prompt using commit data.\n3. A PR open event generates a **diff summary** with redaction and size/time limits.\n4. I can re-verify a receipt later: recompute hashes and confirm integrity.\n5. I can switch provider to cloud (Vercel AI) **only if I opt-in in config**.\n\n---\n\n## 6) Functional Requirements\n\n### 6.1 Providers\n\n* **Default**: Ollama at `http://localhost:11434`.\n* **Optional**: `provider: 'vercel-ai' | 'http'` with baseURL/headers.\n* Health check: `gitvan llm models list` returns models or clear error.\n\n### 6.2 Operations\n\n* **Generate**: text out; deterministic controls (seed, temp, top\\_p, max\\_tokens).\n* **Embed**: returns vector & metadata (dims, model).\n* **Stream**: print chunks; still write a final receipt.\n\n### 6.3 Templates\n\n* Prompts written in **Nunjucks**; filters include `inflection` set.\n* Access to **git context** via composables (logs, diffs, files).\n* Deterministic helpers: `nowISO`, `slug`, `json`.\n\n### 6.4 Receipts (Git Notes)\n\n* Stored under `refs/notes/gitvan/results`.\n* Fields: `id`, `ts`, `commit`, `worktree`, `provider`, `model`, `params` (seed!), `promptHash`, `outputHash`, `status (OK|ERROR|TIMEOUT|TRUNCATED)`, `durationMs`, `redactions`, `limits`, `artifactPaths?`.\n* **Redaction on by default**; configurable allow/deny patterns.\n* **No raw secrets** in notes; large outputs stored as artifact files, note stores hash + path.\n\n### 6.5 Limits & Policy\n\n* Timeout (default 30s), max tokens/bytes, max prompt size, truncation policy.\n* Optional **requireSigned** for event-driven AI jobs.\n\n### 6.6 Worktree & Locks\n\n* Per-worktree context; once-only execution via atomic `update-ref` lock: `refs/gitvan/locks/ai/<id>`.\n\n### 6.7 CLI UX (mock help)\n\n```\ngitvan llm help\n  call \"<prompt>\" [--model llama3.2] [--seed 123] [--temp 0.2] [--out file]\n  embed \"<text>\" [--model nomic-embed-text] [--json]\n  models list\n  receipts list [--limit 50]\n  receipts show <id>\n  receipts verify <id>\n  redact test \"<text>\"\n  config show\n```\n\n### 6.8 Jobs & Events\n\n* `jobs/**.mjs` may use AI via composables.\n* Suffixes: `.cron.mjs` and `.evt.mjs` support AI actions in `run()`.\n\n---\n\n## 7) Configuration (gitvan.config.js)\n\n* `ai.provider`: `\"ollama\" | \"vercel-ai\" | \"http\"` (default: `ollama`).\n* `ai.ollama.baseURL`: default `http://localhost:11434`.\n* `ai.http.baseURL`, `ai.http.headers`: optional.\n* `ai.defaults`: `{ model, seed, temp, top_p, max_tokens, timeoutMs, maxOutputBytes }`.\n* `ai.redact`: `{ enabled: true, patterns: [...], allowlist: [...], blocklist: [...] }`.\n* `ai.receipts`: `{ ref: \"refs/notes/gitvan/results\", storeOutput: \"hash|inline|file\" }`.\n\n---\n\n## 8) Non-Functional\n\n* **Perf**: non-model overhead p50 < 100ms; receipt write < 10ms.\n* **Reliability**: retries with backoff (configurable); idempotent receipts.\n* **Security/Privacy**: redaction default on; opt-in cloud; no secret persistence.\n* **Portability**: works offline with Ollama; consistent across OSes.\n\n---\n\n## 9) Data Contracts (high-level)\n\n* **AIRequest**: `{ provider, model, params, prompt|template, context }`.\n* **AIResult**: `{ output, tokens?, usage?, durationMs }`.\n* **AIReceipt**: as in §6.4 (append-only JSON in Git notes).\n\n---\n\n## 10) Rollout Plan\n\n* **M1 (Core)**: Ollama generate/embed; receipts; redaction; CLI (`call|embed|models|receipts`).\n* **M2 (Templates)**: Nunjucks prompt files; cookbook recipes (dev-diary, changelog, release notes).\n* **M3 (Events)**: cron & event-triggered AI jobs; `verify` command.\n* **M4 (Providers+)**: Vercel AI / HTTP provider opt-in; streaming; limits polish.\n\n---\n\n## 11) Acceptance Criteria\n\n* Fresh repo + running Ollama → `gitvan llm call \"hi\"` works; note written.\n* `gitvan llm receipts verify <id>` passes (hash + metadata).\n* Redaction default removes tokens matching patterns; can be disabled per call/job.\n* Tag event job generates release notes via template; receipt recorded.\n\n---\n\n## 12) Risks & Mitigations\n\n* **Nondeterminism** → require/record seed; store output hash; receipts immutable.\n* **Secret leakage** → default redaction + tests + allow/block lists.\n* **Provider drift** → abstract provider; normalize receipts.\n* **Large outputs** → enforce size limits; store as file artifact, hash in note.\n\n---\n\n## 13) Open Questions\n\n* Include **cost** field (user-provided) in receipts?\n* Standardize **model fingerprint** (hash) for verification?\n* Add **policy hooks** (deny external providers on protected branches) in v2 or v2.x?\n\n---\n\n## 14) Outbound Docs to Ship\n\n* **Quickstart (AI)**, **Security & Redaction**, **Receipts & Verify**, **Cookbook: dev-diary/changelog/release notes**, **Provider setup (Vercel AI / HTTP)**, **Troubleshooting (Ollama)**.\n\n---\n\n**Decision:** AI in GitVan v2 is **local-first, template-driven, receipt-centric**. Cloud is optional, not assumed. Determinism and audit are non-negotiable defaults.\n"
        }
    ]
}