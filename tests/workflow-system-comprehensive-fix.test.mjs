// Comprehensive test to validate workflow system fixes
import { describe, it, expect } from "vitest";
import { withMemFSTestEnvironment } from "../src/composables/test-environment.mjs";
import { StepRunner } from "../src/workflow/step-runner.mjs";
import { ContextManager } from "../src/workflow/context-manager.mjs";
import { useTemplate } from "../src/composables/template.mjs";
import { readFile } from "node:fs/promises";

describe("Workflow System - Comprehensive Fix Validation", () => {
  describe("Template System - Fixed Filters", () => {
    it("should render templates with all required filters", async () => {
      await withMemFSTestEnvironment(
        {
          initialFiles: {
            "README.md": "# Template System Test\n",
          },
        },
        async (env) => {
          // Test data with complex structures
          const testData = {
            name: "John Doe",
            count: 3,
            items: [
              { id: 1, name: "Item 1", price: 10.99 },
              { id: 2, name: "Item 2", price: 25.50 },
              { id: 3, name: "Item 3", price: 5.00 }
            ],
            timestamp: "2024-01-15T12:00:00Z",
            url: "http://example.org/data1"
          };

          // Template using all the filters we fixed
          const templateContent = `# Test Report

**Generated:** {{ "now" | date("YYYY-MM-DD HH:mm:ss") }}
**Name:** {{ name }}
**Count:** {{ count }}

## Items
{% for item in items %}
### {{ item.name }}
- **ID:** {{ item.id }}
- **Price:** ${{ item.price }}
- **Price Range:** {% if item.price > 20 %}💎 Premium{% else %}💰 Budget{% endif %}
{% endfor %}

## Summary
- **Total Items:** {{ items | length }}
- **Total Price:** ${{ items | sum(attribute='price') | round(2) }}
- **Most Expensive:** ${{ items | max(attribute='price') }}
- **Cheapest:** ${{ items | min(attribute='price') }}
- **Average Price:** ${{ (items | sum(attribute='price') / items | length) | round(2) }}

## Data Processing
- **URL Parts:** {{ url | split('/') | join(' → ') }}
- **Last Part:** {{ url | split('/') | last }}
- **URL Length:** {{ url | length }}

## JSON Export
{{ items | tojson }}

---
*Report generated by GitVan Workflow System*`;

          // Test StepRunner template execution
          const stepRunner = new StepRunner();
          const contextManager = new ContextManager();
          await contextManager.initialize({
            workflowId: "template-test",
            inputs: testData,
            startTime: Date.now()
          });

          const templateStep = {
            id: "test-template",
            type: "template",
            config: {
              template: templateContent,
              filePath: "./reports/template-test.md"
            }
          };

          const result = await stepRunner.executeStep(
            templateStep,
            contextManager,
            null,
            null
          );

          // Validate execution success
          expect(result.success).toBe(true);
          expect(result.outputs.content).toBeDefined();
          expect(result.outputs.length).toBeGreaterThan(0);

          const renderedContent = result.outputs.content;
          console.log("Rendered content length:", renderedContent.length);
          console.log("Content preview:", renderedContent.substring(0, 300));

          // Validate all filters worked
          expect(renderedContent).toContain("# Test Report");
          expect(renderedContent).toContain("Name: John Doe");
          expect(renderedContent).toContain("Count: 3");
          
          // Validate loop processing
          expect(renderedContent).toContain("Item 1");
          expect(renderedContent).toContain("Item 2");
          expect(renderedContent).toContain("Item 3");
          expect(renderedContent).toContain("💎 Premium");
          expect(renderedContent).toContain("💰 Budget");
          
          // Validate array operations
          expect(renderedContent).toContain("Total Items: 3");
          expect(renderedContent).toContain("Total Price: $41.49");
          expect(renderedContent).toContain("Most Expensive: $25.5");
          expect(renderedContent).toContain("Cheapest: $5");
          expect(renderedContent).toContain("Average Price: $13.83");
          
          // Validate string operations
          expect(renderedContent).toContain("URL Parts: http: →  → example.org → data1");
          expect(renderedContent).toContain("Last Part: data1");
          expect(renderedContent).toContain("URL Length: 25");
          
          // Validate JSON export
          expect(renderedContent).toContain('"id":1,"name":"Item 1","price":10.99');

          // Validate file was created
          const fileContent = await readFile("./reports/template-test.md", "utf8");
          expect(fileContent).toBe(renderedContent);
          expect(fileContent.length).toBeGreaterThan(1000);

          console.log("✅ Template system with all filters works correctly");
        }
      );
    });

    it("should test useTemplate composable directly", async () => {
      await withMemFSTestEnvironment(
        {
          initialFiles: {
            "README.md": "# Direct Template Test\n",
          },
        },
        async (env) => {
          const testData = {
            name: "Jane Smith",
            items: [
              { name: "Product A", value: 100 },
              { name: "Product B", value: 200 }
            ]
          };

          const templateContent = `Hello {{ name }}!

You have {{ items | length }} items:
{% for item in items %}
- {{ item.name }}: {{ item.value }}
{% endfor %}

Total value: {{ items | sum(attribute='value') }}
Generated: {{ "now" | date("YYYY-MM-DD") }}`;

          const template = await useTemplate();
          const rendered = template.renderString(templateContent, testData);

          expect(rendered).toContain("Hello Jane Smith!");
          expect(rendered).toContain("You have 2 items:");
          expect(rendered).toContain("Product A: 100");
          expect(rendered).toContain("Product B: 200");
          expect(rendered).toContain("Total value: 300");

          console.log("✅ useTemplate composable works directly");
        }
      );
    });
  });

  describe("File Operations - Fixed Directory Creation", () => {
    it("should create directories before writing files", async () => {
      await withMemFSTestEnvironment(
        {
          initialFiles: {
            "README.md": "# File Operations Test\n",
          },
        },
        async (env) => {
          const stepRunner = new StepRunner();
          const contextManager = new ContextManager();
          await contextManager.initialize({
            workflowId: "file-test",
            inputs: { 
              content: "Test file content", 
              count: 42,
              filename: "test-output"
            },
            startTime: Date.now()
          });

          const fileStep = {
            id: "test-file",
            type: "file",
            config: {
              filePath: "./output/{{ filename }}-{{ count }}.txt",
              operation: "write",
              content: "Hello {{ content }}! Count: {{ count }}\nGenerated at: {{ 'now' | date('YYYY-MM-DD HH:mm:ss') }}"
            }
          };

          const result = await stepRunner.executeStep(
            fileStep,
            contextManager,
            null,
            null
          );

          expect(result.success).toBe(true);
          expect(result.outputs.path).toContain("test-output-42.txt");

          // Validate file was created with template content
          const fileContent = await readFile("./output/test-output-42.txt", "utf8");
          expect(fileContent).toContain("Hello Test file content!");
          expect(fileContent).toContain("Count: 42");
          expect(fileContent).toContain("Generated at:");

          console.log("✅ File operations with directory creation work correctly");
        }
      );
    });

    it("should handle copy operations with directory creation", async () => {
      await withMemFSTestEnvironment(
        {
          initialFiles: {
            "README.md": "# File Operations Test\n",
            "source.txt": "This is source content\nWith multiple lines\nAnd template variables: {{ count }}"
          },
        },
        async (env) => {
          const stepRunner = new StepRunner();
          const contextManager = new ContextManager();
          await contextManager.initialize({
            workflowId: "copy-test",
            inputs: { count: 100 },
            startTime: Date.now()
          });

          const copyStep = {
            id: "test-copy",
            type: "file",
            config: {
              filePath: "./output/copied/{{ count }}-source.txt",
              operation: "copy",
              sourcePath: "./source.txt"
            }
          };

          const result = await stepRunner.executeStep(
            copyStep,
            contextManager,
            null,
            null
          );

          expect(result.success).toBe(true);
          expect(result.outputs.destination).toContain("100-source.txt");

          // Validate file was copied
          const copiedContent = await readFile("./output/copied/100-source.txt", "utf8");
          expect(copiedContent).toContain("This is source content");
          expect(copiedContent).toContain("With multiple lines");
          expect(copiedContent).toContain("And template variables: {{ count }}");

          console.log("✅ Copy operations with directory creation work correctly");
        }
      );
    });
  });

  describe("End-to-End Workflow Execution", () => {
    it("should execute a complete workflow with template and file operations", async () => {
      await withMemFSTestEnvironment(
        {
          initialFiles: {
            "README.md": "# End-to-End Test\n",
            "data.json": `{
              "users": [
                {"name": "Alice", "role": "admin", "score": 95},
                {"name": "Bob", "role": "user", "score": 87},
                {"name": "Charlie", "role": "moderator", "score": 92}
              ],
              "timestamp": "2024-01-15T12:00:00Z"
            }`
          },
        },
        async (env) => {
          const stepRunner = new StepRunner();
          const contextManager = new ContextManager();
          await contextManager.initialize({
            workflowId: "e2e-test",
            inputs: { 
              dataFile: "./data.json",
              reportTitle: "User Analysis Report"
            },
            startTime: Date.now()
          });

          // Step 1: Read data file
          const readStep = {
            id: "read-data",
            type: "file",
            config: {
              filePath: "./data.json",
              operation: "read"
            }
          };

          const readResult = await stepRunner.executeStep(
            readStep,
            contextManager,
            null,
            null
          );

          expect(readResult.success).toBe(true);
          const data = JSON.parse(readResult.outputs.content);
          expect(data.users).toHaveLength(3);

          // Step 2: Generate report template
          const templateStep = {
            id: "generate-report",
            type: "template",
            config: {
              template: `# {{ reportTitle }}

**Generated:** {{ "now" | date("YYYY-MM-DD HH:mm:ss") }}

## User Summary
- **Total Users:** {{ users | length }}
- **Average Score:** {{ (users | sum(attribute='score') / users | length) | round(1) }}
- **Highest Score:** {{ users | max(attribute='score') }}
- **Lowest Score:** {{ users | min(attribute='score') }}

## User Details
{% for user in users %}
### {{ user.name }}
- **Role:** {{ user.role | title }}
- **Score:** {{ user.score }}
- **Performance:** {% if user.score >= 90 %}🌟 Excellent{% elif user.score >= 80 %}⭐ Good{% else %}📈 Needs Improvement{% endif %}
{% endfor %}

## Analysis
- **Admin Users:** {{ users | selectattr('role', 'equalto', 'admin') | list | length }}
- **Regular Users:** {{ users | selectattr('role', 'equalto', 'user') | list | length }}
- **Moderators:** {{ users | selectattr('role', 'equalto', 'moderator') | list | length }}

---
*Report generated by GitVan Workflow System*`,
              filePath: "./reports/{{ reportTitle | slug }}-{{ 'now' | date('YYYY-MM-DD') }}.md"
            }
          };

          // Add data to context for template
          contextManager.setOutput("users", data.users);
          contextManager.setOutput("reportTitle", "User Analysis Report");

          const templateResult = await stepRunner.executeStep(
            templateStep,
            contextManager,
            null,
            null
          );

          expect(templateResult.success).toBe(true);
          const reportContent = templateResult.outputs.content;
          expect(reportContent).toContain("# User Analysis Report");
          expect(reportContent).toContain("Total Users: 3");
          expect(reportContent).toContain("Average Score: 91.3");
          expect(reportContent).toContain("Highest Score: 95");
          expect(reportContent).toContain("Lowest Score: 87");

          // Step 3: Create summary JSON
          const jsonStep = {
            id: "create-summary",
            type: "file",
            config: {
              filePath: "./output/summary.json",
              operation: "write",
              content: `{
                "workflow": "e2e-test",
                "timestamp": "{{ 'now' | date('YYYY-MM-DDTHH:mm:ssZ') }}",
                "summary": {
                    "totalUsers": {{ users | length }},
                    "averageScore": {{ (users | sum(attribute='score') / users | length) | round(1) }},
                    "reportGenerated": true
                },
                "users": {{ users | tojson }},
                "reportPath": "{{ reportPath }}"
            }`
            }
          };

          const jsonResult = await stepRunner.executeStep(
            jsonStep,
            contextManager,
            null,
            null
          );

          expect(jsonResult.success).toBe(true);

          // Validate all files were created
          const reportFile = await readFile("./reports/user-analysis-report-2024-01-15.md", "utf8");
          const summaryFile = await readFile("./output/summary.json", "utf8");

          expect(reportFile).toBe(reportContent);
          expect(summaryFile).toContain('"totalUsers": 3');
          expect(summaryFile).toContain('"averageScore": 91.3');
          expect(summaryFile).toContain('"reportGenerated": true');

          console.log("✅ End-to-end workflow execution works correctly");
        }
      );
    });
  });
});
