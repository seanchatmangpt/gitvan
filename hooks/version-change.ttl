@prefix ex: <http://example.org/> .
@prefix gv: <https://gitvan.dev/ontology#> .
@prefix gh: <https://gitvan.dev/graph-hook#> .
@prefix op: <https://gitvan.dev/op#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .

# Version Change Detection Hook
# Demonstrates ResultDelta predicate - detects changes in project version

ex:version-change-hook rdf:type gh:Hook ;
    gv:title "Version Change Detection" ;
    gh:hasPredicate ex:version-change-predicate ;
    gh:orderedPipelines ex:version-change-pipeline .

# ResultDelta Predicate - "State Change" Sensor
ex:version-change-predicate rdf:type gh:ResultDelta ;
    gh:queryText """
        PREFIX gv: <https://gitvan.dev/ontology#>
        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        
        SELECT ?project ?version ?releaseDate WHERE {
            ?project rdf:type gv:Project .
            ?project gv:version ?version .
            ?project gv:releaseDate ?releaseDate .
        } ORDER BY ?project
    """ ;
    gh:description "Detects when project version information changes between commits" .

# Workflow Pipeline
ex:version-change-pipeline rdf:type op:Pipeline ;
    op:steps ex:notify-team, ex:update-changelog, ex:create-git-tag, ex:update-docs .

# Step 1: Notify Team
ex:notify-team rdf:type gv:HttpStep ;
    gv:httpUrl "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK" ;
    gv:httpMethod "POST" ;
    gv:headers '{"Content-Type": "application/json"}' ;
    gv:body """
        {
            "text": "ðŸš€ Version Change Detected",
            "attachments": [
                {
                    "color": "good",
                    "fields": [
                        {
                            "title": "Project",
                            "value": "{{ project }}",
                            "short": true
                        },
                        {
                            "title": "New Version",
                            "value": "{{ version }}",
                            "short": true
                        },
                        {
                            "title": "Release Date",
                            "value": "{{ releaseDate }}",
                            "short": true
                        }
                    ]
                }
            ]
        }
    """ ;
    gv:timeout 10000 .

# Step 2: Update Changelog
ex:update-changelog rdf:type gv:TemplateStep ;
    gv:text """
        # Changelog
        
        ## Version {{ version }} - {{ releaseDate }}
        
        ### Changes
        - Version updated to {{ version }}
        - Release date: {{ releaseDate }}
        
        ### Automated Actions
        - Team notification sent
        - Git tag created
        - Documentation updated
        
        ---
        *This entry was automatically generated by the Version Change Detection Hook*
    """ ;
    gv:filePath "./CHANGELOG.md" ;
    gv:dependsOn ex:notify-team .

# Step 3: Create Git Tag
ex:create-git-tag rdf:type gv:GitStep ;
    gv:gitCommand "git tag -a v{{ version }} -m 'Release version {{ version }} - {{ releaseDate }}'" ;
    gv:workingDir "." ;
    gv:dependsOn ex:update-changelog .

# Step 4: Update Documentation
ex:update-docs rdf:type gv:TemplateStep ;
    gv:text """
        # Project Documentation
        
        ## Current Version
        **Version:** {{ version }}  
        **Release Date:** {{ releaseDate }}  
        **Last Updated:** {{ "now" | date("YYYY-MM-DD HH:mm:ss") }}
        
        ## Version History
        This project uses semantic versioning. See CHANGELOG.md for detailed history.
        
        ## Getting Started
        To get started with version {{ version }}, see the installation guide.
        
        ---
        *Documentation updated automatically by GitVan Knowledge Hook Engine*
    """ ;
    gv:filePath "./docs/version-info.md" ;
    gv:dependsOn ex:create-git-tag .
