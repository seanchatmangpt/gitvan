{
    "sourceFile": "src/cli/daemon.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758057329105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758057329105,
            "name": "Commit-0",
            "content": "/**\n * GitVan v2 Daemon CLI - Daemon management commands\n * Provides commands for starting, stopping, and monitoring the daemon\n */\n\nimport { startDaemon, daemonStatus, stopDaemon } from \"../runtime/daemon.mjs\";\nimport { createLogger } from \"../utils/logger.mjs\";\n\nconst logger = createLogger(\"daemon-cli\");\n\n/**\n * Daemon CLI command handler\n * @param {string} subcommand - Subcommand (start, stop, status, restart)\n * @param {object} args - Command arguments\n * @returns {Promise<void>}\n */\nexport async function daemonCommand(subcommand = \"start\", args = {}) {\n  switch (subcommand) {\n    case \"start\":\n      return await startDaemonCommand(args);\n\n    case \"stop\":\n      return await stopDaemonCommand();\n\n    case \"status\":\n      return await statusCommand();\n\n    case \"restart\":\n      return await restartCommand(args);\n\n    default:\n      throw new Error(`Unknown daemon subcommand: ${subcommand}`);\n  }\n}\n\n/**\n * Start daemon command\n * @param {object} args - Start arguments\n * @returns {Promise<void>}\n */\nasync function startDaemonCommand(args) {\n  try {\n    console.log(\"Starting GitVan daemon...\");\n\n    const options = {\n      rootDir: args.rootDir || process.cwd(),\n      worktrees: args.worktrees || \"current\",\n      ...args,\n    };\n\n    await startDaemon(options);\n\n    console.log(\"Daemon started successfully\");\n    console.log(`  Root: ${options.rootDir}`);\n    console.log(`  Worktrees: ${options.worktrees}`);\n  } catch (error) {\n    logger.error(\"Failed to start daemon:\", error.message);\n    throw error;\n  }\n}\n\n/**\n * Stop daemon command\n * @returns {Promise<void>}\n */\nasync function stopDaemonCommand() {\n  try {\n    console.log(\"Stopping GitVan daemon...\");\n\n    await stopDaemon();\n\n    console.log(\"Daemon stopped successfully\");\n  } catch (error) {\n    logger.error(\"Failed to stop daemon:\", error.message);\n    throw error;\n  }\n}\n\n/**\n * Status command\n * @returns {Promise<void>}\n */\nasync function statusCommand() {\n  try {\n    const status = await daemonStatus();\n\n    console.log(\"GitVan Daemon Status:\");\n    console.log(`  Running: ${status.running ? \"Yes\" : \"No\"}`);\n\n    if (status.running) {\n      console.log(`  PID: ${status.pid || \"Unknown\"}`);\n      console.log(`  Uptime: ${status.uptime || \"Unknown\"}`);\n      console.log(`  Worktrees: ${status.worktrees || \"Unknown\"}`);\n    }\n\n    if (status.jobs) {\n      console.log(`  Active Jobs: ${status.jobs.active || 0}`);\n      console.log(`  Completed Jobs: ${status.jobs.completed || 0}`);\n      console.log(`  Failed Jobs: ${status.jobs.failed || 0}`);\n    }\n  } catch (error) {\n    logger.error(\"Failed to get daemon status:\", error.message);\n    throw error;\n  }\n}\n\n/**\n * Restart daemon command\n * @param {object} args - Restart arguments\n * @returns {Promise<void>}\n */\nasync function restartCommand(args) {\n  try {\n    console.log(\"Restarting GitVan daemon...\");\n\n    await stopDaemon();\n\n    // Wait a moment for cleanup\n    await new Promise((resolve) => setTimeout(resolve, 1000));\n\n    await startDaemonCommand(args);\n\n    console.log(\"Daemon restarted successfully\");\n  } catch (error) {\n    logger.error(\"Failed to restart daemon:\", error.message);\n    throw error;\n  }\n}\n"
        }
    ]
}