import { defineEvent } from 'gitvan';

export default defineEvent({
  meta: {
    id: 'release',
    description: 'Handle release tag creation',
    triggers: ['tag:create']
  },
  async handle({ ctx, payload }) {
    const { useGit, runJob } = ctx;
    const { tag } = payload;

    try {
      console.log(`üè∑Ô∏è  New tag created: ${tag}`);

      // Run release notes generation
      const releaseResult = await runJob('docs:release-notes', { tag });

      if (!releaseResult.ok) {
        console.error(`Failed to generate release notes: ${releaseResult.error}`);
        return {
          ok: false,
          error: releaseResult.error
        };
      }

      // Update changelog
      const changelogResult = await runJob('docs:changelog');

      if (!changelogResult.ok) {
        console.error(`Failed to update changelog: ${changelogResult.error}`);
      }

      // Commit the generated documentation
      const git = useGit();
      await git.add(['CHANGELOG.md', `docs/releases/${tag}.md`]);
      await git.commit(`docs: add release documentation for ${tag}

Generated by GitVan automation:
- Release notes: docs/releases/${tag}.md
- Updated changelog: CHANGELOG.md

[skip ci]`);

      return {
        ok: true,
        summary: `Generated release documentation for ${tag}`,
        artifacts: ['CHANGELOG.md', `docs/releases/${tag}.md`]
      };

    } catch (error) {
      console.error(`Error handling tag event: ${error.message}`);
      return {
        ok: false,
        error: error.message,
        summary: `Failed to handle tag creation for ${tag}`
      };
    }
  }
});