{
    "sourceFile": "src/jobs/daemon.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758048967773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758048967773,
            "name": "Commit-0",
            "content": "// src/jobs/daemon.mjs\n// GitVan v2 — Job Daemon\n// Combines cron scheduling and event monitoring\n\nimport { CronScheduler } from \"./cron.mjs\";\nimport { EventJobRunner } from \"./events.mjs\";\nimport { loadOptions } from \"../config/loader.mjs\";\nimport { useGit } from \"../composables/git.mjs\";\n\n/**\n * GitVan Job Daemon\n * Monitors git events and runs scheduled jobs\n */\nexport class JobDaemon {\n  constructor(options = {}) {\n    this.options = options;\n    this.config = null;\n    this.cronScheduler = null;\n    this.eventRunner = null;\n    this.git = null;\n    this.isRunning = false;\n    this.watchers = new Map();\n    this.lastCommit = null;\n    this.eventCheckInterval = options.eventCheckInterval || 30000; // Check every 30 seconds\n    this.eventTimer = null;\n  }\n\n  async init() {\n    this.config = await loadOptions();\n    this.cronScheduler = new CronScheduler({\n      tickInterval: this.options.cronTickInterval || 60000,\n    });\n    this.eventRunner = new EventJobRunner();\n    this.git = useGit();\n\n    await this.cronScheduler.init();\n    await this.eventRunner.init();\n  }\n\n  /**\n   * Start the daemon\n   */\n  async start() {\n    if (this.isRunning) {\n      console.warn(\"Job daemon is already running\");\n      return;\n    }\n\n    await this.init();\n\n    console.log(\"Starting GitVan Job Daemon...\");\n    console.log(`Configuration:`);\n    console.log(`  Root directory: ${this.config.rootDir}`);\n    console.log(`  Receipts ref: ${this.config.receipts.ref}`);\n    console.log(`  Event check interval: ${this.eventCheckInterval / 1000}s`);\n    console.log(\n      `  Cron tick interval: ${this.cronScheduler.tickInterval / 1000}s`,\n    );\n\n    this.isRunning = true;\n\n    // Start cron scheduler\n    await this.cronScheduler.start();\n\n    // Start event monitoring\n    await this.startEventMonitoring();\n\n    // Set up signal handlers\n    this.setupSignalHandlers();\n\n    console.log(\"✅ Job daemon started successfully\");\n  }\n\n  /**\n   * Stop the daemon\n   */\n  async stop() {\n    if (!this.isRunning) {\n      console.warn(\"Job daemon is not running\");\n      return;\n    }\n\n    console.log(\"Stopping GitVan Job Daemon...\");\n\n    this.isRunning = false;\n\n    // Stop cron scheduler\n    this.cronScheduler.stop();\n\n    // Stop event monitoring\n    this.stopEventMonitoring();\n\n    console.log(\"✅ Job daemon stopped\");\n  }\n\n  /**\n   * Start event monitoring\n   */\n  async startEventMonitoring() {\n    // Get initial commit\n    try {\n      this.lastCommit = await this.git.head();\n    } catch (error) {\n      console.warn(\"Could not get initial commit:\", error.message);\n    }\n\n    // Set up periodic event checks\n    this.eventTimer = setInterval(async () => {\n      try {\n        await this.checkForEvents();\n      } catch (error) {\n        console.error(\"Event monitoring error:\", error.message);\n      }\n    }, this.eventCheckInterval);\n\n    console.log(\"Event monitoring started\");\n  }\n\n  /**\n   * Stop event monitoring\n   */\n  stopEventMonitoring() {\n    if (this.eventTimer) {\n      clearInterval(this.eventTimer);\n      this.eventTimer = null;\n    }\n\n    console.log(\"Event monitoring stopped\");\n  }\n\n  /**\n   * Check for new git events\n   */\n  async checkForEvents() {\n    try {\n      const currentCommit = await this.git.head();\n\n      if (this.lastCommit && currentCommit !== this.lastCommit) {\n        console.log(\n          `Git event detected: ${this.lastCommit} → ${currentCommit}`,\n        );\n\n        // Check for event-driven jobs\n        await this.eventRunner.checkAndRunEventJobs({\n          commit: currentCommit,\n          previousCommit: this.lastCommit,\n        });\n\n        this.lastCommit = currentCommit;\n      }\n    } catch (error) {\n      console.warn(\"Error checking for events:\", error.message);\n    }\n  }\n\n  /**\n   * Set up signal handlers for graceful shutdown\n   */\n  setupSignalHandlers() {\n    const shutdown = async (signal) => {\n      console.log(`\\nReceived ${signal}, shutting down gracefully...`);\n      await this.stop();\n      process.exit(0);\n    };\n\n    process.on(\"SIGINT\", () => shutdown(\"SIGINT\"));\n    process.on(\"SIGTERM\", () => shutdown(\"SIGTERM\"));\n    process.on(\"SIGHUP\", () => shutdown(\"SIGHUP\"));\n  }\n\n  /**\n   * Get daemon status\n   */\n  getStatus() {\n    return {\n      isRunning: this.isRunning,\n      cronStatus: this.cronScheduler?.getStatus() || null,\n      eventCheckInterval: this.eventCheckInterval,\n      lastCommit: this.lastCommit,\n      config: {\n        rootDir: this.config?.rootDir,\n        receiptsRef: this.config?.receipts?.ref,\n      },\n    };\n  }\n\n  /**\n   * Force check for events (useful for testing)\n   */\n  async forceEventCheck() {\n    if (!this.isRunning) {\n      throw new Error(\"Daemon is not running\");\n    }\n\n    await this.checkForEvents();\n  }\n\n  /**\n   * Get daemon statistics\n   */\n  async getStats() {\n    const cronSchedule = this.cronScheduler?.listSchedule() || [];\n    const eventJobs = (await this.eventRunner?.listEventJobs()) || [];\n\n    return {\n      cronJobs: cronSchedule.length,\n      eventJobs: eventJobs.length,\n      totalJobs: cronSchedule.length + eventJobs.length,\n      uptime: this.isRunning ? Date.now() - this.startTime : 0,\n    };\n  }\n}\n\n/**\n * CLI for daemon operations\n */\nexport class DaemonCLI {\n  constructor() {\n    this.daemon = null;\n  }\n\n  /**\n   * Start the daemon\n   */\n  async start(options = {}) {\n    this.daemon = new JobDaemon(options);\n    await this.daemon.start();\n\n    // Keep the process alive\n    return new Promise((resolve) => {\n      // The daemon will handle its own shutdown via signal handlers\n      // This promise will never resolve, keeping the process alive\n    });\n  }\n\n  /**\n   * Stop the daemon (if running in same process)\n   */\n  async stop() {\n    if (this.daemon) {\n      await this.daemon.stop();\n    }\n  }\n\n  /**\n   * Get daemon status\n   */\n  async status() {\n    if (!this.daemon) {\n      console.log(\"Daemon is not running\");\n      return;\n    }\n\n    const status = this.daemon.getStatus();\n\n    console.log(\"GitVan Job Daemon Status:\");\n    console.log(`  Running: ${status.isRunning}`);\n    console.log(`  Root directory: ${status.config?.rootDir || \"N/A\"}`);\n    console.log(`  Receipts ref: ${status.config?.receiptsRef || \"N/A\"}`);\n    console.log(`  Last commit: ${status.lastCommit || \"N/A\"}`);\n\n    if (status.cronStatus) {\n      console.log(\n        `  Cron scheduler: ${status.cronStatus.isRunning ? \"Running\" : \"Stopped\"}`,\n      );\n      console.log(`  Scheduled jobs: ${status.cronStatus.scheduleSize}`);\n    }\n  }\n\n  /**\n   * Get daemon statistics\n   */\n  async stats() {\n    if (!this.daemon) {\n      console.log(\"Daemon is not running\");\n      return;\n    }\n\n    const stats = await this.daemon.getStats();\n\n    console.log(\"GitVan Job Daemon Statistics:\");\n    console.log(`  Cron jobs: ${stats.cronJobs}`);\n    console.log(`  Event jobs: ${stats.eventJobs}`);\n    console.log(`  Total jobs: ${stats.totalJobs}`);\n    console.log(`  Uptime: ${Math.round(stats.uptime / 1000)}s`);\n  }\n\n  /**\n   * Force event check\n   */\n  async check() {\n    if (!this.daemon) {\n      console.log(\"Daemon is not running\");\n      return;\n    }\n\n    await this.daemon.forceEventCheck();\n    console.log(\"Event check completed\");\n  }\n}\n\n/**\n * Start the job daemon\n */\nexport async function startJobDaemon(options = {}) {\n  const cli = new DaemonCLI();\n  return await cli.start(options);\n}\n"
        }
    ]
}