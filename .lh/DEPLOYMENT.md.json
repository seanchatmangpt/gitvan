{
    "sourceFile": "DEPLOYMENT.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758072821103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758072821103,
            "name": "Commit-0",
            "content": "# GitVan v2 Deployment Guide\n\n## Quick Start\n\nGitVan v2 is ready for deployment! Here's how to get started:\n\n### Prerequisites\n\n- Node.js 18+ \n- Git repository\n- Ollama (for AI features) - optional but recommended\n\n### Installation\n\n```bash\n# Install GitVan\nnpm install gitvan\n\n# Or with pnpm (recommended)\npnpm add gitvan\n```\n\n### Basic Setup\n\n1. **Initialize GitVan in your repository:**\n   ```bash\n   cd your-repo\n   gitvan help\n   ```\n\n2. **Create your first job:**\n   ```bash\n   # Using AI to generate a job\n   gitvan chat generate \"Create a changelog job that runs on git tags\"\n   \n   # Or create manually in jobs/ directory\n   ```\n\n3. **Test your setup:**\n   ```bash\n   # List available jobs\n   gitvan cron list\n   \n   # Run a job manually\n   gitvan run your-job-name\n   ```\n\n## Configuration\n\n### Environment Variables\n\n```bash\n# AI Configuration\nexport OLLAMA_BASE_URL=\"http://localhost:11434\"\nexport GITVAN_MODEL=\"qwen3-coder:30b\"\nexport GITVAN_LOG_LEVEL=\"info\"\n\n# Runtime Configuration  \nexport GITVAN_NOW=\"2024-01-01T00:00:00Z\"  # For deterministic testing\nexport TZ=\"UTC\"\n```\n\n### Configuration File\n\nCreate `gitvan.config.js` in your repository root:\n\n```javascript\nexport default {\n  // Job configuration\n  jobs: {\n    dir: \"jobs\",\n    scan: {\n      patterns: [\"jobs/**/*.mjs\", \"jobs/**/*.cron.mjs\"],\n      ignore: [\"node_modules/**\", \".git/**\"]\n    }\n  },\n\n  // AI configuration\n  ai: {\n    provider: \"ollama\",\n    model: \"qwen3-coder:30b\",\n    temperature: 0.7\n  },\n\n  // Template configuration\n  templates: {\n    dirs: [\"templates\"],\n    autoescape: false\n  },\n\n  // Receipt configuration\n  receipts: {\n    ref: \"refs/notes/gitvan/results\",\n    enabled: true\n  }\n}\n```\n\n## Commands Reference\n\n### Core Commands\n\n```bash\n# Job Management\ngitvan cron list                    # List cron jobs\ngitvan cron start                   # Start cron scheduler\ngitvan cron dry-run                 # Test cron schedule\n\n# Event Management  \ngitvan event list                   # List event jobs\ngitvan event simulate --files \"src/**\"  # Simulate file changes\n\n# AI Features\ngitvan chat draft \"Create a job\"    # Draft job specification\ngitvan chat generate \"Create a job\" # Generate job files\ngitvan llm call \"Summarize commits\" # Direct AI calls\n\n# Audit & Receipts\ngitvan audit build                  # Build audit pack\ngitvan audit list                   # List receipts\ngitvan audit verify <id>            # Verify receipt\n\n# Daemon Management\ngitvan daemon start                 # Start daemon\ngitvan daemon status                # Check daemon status\ngitvan daemon stop                  # Stop daemon\n```\n\n### Job Types\n\n#### On-Demand Jobs\n```javascript\n// jobs/hello.mjs\nimport { defineJob } from \"gitvan/define\"\n\nexport default defineJob({\n  meta: { desc: \"Hello world job\" },\n  async run({ ctx, payload }) {\n    console.log(\"Hello World!\")\n    return { ok: true, artifacts: [] }\n  }\n})\n```\n\n#### Cron Jobs\n```javascript\n// jobs/cleanup.cron.mjs\nimport { defineJob } from \"gitvan/define\"\n\nexport default defineJob({\n  meta: { desc: \"Daily cleanup\" },\n  cron: \"0 2 * * *\", // 2 AM daily\n  async run({ ctx, payload }) {\n    // Cleanup logic\n    return { ok: true, artifacts: [] }\n  }\n})\n```\n\n#### Event Jobs\n```javascript\n// jobs/changelog.evt.mjs\nimport { defineJob } from \"gitvan/define\"\n\nexport default defineJob({\n  meta: { desc: \"Generate changelog on tag\" },\n  on: {\n    tagCreate: \"v.*\"\n  },\n  async run({ ctx, payload, meta }) {\n    // Generate changelog\n    return { ok: true, artifacts: [] }\n  }\n})\n```\n\n## AI Integration\n\n### Ollama Setup\n\n1. **Install Ollama:**\n   ```bash\n   # macOS\n   brew install ollama\n   \n   # Linux\n   curl -fsSL https://ollama.com/install.sh | sh\n   ```\n\n2. **Pull the recommended model:**\n   ```bash\n   ollama pull qwen3-coder:30b\n   ```\n\n3. **Start Ollama:**\n   ```bash\n   ollama serve\n   ```\n\n### AI Features\n\n- **Job Generation:** `gitvan chat generate \"Create a deployment job\"`\n- **Spec Drafting:** `gitvan chat draft \"Create a CI job\"`\n- **Direct AI Calls:** `gitvan llm call \"Explain this code\"`\n- **Model Management:** `gitvan llm models`\n\n## Production Deployment\n\n### Security Considerations\n\n1. **Sandboxed Operations:** All file operations are sandboxed to prevent directory traversal\n2. **Receipt Verification:** All operations generate verifiable receipts in Git notes\n3. **Path Safety:** Safe file system utilities prevent unsafe writes\n4. **AI Redaction:** Sensitive data is redacted from AI receipts by default\n\n### Performance\n\n- **CTQ-1:** TTFJ ≤ 10 min (Time to First Job)\n- **CTQ-2:** p95 runtime ≤ 300 ms (simple jobs)\n- **CTQ-3:** 100% receipt coverage\n- **CTQ-4:** 0 unsafe writes outside sandbox\n- **CTQ-5:** Chat prompt → Zod-valid spec ≥ 95% success\n- **CTQ-6:** Lock contention < 1% under concurrent operations\n\n### Monitoring\n\n```bash\n# Check daemon status\ngitvan daemon status\n\n# Build audit pack\ngitvan audit build --out audit.json\n\n# Verify receipts\ngitvan audit verify <receipt-id>\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **AI Not Available:**\n   ```bash\n   gitvan llm models  # Check AI status\n   ollama serve       # Start Ollama if needed\n   ```\n\n2. **Job Not Found:**\n   ```bash\n   gitvan cron list   # List available jobs\n   ```\n\n3. **Permission Errors:**\n   - Ensure Git repository is properly initialized\n   - Check file permissions in jobs/ directory\n\n### Debug Mode\n\n```bash\nexport GITVAN_LOG_LEVEL=\"debug\"\ngitvan <command>\n```\n\n## Support\n\n- **Documentation:** See `docs/` directory\n- **Examples:** See `playground/` directory  \n- **Tests:** Run `pnpm test` for comprehensive testing\n\n## Migration from v1\n\nGitVan v2 is backward compatible with v1 job definitions. Existing jobs will continue to work without modification.\n\n---\n\n**GitVan v2** - AI-powered Git workflow automation with composables and Nunjucks templates.\n\n"
        }
    ]
}