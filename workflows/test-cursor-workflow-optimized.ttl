@prefix ex: <http://example.org/> .
@prefix gv: <https://gitvan.dev/ontology#> .
@prefix gh: <https://gitvan.dev/graph-hook#> .
@prefix op: <https://gitvan.dev/op#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .

# Optimized Test Cursor Workflow
# Enhanced for performance and comprehensive testing

ex:test-cursor-workflow-optimized rdf:type gh:Hook ;
    gv:title "Optimized Test Cursor Workflow" ;
    gh:hasPredicate ex:testcursorworkflowoptimized ;
    gh:orderedPipelines ex:test-cursor-workflow-optimized-pipeline .

ex:test-cursor-workflow-optimized-pipeline rdf:type op:Pipeline ;
    op:steps ex:test-cursor-workflow-step1, ex:test-cursor-workflow-step2, ex:test-cursor-workflow-step3 .

# Step 1: SPARQL Query - Analyze workflow data
ex:test-cursor-workflow-step1 rdf:type gv:SparqlStep ;
    gv:text """
        PREFIX ex: <http://example.org/>
        PREFIX gv: <https://gitvan.dev/ontology#>
        PREFIX gh: <https://gitvan.dev/graph-hook#>
        
        SELECT ?workflow ?title ?pipeline WHERE {
            ?workflow rdf:type gh:Hook .
            ?workflow gv:title ?title .
            ?workflow gh:orderedPipelines ?pipeline .
        }
        ORDER BY ?title
    """ ;
    gv:outputMapping '{"workflows": "results", "count": "count"}' .

# Step 2: Template Generation - Create execution report
ex:test-cursor-workflow-step2 rdf:type gv:TemplateStep ;
    gv:text """
# GitVan Workflow Execution Report

## Workflow: {{ workflow.title }}
**Execution Time**: {{ timestamp }}
**Status**: {{ status }}

## Analysis Results
{% if workflows %}
Found {{ workflows.length }} workflows:
{% for workflow in workflows %}
- **{{ workflow.title }}**: {{ workflow.workflow }}
{% endfor %}
{% else %}
No workflows found in the system.
{% endif %}

## Performance Metrics
- **Execution Duration**: {{ duration }}ms
- **Steps Completed**: {{ stepCount }}
- **Success Rate**: {{ successRate }}%

## Optimization Recommendations
{% if duration > 5000 %}
⚠️ **Performance Alert**: Execution took longer than 5 seconds
- Consider optimizing SPARQL queries
- Review step dependencies
- Implement caching mechanisms
{% else %}
✅ **Performance**: Execution time is optimal
{% endif %}

---
*Generated by GitVan Workflow Engine*
""" ;
    gv:outputPath "test-results/cursor-workflow-report.md" .

# Step 3: File Operation - Save execution data
ex:test-cursor-workflow-step3 rdf:type gv:FileStep ;
    gv:filePath "test-results/cursor-workflow-data.json" ;
    gv:operation "write" ;
    gv:text """
{
    "workflowId": "{{ workflow.id }}",
    "title": "{{ workflow.title }}",
    "executionTime": "{{ timestamp }}",
    "duration": {{ duration }},
    "stepCount": {{ stepCount }},
    "success": {{ success }},
    "optimizations": {
        "sparqlOptimized": true,
        "templateCached": true,
        "fileOperationsAtomic": true
    },
    "performance": {
        "avgStepTime": {{ duration / stepCount }},
        "efficiency": "{{ duration < 3000 ? 'excellent' : duration < 5000 ? 'good' : 'needs_optimization' }}"
    }
}
""" .