{
    "sourceFile": "tests/config-simple.test.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758046934640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758046934640,
            "name": "Commit-0",
            "content": "// tests/config-simple.test.mjs\n// GitVan v2 â€” Simple Configuration System Tests\n// Tests the core functionality without complex edge cases\n\nimport { describe, it, expect, beforeEach, afterEach } from \"vitest\";\nimport { promises as fs } from \"node:fs\";\nimport { join } from \"pathe\";\nimport { GitVanDefaults } from \"../src/config/defaults.mjs\";\nimport { normalizeRuntimeConfig } from \"../src/config/runtime-config.mjs\";\nimport { loadOptions } from \"../src/config/loader.mjs\";\n\ndescribe(\"GitVan Configuration System - Core\", () => {\n  let tempDir;\n\n  beforeEach(async () => {\n    // Create temporary directory for config testing\n    tempDir = join(process.cwd(), \"test-config-simple-temp\");\n    await fs.mkdir(tempDir, { recursive: true });\n  });\n\n  afterEach(async () => {\n    // Clean up temporary directory\n    try {\n      await fs.rm(tempDir, { recursive: true, force: true });\n    } catch {\n      // Ignore cleanup errors\n    }\n  });\n\n  describe(\"defaults\", () => {\n    it(\"should have correct default structure\", () => {\n      expect(GitVanDefaults).toBeDefined();\n      expect(GitVanDefaults.debug).toBe(false);\n      expect(GitVanDefaults.logLevel).toBe(3);\n      expect(GitVanDefaults.templates.dirs).toEqual([\"templates\"]);\n      expect(GitVanDefaults.templates.autoescape).toBe(false);\n      expect(GitVanDefaults.templates.noCache).toBe(true);\n      expect(GitVanDefaults.receipts.ref).toBe(\"refs/notes/gitvan/results\");\n    });\n\n    it(\"should have template string placeholders\", () => {\n      expect(GitVanDefaults.output.dir).toBe(\"{{ rootDir }}/.out\");\n      expect(GitVanDefaults.output.distDir).toBe(\"{{ rootDir }}/dist\");\n    });\n  });\n\n  describe(\"runtime config normalization\", () => {\n    it(\"should normalize basic runtime config\", () => {\n      const config = {\n        receipts: { ref: \"refs/notes/gitvan/custom\" },\n        runtimeConfig: {\n          app: { name: \"test\" },\n          gitvan: { notesRef: \"refs/notes/gitvan/custom\" },\n        },\n      };\n\n      const normalized = normalizeRuntimeConfig(config);\n\n      expect(normalized.app.name).toBe(\"test\");\n      expect(normalized.gitvan.notesRef).toBe(\"refs/notes/gitvan/custom\");\n    });\n\n    it(\"should handle missing runtime config\", () => {\n      const config = {\n        receipts: { ref: \"refs/notes/gitvan/custom\" },\n      };\n\n      const normalized = normalizeRuntimeConfig(config);\n\n      expect(normalized.app).toBeDefined();\n      expect(normalized.gitvan.notesRef).toBe(\"refs/notes/gitvan/custom\");\n    });\n  });\n\n  describe(\"config loader\", () => {\n    it(\"should load default config when no user config exists\", async () => {\n      const config = await loadOptions({ rootDir: tempDir });\n\n      expect(config.debug).toBe(false);\n      expect(config.templates.dirs).toContain(\"templates\");\n      expect(config.templates.autoescape).toBe(false);\n      expect(config.templates.noCache).toBe(true);\n    });\n\n    it(\"should resolve template strings\", async () => {\n      const config = await loadOptions({ rootDir: tempDir });\n\n      expect(config.output.dir).toBe(`${tempDir}/.out`);\n      expect(config.output.distDir).toBe(`${tempDir}/dist`);\n    });\n\n    it(\"should load user config file\", async () => {\n      // Create a test config file\n      const configFile = join(tempDir, \"gitvan.config.js\");\n      await fs.writeFile(\n        configFile,\n        `export default defineGitVanConfig({\n          debug: true,\n          templates: { dirs: [\"custom-templates\"], autoescape: true },\n          receipts: { ref: \"refs/notes/gitvan/custom\" },\n          runtimeConfig: {\n            app: { name: \"test-app\" },\n            gitvan: { notesRef: \"refs/notes/gitvan/custom\" }\n          }\n        });`,\n      );\n\n      const config = await loadOptions({ rootDir: tempDir });\n\n      expect(config.debug).toBe(true);\n      expect(config.templates.dirs).toContain(\"custom-templates\");\n      expect(config.templates.autoescape).toBe(true);\n      expect(config.receipts.ref).toBe(\"refs/notes/gitvan/custom\");\n      expect(config.runtimeConfig.app.name).toBe(\"test-app\");\n    });\n\n    it(\"should merge overrides with loaded config\", async () => {\n      const overrides = {\n        debug: true,\n        templates: { dirs: [\"override-templates\"] },\n      };\n\n      const config = await loadOptions(overrides, { rootDir: tempDir });\n\n      expect(config.debug).toBe(true);\n      expect(config.templates.dirs).toContain(\"override-templates\");\n      expect(config.templates.autoescape).toBe(false); // from defaults\n    });\n  });\n\n  describe(\"integration with template system\", () => {\n    it(\"should provide correct template configuration\", async () => {\n      const config = await loadOptions(\n        {\n          templates: {\n            dirs: [\"test-templates\"],\n            autoescape: true,\n            noCache: false,\n          },\n        },\n        { rootDir: tempDir },\n      );\n\n      expect(config.templates.dirs).toContain(\"test-templates\");\n      expect(config.templates.autoescape).toBe(true);\n      expect(config.templates.noCache).toBe(false);\n    });\n\n    it(\"should handle time injection\", async () => {\n      const config = await loadOptions(\n        {\n          now: () => \"2024-01-01T12:00:00Z\",\n        },\n        { rootDir: tempDir },\n      );\n\n      expect(typeof config.now).toBe(\"function\");\n      expect(config.now()).toBe(\"2024-01-01T12:00:00Z\");\n    });\n  });\n\n  describe(\"policy configuration\", () => {\n    it(\"should have correct default policy\", async () => {\n      const config = await loadOptions({ rootDir: tempDir });\n\n      expect(config.policy.requireSignedCommits).toBe(false);\n      expect(config.policy.allowUnsignedReceipts).toBe(true);\n    });\n\n    it(\"should allow policy overrides\", async () => {\n      const config = await loadOptions(\n        {\n          policy: { requireSignedCommits: true, allowUnsignedReceipts: false },\n        },\n        { rootDir: tempDir },\n      );\n\n      expect(config.policy.requireSignedCommits).toBe(true);\n      expect(config.policy.allowUnsignedReceipts).toBe(false);\n    });\n  });\n\n  describe(\"jobs configuration\", () => {\n    it(\"should have correct default jobs directory\", async () => {\n      const config = await loadOptions({ rootDir: tempDir });\n\n      expect(config.jobs.dir).toBe(\"jobs\");\n    });\n\n    it(\"should allow jobs directory override\", async () => {\n      const config = await loadOptions(\n        {\n          jobs: { dir: \"custom-jobs\" },\n        },\n        { rootDir: tempDir },\n      );\n\n      expect(config.jobs.dir).toBe(\"custom-jobs\");\n    });\n  });\n});\n"
        }
    ]
}