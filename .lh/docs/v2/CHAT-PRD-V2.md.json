{
    "sourceFile": "docs/v2/CHAT-PRD-V2.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758055795985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758055795985,
            "name": "Commit-0",
            "content": "# GitVan v2 — Chat Copilot PRD\n\n## 1) Summary\n\nConversational copilot to **draft, generate, preview, explain, and refine** GitVan jobs/events/templates. Offline-first (Ollama), **Zod-validated specs**, **sandboxed writes**, **deterministic receipts** in Git notes.\n\n## 2) Goals / Non-Goals\n\n**Goals**\n\n* NL → **JobSpec/EventSpec/TemplateSpec** (valid JSON).\n* **Preview diffs** before any write; opt-in apply.\n* **Repo-aware** suggestions (branches, tags, job IDs, templates).\n* **Determinism**: model + params + seeds + hashes in receipts.\n* Works **local-only** by default; cloud optional.\n* **Explain/Refactor** existing jobs & events.\n\n**Non-Goals (v2)**\n\n* GUI, multi-user chat, auto-PRs, cloud storage, RAG index.\n\n## 3) Personas & JTBD\n\n* **Indie Dev**: “Describe job; scaffold in minutes.”\n* **DevEx**: “Standardized specs & scaffolds; low support.”\n* **Release/Docs**: “Changelog/release notes templates from prompts.”\n* **Compliance**: “Receipts tie prompt → files → run.”\n* **SRE**: “No drift; safe defaults.”\n\n## 4) Success Metrics\n\n* **TTCJ** (prompt→valid spec) ≤ **2 min** p95.\n* First-pass **Zod validation** ≥ **95%**.\n* **0** unsafe writes outside sandbox.\n* **100%** chat actions produce **receipts**.\n* **p50 draft** roundtrip (local) < **2s**.\n\n## 5) User Stories\n\n1. As a dev, I **draft** a cron job via prompt, get a **valid spec** and **preview** diffs; I **apply** to write `jobs/**` + `templates/**`.\n2. As a release lead, I **generate** a changelog job + Nunjucks template and **run once**; a **receipt** links prompt, spec, files, result.\n3. As DevEx, I **explain** an existing event job in plain English and **refactor** triggers via chat, with a preview plan.\n\n## 6) Functional Requirements\n\n* **Chat modes**: `draft`, `generate`, `preview`, `apply`, `design` (guided), `explain`, `refactor`.\n* **Validation**: all model outputs must **conform to Zod** JobSpec/EventSpec/TemplateSpec (no partials).\n* **Sandbox**: writes limited to configured `jobs/` and `templates/` dirs; deny traversal; confirm-before-write default.\n* **Receipts**: store under `refs/notes/gitvan/results`:\n\n  * prompt hash, prompt text (redacted), spec hash, file hashes, model id, params, seed, timestamps, outcome.\n* **Repo context**: enumerate existing jobs, templates, branches, tags, last tag, HEAD diff summary.\n* **Determinism**: default temperature/seed; include in receipt.\n* **Fallback (no LLM)**: guided wizard to produce the same Zod spec.\n* **Policies**: consult `hooks` (e.g., SoD/allowlist) before apply.\n\n## 7) UX & CLI (mock help)\n\n```\ngitvan chat [command]\n\nCommands:\n  draft        Draft a Job/Event/Template spec from a prompt (no writes)\n  generate     Produce spec + proposed file scaffold (no writes)\n  preview      Show diff/plan for the last generated spec\n  apply        Write files for the last generated spec (with confirm)\n  design       Interactive guided flow (no LLM required)\n  explain      Explain an existing job/event in plain English\n  refactor     Revise an existing job/event via prompt\n\nOptions:\n  -m, --model <id>          LLM model (default: ollama:llama3.2)\n  --seed <n>                Deterministic seed (default: 42)\n  --temp <n>                Sampling temperature (default: 0.2)\n  --no-confirm              Apply without confirmation\n  --json                    Machine-readable output (spec/plan)\n  --dir <path>              Root (defaults to repo root)\n  -h, --help\n```\n\n**Flows**\n\n* **draft**: prompt → Zod-valid JSON spec (no files).\n* **generate**: spec + proposed file map (paths, contents, vars).\n* **preview**: render diffs (create/overwrite), policy checks.\n* **apply**: write files; stage optional; emit receipt.\n* **explain/refactor**: load existing job → summary; new spec → preview → apply.\n\n## 8) Data Contracts (names only; no code)\n\n* **JobSpec**: `{ id, mode(on-demand|cron|event), kind(atomic|batch|daemon), cron?, on?, meta{desc,tags}, run() signature, files? }`\n* **EventSpec**: `{ on: { any/all: [...], predicates (mergeTo, pushTo, tagCreate, semverTag, message, authorEmail, pathChanged/Added/Modified, signed) } }`\n* **TemplateSpec**: `{ engine:\"nunjucks\", path, vars[], filters[], sampleData? }`\n* **ChatReceipt**: `{ kind:\"chat-receipt\", promptHash, prompt, specHash, files:{path,hash}, model, params, seed, ts, status }`\n\n## 9) Integrations\n\n* **LLM**: default **Ollama** (local); pluggable provider via config.\n* **Composables**: generated code uses `useGit`, `useTemplate`.\n* **Jobs scanner**: new files discovered by `scanJobs`.\n* **Runner/Daemon**: unchanged; receipts appended on apply/run.\n* **Hooks**: `chat:beforeApply`, `chat:afterApply`, `policy:allowWrite`.\n\n## 10) Security & Privacy\n\n* Path normalization + sandbox.\n* Redact secrets (env tokens, emails) from receipts unless opt-in.\n* Optional “no prompt body” mode (hash only).\n* Model/params/seeds always logged.\n\n## 11) Performance Targets\n\n* Load repo context < **100ms** (cached).\n* LLM roundtrip p50 < **2s** on local 7B.\n* Preview render < **100ms** for ≤ 20 files.\n\n## 12) Telemetry (local)\n\n* Counts: drafts, previews, applies, explains; validation pass/fail.\n* Aggregate only; no network.\n\n## 13) Rollout Plan\n\n* **v2.0 (MVP)**: draft/generate/preview/apply, explain, wizard fallback, receipts, sandbox, policies.\n* **v2.1**: refactor with code-aware edits, template linter, blueprints.\n* **v2.2**: multi-file update mode, suggestion loops.\n\n## 14) Acceptance Criteria\n\n* Draft returns Zod-valid spec for 9/10 seed prompts.\n* Apply never writes outside sandbox; confirmation default.\n* Receipts present for every chat action; hashes verifiable.\n* Explain outputs accurate summary for ≥ 90% standard jobs.\n* All actions usable with LLM disabled (wizard path).\n\n## 15) Open Questions\n\n* Default redaction level in receipts?\n* Auto-stage vs. leave untracked by default?\n* Per-repo model presets & prompt templates in config?\n\n---\n"
        }
    ]
}