{
    "sourceFile": "src/ai/prompts/templates.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1758057329104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758057335360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,179 @@\n+/**\n+ * GitVan v2 AI Prompt Templates - Nunjucks templates for AI generation\n+ * Templates for generating jobs, events, and other GitVan artifacts\n+ */\n+\n+// Job writer template\n+export const JOB_WRITER_TEMPLATE = `\n+Emit ONLY valid ESM for a GitVan job module:\n+\n+import { defineJob } from \"gitvan/define\"\n+\n+export default defineJob({\n+  meta: { \n+    desc: \"{{ desc | default('Generated job') }}\", \n+    tags: {{ tags | default(\"[]\") | safe }}\n+  },\n+  {% if cron %}cron: \"{{ cron }}\",{% endif %}\n+  {% if on %}on: {{ on | safe }},{% endif %}\n+  async run({ ctx, payload }) {\n+    const { useGit } = await import(\"gitvan/composables/git\")\n+    const { useTemplate } = await import(\"gitvan/composables/template\")\n+    const git = useGit()\n+    const tpl = await useTemplate()\n+    \n+    {{ body | default(\"// TODO: implement\") }}\n+    \n+    return { ok: true, artifacts: [] }\n+  }\n+})\n+`;\n+\n+// Event writer template\n+export const EVENT_WRITER_TEMPLATE = `\n+Emit ONLY valid ESM for a GitVan event job module:\n+\n+import { defineJob } from \"gitvan/define\"\n+\n+export default defineJob({\n+  meta: { \n+    desc: \"{{ desc | default('Generated event job') }}\", \n+    tags: {{ tags | default(\"[]\") | safe }}\n+  },\n+  on: {{ on | safe }},\n+  async run({ ctx, payload, meta }) {\n+    const { useGit } = await import(\"gitvan/composables/git\")\n+    const { useTemplate } = await import(\"gitvan/composables/template\")\n+    const git = useGit()\n+    const tpl = await useTemplate()\n+    \n+    {{ body | default(\"// TODO: implement event handler\") }}\n+    \n+    return { ok: true, artifacts: [] }\n+  }\n+})\n+`;\n+\n+// Template generator template\n+export const TEMPLATE_GENERATOR_TEMPLATE = `\n+Generate a Nunjucks template for GitVan:\n+\n+{# {{ name | default('Generated Template') }} #}\n+{# Generated: {{ now | default('now') }} #}\n+\n+{{ content | default('<!-- TODO: implement template -->') }}\n+`;\n+\n+// Changelog template\n+export const CHANGELOG_TEMPLATE = `\n+# Changelog\n+\n+## {{ version | default('Unreleased') }} - {{ date | default('now') | date('YYYY-MM-DD') }}\n+\n+{% if commits %}\n+### Changes\n+{% for commit in commits %}\n+- {{ commit.message | truncate(80) }} ({{ commit.author }})\n+{% endfor %}\n+{% endif %}\n+\n+{% if features %}\n+### Features\n+{% for feature in features %}\n+- {{ feature }}\n+{% endfor %}\n+{% endif %}\n+\n+{% if fixes %}\n+### Fixes\n+{% for fix in fixes %}\n+- {{ fix }}\n+{% endfor %}\n+{% endif %}\n+`;\n+\n+// Release notes template\n+export const RELEASE_NOTES_TEMPLATE = `\n+# Release Notes - {{ version }}\n+\n+**Release Date:** {{ date | default('now') | date('YYYY-MM-DD') }}\n+\n+## Summary\n+{{ summary | default('This release includes various improvements and bug fixes.') }}\n+\n+## What's New\n+{% if features %}\n+{% for feature in features %}\n+- **{{ feature.title }}**: {{ feature.description }}\n+{% endfor %}\n+{% endif %}\n+\n+## Bug Fixes\n+{% if fixes %}\n+{% for fix in fixes %}\n+- {{ fix }}\n+{% endfor %}\n+{% endif %}\n+\n+## Breaking Changes\n+{% if breaking %}\n+{% for change in breaking %}\n+- {{ change }}\n+{% endfor %}\n+{% endif %}\n+\n+## Contributors\n+{% if contributors %}\n+{% for contributor in contributors %}\n+- {{ contributor }}\n+{% endfor %}\n+{% endif %}\n+`;\n+\n+// Dev diary template\n+export const DEV_DIARY_TEMPLATE = `\n+# Dev Diary - {{ date | default('now') | date('YYYY-MM-DD') }}\n+\n+## Today's Focus\n+{{ focus | default('Working on various tasks') }}\n+\n+## Completed\n+{% if completed %}\n+{% for item in completed %}\n+- {{ item }}\n+{% endfor %}\n+{% endif %}\n+\n+## In Progress\n+{% if inProgress %}\n+{% for item in inProgress %}\n+- {{ item }}\n+{% endfor %}\n+{% endif %}\n+\n+## Blockers\n+{% if blockers %}\n+{% for blocker in blockers %}\n+- {{ blocker }}\n+{% endfor %}\n+{% endif %}\n+\n+## Notes\n+{{ notes | default('No additional notes') }}\n+`;\n+\n+// Refinement template\n+export const REFINER_TEMPLATE = `\n+Refine the following {{ type | default('job') }} specification:\n+\n+**Original:**\n+{{ original | safe }}\n+\n+**Requirements:**\n+{{ requirements | default('Improve the specification') }}\n+\n+**Context:**\n+{{ context | default('No additional context') }}\n+\n+Provide an improved version that addresses the requirements while maintaining compatibility with GitVan v2.\n+`;\n"
                }
            ],
            "date": 1758057329104,
            "name": "Commit-0",
            "content": "/**\n * GitVan v2 AI Prompt Templates - Nunjucks templates for AI generation\n * Templates for generating jobs, events, and other GitVan artifacts\n */\n\n// Job writer template\nexport const JOB_WRITER_TEMPLATE = `\nEmit ONLY valid ESM for a GitVan job module:\n\nimport { defineJob } from \"gitvan/define\"\n\nexport default defineJob({\n  meta: { \n    desc: \"{{ desc | default('Generated job') }}\", \n    tags: {{ tags | default(\"[]\") | safe }}\n  },\n  {% if cron %}cron: \"{{ cron }}\",{% endif %}\n  {% if on %}on: {{ on | safe }},{% endif %}\n  async run({ ctx, payload }) {\n    const { useGit } = await import(\"gitvan/composables/git\")\n    const { useTemplate } = await import(\"gitvan/composables/template\")\n    const git = useGit()\n    const tpl = await useTemplate()\n    \n    {{ body | default(\"// TODO: implement\") }}\n    \n    return { ok: true, artifacts: [] }\n  }\n})\n`;\n\n// Event writer template\nexport const EVENT_WRITER_TEMPLATE = `\nEmit ONLY valid ESM for a GitVan event job module:\n\nimport { defineJob } from \"gitvan/define\"\n\nexport default defineJob({\n  meta: { \n    desc: \"{{ desc | default('Generated event job') }}\", \n    tags: {{ tags | default(\"[]\") | safe }}\n  },\n  on: {{ on | safe }},\n  async run({ ctx, payload, meta }) {\n    const { useGit } = await import(\"gitvan/composables/git\")\n    const { useTemplate } = await import(\"gitvan/composables/template\")\n    const git = useGit()\n    const tpl = await useTemplate()\n    \n    {{ body | default(\"// TODO: implement event handler\") }}\n    \n    return { ok: true, artifacts: [] }\n  }\n})\n`;\n\n// Template generator template\nexport const TEMPLATE_GENERATOR_TEMPLATE = `\nGenerate a Nunjucks template for GitVan:\n\n{# {{ name | default('Generated Template') }} #}\n{# Generated: {{ now | default('now') }} #}\n\n{{ content | default('<!-- TODO: implement template -->') }}\n`;\n\n// Changelog template\nexport const CHANGELOG_TEMPLATE = `\n# Changelog\n\n## {{ version | default('Unreleased') }} - {{ date | default('now') | date('YYYY-MM-DD') }}\n\n{% if commits %}\n### Changes\n{% for commit in commits %}\n- {{ commit.message | truncate(80) }} ({{ commit.author }})\n{% endfor %}\n{% endif %}\n\n{% if features %}\n### Features\n{% for feature in features %}\n- {{ feature }}\n{% endfor %}\n{% endif %}\n\n{% if fixes %}\n### Fixes\n{% for fix in fixes %}\n- {{ fix }}\n{% endfor %}\n{% endif %}\n`;\n\n// Release notes template\nexport const RELEASE_NOTES_TEMPLATE = `\n# Release Notes - {{ version }}\n\n**Release Date:** {{ date | default('now') | date('YYYY-MM-DD') }}\n\n## Summary\n{{ summary | default('This release includes various improvements and bug fixes.') }}\n\n## What's New\n{% if features %}\n{% for feature in features %}\n- **{{ feature.title }}**: {{ feature.description }}\n{% endfor %}\n{% endif %}\n\n## Bug Fixes\n{% if fixes %}\n{% for fix in fixes %}\n- {{ fix }}\n{% endfor %}\n{% endif %}\n\n## Breaking Changes\n{% if breaking %}\n{% for change in breaking %}\n- {{ change }}\n{% endfor %}\n{% endif %}\n\n## Contributors\n{% if contributors %}\n{% for contributor in contributors %}\n- {{ contributor }}\n{% endfor %}\n{% endif %}\n`;\n\n// Dev diary template\nexport const DEV_DIARY_TEMPLATE = `\n# Dev Diary - {{ date | default('now') | date('YYYY-MM-DD') }}\n\n## Today's Focus\n{{ focus | default('Working on various tasks') }}\n\n## Completed\n{% if completed %}\n{% for item in completed %}\n- {{ item }}\n{% endfor %}\n{% endif %}\n\n## In Progress\n{% if inProgress %}\n{% for item in inProgress %}\n- {{ item }}\n{% endfor %}\n{% endif %}\n\n## Blockers\n{% if blockers %}\n{% for blocker in blockers %}\n- {{ blocker }}\n{% endfor %}\n{% endif %}\n\n## Notes\n{{ notes | default('No additional notes') }}\n`;\n\n// Refinement template\nexport const REFINER_TEMPLATE = `\nRefine the following {{ type | default('job') }} specification:\n\n**Original:**\n{{ original | safe }}\n\n**Requirements:**\n{{ requirements | default('Improve the specification') }}\n\n**Context:**\n{{ context | default('No additional context') }}\n\nProvide an improved version that addresses the requirements while maintaining compatibility with GitVan v2.\n`;\n"
        }
    ]
}