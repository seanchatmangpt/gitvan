{
    "sourceFile": "docs/v2/AI-VOC-V2.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758055373013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758055373013,
            "name": "Commit-0",
            "content": "# Synthesized VOC — AI in GitVan v2\n\n## Personas\n\n* **Indie Dev / Maintainer** – local-first, hates setup, wants “one command” helpers.\n* **Team DevEx** – standardize common tasks (changelog, release notes) with audit.\n* **Compliance/Audit** – needs receipts: who/what/when/model/params/output-hash.\n* **SRE/Sec** – deterministic, offline-capable, no secret leaks, predictable cost.\n\n## Top Problems\n\n1. Drafting routine docs (changelog, release notes, PR summaries) is tedious.\n2. LLM usage feels opaque—no record of prompts/params/outputs.\n3. CI adds latency & cost; local/offline use desired.\n4. Copy/paste prompts is brittle; templating & reuse needed.\n5. Security: prompts may include secrets; must redact by default.\n6. Reproducibility: want seeds, params, and model fingerprints recorded.\n7. Control: cap runtime/size, avoid surprise bills, zero extra infra.\n\n## Jobs-To-Be-Done (JTBD)\n\n* “When I tag a release, generate release notes I can trust and audit.”\n* “When I push multiple commits, produce a daily dev diary in `dist/`.”\n* “When a PR opens, summarize diffs for reviewers.”\n* “When build fails, draft a human-readable explainer from logs.”\n* “When I run a job, store a verifiable receipt in Git notes.”\n\n## Must-Haves (Ranked)\n\n1. **Local-first**: works with local Ollama by default; zero config.\n2. **Receipts**: model id, params (incl. seed), prompt/output hashes, status, duration.\n3. **Determinism controls**: seed, temp; record everything for audit/replay.\n4. **Redaction**: prompt/output redaction on by default with patterns.\n5. **Templates**: Nunjucks-based prompts with repo context (diff, log, files).\n6. **Limits**: timeout + max output bytes; graceful truncation with receipt status.\n7. **Worktree safety**: isolated runs/notes; no cross-branch bleed.\n8. **CLI ergonomics**: `gitvan llm call|embed|verify`; useful defaults.\n9. **Embeddings**: practical for doc search; record dims & hashes.\n10. **No external DB**: all evidence in Git notes/artifacts.\n\n## Nice-to-Haves\n\n* Streaming to TTY with final receipt.\n* Tool-call logging (metadata-only).\n* Model probe (`models list`) and simple health check.\n* Cost field (user-supplied) for budgeting.\n\n## Sample “User Quotes”\n\n* “Don’t make me set up cloud creds—just use my local model.”\n* “If legal asks, I need to show exactly what prompt & params produced this.”\n* “Redact secrets automatically—I don’t trust templates to be perfect.”\n* “I want a buttoned-up changelog without opening ChatGPT in a browser.”\n\n## Acceptance Criteria\n\n* Works on a new repo with **no config** if Ollama is running.\n* `gitvan llm call \"…\" --model llama3.2` writes a **receipt note** every time.\n* Defaults set seed & temp; receipts include hashes and duration.\n* Redaction enabled by default; can opt out per job.\n* Timeouts and truncation reflected in `status: TIMEOUT|TRUNCATED`.\n* Nunjucks prompt templates can reference git context (logs, diffs).\n* `gitvan llm verify <receipt-id>` re-hashes content and passes.\n\n## Non-Functional (NFRs)\n\n* p50 call overhead (excluding model) < 100 ms; receipt write < 10 ms.\n* No plaintext secrets in notes; redaction runs before write.\n* Offline-capable; no network required beyond local model.\n* Clear error surfaces; never silent-fail receipts.\n\n## Risks & Mitigations\n\n* **Model nondeterminism** → require/record seed + params; store raw output hash.\n* **Secret leakage** → default redaction + allow/block lists + tests.\n* **User confusion** → CLI help with sensible defaults; cookbook recipes.\n* **Performance spikes** → output cap + timeout + truncation receipts.\n\n## First Recipes (Dark-Matter 80/20)\n\n* **Dev Diary** (daily summary from commits).\n* **Changelog / Release Notes** (on tag).\n* **PR Diff Summary** (on PR open/update).\n* **Build Explainer** (on failure logs).\n* **ADR Drafter** (from commit trailers).\n\n## Success Metrics\n\n* TTFW for first AI job ≤ **5 min**.\n* ≥ **80%** of AI calls have valid receipts and pass `verify`.\n* **0** unredacted secrets in sampled receipts.\n* Replace ≥ **3** manual doc tasks per team.\n\n## Hard Lines / Policy\n\n* No persistent cloud storage of prompts/outputs by default.\n* No sending content to remote providers without explicit opt-in config.\n* Receipts are append-only; edits require new note with linkage.\n\n---\n\n**Summary:** Users want **local-first, audited, deterministic** AI helpers for boring developer docs—wired into Git, with templates, receipts, and redaction by default.\n"
        }
    ]
}