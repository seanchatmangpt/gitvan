{
    "sourceFile": "playground/dev.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1758049591937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758052882222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n     hooks: createJobHooks({ hooks: cfg.hooks }),\n   });\n \n   const result = await runner.runJob(job, {\n-    payload: options.payload || {},\n+    payload: options.payload || options || {},\n     force: options.force || false,\n   });\n \n   console.log(\"Job execution result:\");\n"
                }
            ],
            "date": 1758049591937,
            "name": "Commit-0",
            "content": "import { scanJobs, getJobById } from \"../src/jobs/scan.mjs\";\nimport { JobRunner } from \"../src/jobs/runner.mjs\";\nimport { JobDaemon } from \"../src/jobs/daemon.mjs\";\nimport { loadOptions } from \"../src/config/loader.mjs\";\nimport { createJobHooks } from \"../src/jobs/hooks.mjs\";\n\nlet daemon = null;\nlet config = null;\n\n/**\n * Load configuration\n */\nexport async function loadConfig(options = {}) {\n  if (!config) {\n    config = await loadOptions(options);\n  }\n  return config;\n}\n\n/**\n * List all discovered jobs\n */\nexport async function list() {\n  const cfg = await loadConfig();\n  const jobs = await scanJobs({ cwd: cfg.rootDir });\n\n  console.log(\"Discovered jobs:\");\n  console.log(\"=\".repeat(50));\n\n  if (jobs.length === 0) {\n    console.log(\"No jobs found\");\n    return;\n  }\n\n  jobs.forEach((job) => {\n    console.log(\n      `${job.id.padEnd(20)} (${job.mode}) - ${job.meta?.desc || \"No description\"}`,\n    );\n    if (job.cron) {\n      console.log(`  â””â”€ Cron: ${job.cron}`);\n    }\n    if (job.on) {\n      console.log(`  â””â”€ Events: ${JSON.stringify(job.on)}`);\n    }\n  });\n\n  console.log(`\\nTotal: ${jobs.length} jobs`);\n}\n\n/**\n * Run a specific job\n */\nexport async function run(id, options = {}) {\n  const cfg = await loadConfig();\n  const job = await getJobById(id, { cwd: cfg.rootDir });\n\n  if (!job) {\n    throw new Error(`Job not found: ${id}`);\n  }\n\n  console.log(`Running job: ${id}`);\n\n  const runner = new JobRunner({\n    receiptsRef: cfg.receipts.ref,\n    hooks: createJobHooks({ hooks: cfg.hooks }),\n  });\n\n  const result = await runner.runJob(job, {\n    payload: options.payload || {},\n    force: options.force || false,\n  });\n\n  console.log(\"Job execution result:\");\n  console.log(`  Status: ${result.ok ? \"SUCCESS\" : \"FAILED\"}`);\n  console.log(`  Duration: ${result.duration}ms`);\n  console.log(`  Fingerprint: ${result.fingerprint}`);\n  console.log(`  Artifacts: ${result.artifacts.length}`);\n\n  if (result.artifacts.length > 0) {\n    console.log(\"  Generated files:\");\n    result.artifacts.forEach((artifact) => {\n      console.log(`    - ${artifact}`);\n    });\n  }\n\n  return result;\n}\n\n/**\n * Start the daemon\n */\nexport async function startDaemon() {\n  if (daemon) {\n    console.log(\"Daemon is already running\");\n    return;\n  }\n\n  const cfg = await loadConfig();\n\n  daemon = new JobDaemon({\n    cronTickInterval: 30000, // Check every 30 seconds for demo\n    eventCheckInterval: 10000, // Check events every 10 seconds\n  });\n\n  await daemon.start();\n  console.log(\"âœ… GitVan daemon started\");\n}\n\n/**\n * Stop the daemon\n */\nexport async function stopDaemon() {\n  if (!daemon) {\n    console.log(\"Daemon is not running\");\n    return;\n  }\n\n  await daemon.stop();\n  daemon = null;\n  console.log(\"âœ… GitVan daemon stopped\");\n}\n\n/**\n * Get daemon status\n */\nexport async function status() {\n  if (!daemon) {\n    console.log(\"Daemon is not running\");\n    return;\n  }\n\n  const status = daemon.getStatus();\n  const stats = await daemon.getStats();\n\n  console.log(\"GitVan Daemon Status:\");\n  console.log(\"=\".repeat(30));\n  console.log(`Running: ${status.isRunning}`);\n  console.log(`Root: ${status.config?.rootDir}`);\n  console.log(`Receipts: ${status.config?.receiptsRef}`);\n  console.log(`Last commit: ${status.lastCommit || \"N/A\"}`);\n  console.log(`Cron jobs: ${stats.cronJobs}`);\n  console.log(`Event jobs: ${stats.eventJobs}`);\n  console.log(`Total jobs: ${stats.totalJobs}`);\n}\n\n/**\n * Show job statistics\n */\nexport async function stats() {\n  const cfg = await loadConfig();\n  const jobs = await scanJobs({ cwd: cfg.rootDir });\n\n  const stats = {\n    total: jobs.length,\n    byMode: {},\n    byKind: {},\n    withCron: 0,\n    withEvents: 0,\n  };\n\n  jobs.forEach((job) => {\n    stats.byMode[job.mode] = (stats.byMode[job.mode] || 0) + 1;\n    stats.byKind[job.kind] = (stats.byKind[job.kind] || 0) + 1;\n    if (job.cron) stats.withCron++;\n    if (job.on) stats.withEvents++;\n  });\n\n  console.log(\"Job Statistics:\");\n  console.log(\"=\".repeat(20));\n  console.log(`Total jobs: ${stats.total}`);\n  console.log(`By mode:`, stats.byMode);\n  console.log(`By kind:`, stats.byKind);\n  console.log(`With cron: ${stats.withCron}`);\n  console.log(`With events: ${stats.withEvents}`);\n}\n\n/**\n * Show recent receipts\n */\nexport async function receipts() {\n  const cfg = await loadConfig();\n  const git = (await import(\"../src/composables/git.mjs\")).useGit();\n\n  try {\n    const receipts = await git.noteShow(cfg.receipts.ref, \"HEAD\");\n    console.log(\"Recent receipts:\");\n    console.log(\"=\".repeat(20));\n    console.log(receipts);\n  } catch (error) {\n    console.log(\"No receipts found\");\n  }\n}\n\n// Development mode: start daemon + print hints\nif (import.meta.url === `file://${process.argv[1]}`) {\n  console.log(\"ðŸš€ Starting GitVan Playground...\");\n\n  const cfg = await loadConfig({ watch: true });\n  await startDaemon();\n\n  console.log(\"\\nðŸ“‹ Available commands:\");\n  console.log(\"  npm run list         # List all jobs\");\n  console.log(\"  npm run run:changelog # Run changelog job\");\n  console.log(\"  npm run run:simple   # Run simple status job\");\n  console.log(\"  npm run run:cleanup  # Run cleanup job\");\n  console.log(\"  npm run status       # Show daemon status\");\n  console.log(\"  npm run daemon       # Start daemon only\");\n\n  console.log(\"\\nðŸ”§ Try these commands in another terminal:\");\n  console.log(\"  cd playground && npm run list\");\n  console.log(\"  cd playground && npm run run:changelog\");\n  console.log(\"  cat dist/CHANGELOG.md\");\n  console.log(\"  git notes --ref=refs/notes/gitvan/results show HEAD\");\n\n  // Keep process open; vite-node will live-reload on file changes\n  const cleanup = async () => {\n    console.log(\"\\nðŸ›‘ Shutting down...\");\n    await stopDaemon();\n    process.exit(0);\n  };\n\n  process.on(\"SIGINT\", cleanup);\n  process.on(\"SIGTERM\", cleanup);\n}\n"
        }
    ]
}