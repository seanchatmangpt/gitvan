{
    "sourceFile": "docs/v2/RELEASE-PLAN-V2.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1758055073039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758056088187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,254 +1,144 @@\n-Here’s a **revised, execution-ready plan** that matches your repo’s current state and pushes v2 across the line—without prescribing edits to specific files and without code.\n+# GitVan v2 — Release Plan (Revised)\n \n-# GitVan v2 — Release Plan (repo-aware)\n+## 0) Versioning & Branching\n \n-## 0) Where we stand (from tree)\n+* **SemVer**: `v2.y.z` (y: features, z: fixes).\n+* **Branches**: `main` (active dev), `release/v2` (stabilization), `v2-lts` (post-GA fixes).\n+* **Tags**: signed, annotated `v2.0.0-α.N`, `-β.N`, `-rc.N`, `v2.0.0`.\n+* **Artifacts**: npm `gitvan` (ESM), changelog, SBOM (optional), checksums.\n \n-* ✅ Core surfaces present: CLI, composables (`ctx`, `git`, `template`, `exec`), jobs runtime (scan/runner/events/cron/daemon/hooks), config (defaults/loader/runtime), receipts/locks utils, playground, templates, tests (unit/integration/E2E/perf), docs (C4, cookbook, unjs notes).\n-* ✅ Example jobs (dev diary, changelog, tests), events (cron, message\\:release), playground E2E assets.\n-* ⚠️ Needs converge/verify: event predicate breadth, worktree isolation semantics, lock contention tests, deterministic env guarantees, receipts schema stability, ticket queue pattern (long/CPU), audit bundle, CLI UX polish, help consistency.\n+## 1) Trains & Dates (relative)\n \n----\n+* **M1 Alpha (Core Hardening)** — +2 weeks\n+* **M2 Beta (Chat MVP)** — +4 weeks\n+* **M3 RC (Cookbook v1 + Perf)** — +3 weeks\n+* **M4 GA (Docs + Verify)** — +2 weeks\n+  Cadence: weekly cuts; hotfixes as needed.\n \n-## 1) Exit Criteria (v2)\n+## 2) Scope per Milestone & Exit Criteria\n \n-**Functional**\n+### M1 — Alpha: Core Hardening\n \n-* Jobs: on-demand, cron, event (message/tag/merge/path).\n-* Daemon: worktree-aware; once-only via atomic lock; resumable tick.\n-* Templates: Nunjucks + inflection filters; render to string/file; sandboxed paths.\n-* Receipts: JSON in `refs/notes/gitvan/results`; includes IDs, inputs, outputs hash, duration, status.\n-* Locks: under `refs/gitvan/locks/<worktree-hash>/<job-id>/<commit-sha>`.\n-* Config: single `gitvan.config.js` with sane defaults; serializable runtime view.\n-* Dark-matter 80/20 jobs: **dev-diary**, **changelog**, **release-alert**, **test-report** (from repo tree) runnable via CLI and daemon.\n+**Scope**\n \n-**Quality**\n+* Jobs runner, cron, events, locks, receipts (notes), Nunjucks + inflection, composables (`useGit`, `useTemplate`, `useExec`), config loader, daemon.\n+* Playground + core E2E.\n+  **Exit**\n+* TTFJ ≤ 10 min (playground).\n+* p95 simple job ≤ 300 ms (local).\n+* 100% receipt coverage in tests.\n+* Path sandbox tests pass.\n+* Lock contention < 1% in worktree tests.\n \n-* Determinism: `TZ=UTC`, `LANG/LC_ALL=C` enforced; `GITVAN_NOW` honored.\n-* Performance: p95 ≤ 300ms for simple jobs; p99 ≤ 800ms; 10k/day stability in a single repo (bench suite green).\n-* Idempotence: re-run yields same artifacts and receipts (when inputs unchanged).\n-* Worktrees: concurrent daemons on separate worktrees do not contend; duplicate rate < 10 ppm.\n-* Docs: Quickstart, Cookbook, Playground, Architecture, Troubleshooting complete and consistent.\n-* CLI: help text consistent, examples correct, non-zero exits on failure.\n+### M2 — Beta: Chat Copilot MVP\n \n----\n+**Scope**\n \n-## 2) Scope for v2 (locked)\n+* Chat CLI (draft/generate/preview/apply/explain/refactor).\n+* Zod schemas for Job/Event/Template; wizard fallback.\n+* Deterministic receipts for chat ops (model, seed, params, hashes).\n+  **Exit**\n+* Chat → valid Zod spec ≥ 95% on first pass (seed prompts).\n+* “Apply” guarded by diff+confirm; policy hooks (`chat:beforeApply`, `policy:allowWrite`) green.\n+* Cookbook seed: 15 recipes runnable via chat.\n \n-**In**\n+### M3 — RC: Cookbook v1 + Performance\n \n-* Git-native jobs/events/cron, receipts/locks, nunjucks templating, worktree support, CLI, playground, perf tests, dark-matter cookbook seed.\n+**Scope**\n \n-**Out (post-v2)**\n+* 30+ dark-matter recipes; plan/dry-run UX; daemon status/locks UX; perf passes; acceptance test matrix (Win/Mac/Linux).\n+  **Exit**\n+* p95 simple job ≤ 300 ms; p99 ≤ 800 ms.\n+* Cross-platform green; CLI UX freeze; docs feature-complete.\n+* No P0/P1 issues open on `release/v2`.\n \n-* Ticket queue worker (long/CPU) generalized\n-* Policy modules (require-signed/allowlist) beyond a simple flag\n-* Audit bundle packager\n-* LLM provider adapters\n-* Marketplace site\n+### M4 — GA: Verify & Docs\n \n----\n+**Scope**\n \n-## 3) Validation Threads (what to prove)\n+* Final docs: Quickstart, API, Cookbook, Playground, Audit guide.\n+* Migration notes (v1→v2 if applicable).\n+  **Exit**\n+* Go/No-Go checklist 100% green.\n+* Signed `v2.0.0` tag; npm publish; website/readme updated.\n \n-1. **Event matrix**\n+## 3) Quality Gates (all trains)\n \n-   * `message:release` triggers once per matching commit.\n-   * `cron` files fire on schedule; no drift over ≥1h.\n-   * `tagCreate`, `mergeTo(main)`, `pathChanged(glob)` (smoke).\n+* **Automated**: unit, integration, E2E (playground), perf smoke, path-safety, determinism (TZ/LANG/seed).\n+* **Manual**: install TTFJ, cookbook spot checks, chat flows.\n+* **Security**: dependency audit, sandbox write guards, signed tags.\n \n-2. **Locking & worktrees**\n+## 4) Distribution & Rollout\n \n-   * Two daemons (two worktrees) observing same upstream commit: only one executes a job keyed by `(job, sha)`.\n-   * Forced race harness shows losers return “already locked”.\n+* **npm**: `gitvan`.\n+* **Docs**: `/docs` + playground.\n+* **Release notes**: generated by job `docs:changelog`.\n+* **Pilot rollout**: 3 repos (dev-tools, docs, release-eng).\n+* **Backport policy**: GA fixes to `v2-lts` only (no features).\n \n-3. **Determinism/idempotence**\n+## 5) Observability (local, opt-in)\n \n-   * Freeze time via `GITVAN_NOW`; byte-identical artifacts and receipts across runs.\n+* CLI `--metrics` flag: TTFJ, p95, lock retries, chat valid-spec rate (no telemetry by default).\n+* Receipts: all runs (including chat) produce git-notes with hashes.\n \n-4. **Performance**\n+## 6) Risk & Mitigation\n \n-   * Bench suite: cold/warm runs, template throughput, git ops latency; p95/p99 targets.\n+* **Spec drift (chat)** → strict Zod, wizard fallback, curated prompts.\n+* **Platform variances** → matrix tests; shell portability guards.\n+* **Lock collisions** → per-worktree scope, jittered retries.\n+* **Non-determinism** → capture seeds/params; mark non-replayable steps.\n \n-5. **Security & safety**\n+## 7) Comms\n \n-   * Template render path stays within repo root; reject path traversal.\n-   * CLI returns non-zero on job failure; receipts mark `ERROR`.\n+* Weekly status (bullet list) in `docs/status`.\n+* Alpha/Beta/RC/GA release notes + upgrade notes.\n \n----\n+## 8) GA Go/No-Go Checklist\n \n-## 4) CLI — Mock Help (stable contract)\n+* ✅ CTQs met (TTFJ, p95, receipts 100%, sandbox 0 escapes, chat ≥95%).\n+* ✅ Cross-platform matrix green.\n+* ✅ Docs complete; examples runnable.\n+* ✅ Signed tag + npm publish dry-run OK.\n+* ✅ Rollback plan ready (yank, revert).\n \n-### `gitvan --help`\n+---\n \n-```\n-Usage: gitvan <command> [options]\n+## Mock CLI Help (Release Ops)\n \n-Commands:\n-  job           List, show, plan, run jobs\n-  daemon        Start/stop/status daemon\n-  receipts      Show or export run receipts\n-  locks         List or clear job locks\n-  verify        Repo/runtime checks\n-  diagnose      Print env and config snapshot\n-\n-Options:\n-  -C, --repo <path>    Target repo (default: cwd)\n-  -q, --quiet          Minimal output\n-  -v, --verbose        Verbose output\n-  -h, --help           Show help\n-  -V, --version        Show version\n ```\n+gitvan release plan\n+  Show current milestone, open gates, and target dates.\n \n-### `gitvan job --help`\n+gitvan release cut --tag v2.0.0-beta.2\n+  Create signed pre-release tag and generate notes.\n \n-```\n-Usage: gitvan job <subcommand>\n+gitvan release verify\n+  Run GA gates: perf, sandbox, receipts, cross-platform matrix.\n \n-Subcommands:\n-  list                         Show discovered jobs (jobs/*)\n-  show <id>                    Print job metadata\n-  plan <id> [--payload JSON]   Dry-run; show steps and targets\n-  run <id> [--payload JSON]\n-       [--dry] [--timeout ms]\n-       [--env KEY=VAL ...]     Execute job once\n+gitvan release notes --since v2.0.0-beta.1\n+  Render changelog via jobs/docs/changelog.\n \n-Examples:\n-  gitvan job list\n-  gitvan job show docs:changelog\n-  gitvan job plan dev:diary --payload '{\"since\":\"1d\"}'\n-  gitvan job run docs:changelog\n-```\n+gitvan release publish\n+  Publish npm package, push tags, update docs indexes.\n \n-### `gitvan daemon --help`\n-\n+gitvan release rollback --tag v2.0.0\n+  Yank npm, revert tag, restore previous stable.\n ```\n-Usage: gitvan daemon <start|status|stop> [options]\n \n-start options:\n-  --interval <ms>        Tick interval (default: 1500)\n-  --worktrees <mode>     current | all (default: current)\n-  --since <ref/time>     initial scan horizon (default: last run)\n-  --foreground           Run in foreground\n-\n-Examples:\n-  gitvan daemon start --worktrees current\n-  gitvan daemon status\n-  gitvan daemon stop\n-```\n-\n-### `gitvan receipts --help`\n-\n-```\n-Usage: gitvan receipts <list|show|export> [options]\n-\n-  list [--limit N] [--since ts]   List recent receipts\n-  show <id|sha>                   Show one receipt (pretty)\n-  export [--out file]             Write NDJSON of receipts\n-\n-Examples:\n-  gitvan receipts list --limit 20\n-  gitvan receipts show HEAD\n-  gitvan receipts export --out receipts.ndjson\n-```\n-\n-### `gitvan locks --help`\n-\n-```\n-Usage: gitvan locks <list|unlock> [options]\n-\n-  list [--job <id>]               List lock refs\n-  unlock <lockRef|job[:sha]>      Remove a lock (admin)\n-\n-Examples:\n-  gitvan locks list\n-  gitvan locks unlock refs/gitvan/locks/abcd/docs:changelog/abcdef\n-```\n-\n-### `gitvan verify --help`\n-\n-```\n-Performs environment and repo checks:\n-- git version, notes/refs permissions\n-- worktree detection\n-- config normalization\n-- template dirs present\n-\n-Exit code non-zero on failure.\n-```\n-\n-### `gitvan diagnose --help`\n-\n-```\n-Prints:\n-- resolved repo root, worktree path\n-- effective config (redacted secrets)\n-- scan summary (jobs/events/cron counts)\n-- last daemon tick info (if any)\n-```\n-\n ---\n \n-## 5) Test Readiness Checklist (map to existing tests)\n+## Responsibilities\n \n-* ✅ Unit: composables (`useGit`, `useTemplate`, context), nunjucks filters.\n-* ✅ Integration: job run, receipts write, locks, config load.\n-* ✅ E2E: playground runs changelog & diary, daemon tick, receipts visible.\n-* ✅ Perf: simple and large repo benchmarks.\n-* ⬜ Event matrix E2E (tag/merge/path) — add scenarios to existing E2E harness.\n-* ⬜ Worktrees concurrency E2E — two worktrees, two daemons, race proof.\n-* ⬜ Negative paths — template traversal, failed job receipts, non-zero CLI exit.\n+* **Release Lead:** Sean\n+* **QE Lead:** QA owner\n+* **Docs Lead:** Docs owner\n+* **Chat Lead:** AI owner\n+* **Cookbook Lead:** DevEx owner\n \n ---\n \n-## 6) Doc Gaps to close (high value)\n+## Success Criteria (Post-GA, 30 days)\n \n-* **README (root)**: tighten Quickstart to repo reality; show daemon+receipts flow with actual commands.\n-* **Playground README**: add “what to observe” after each script (receipt ref, expected file path).\n-* **Cookbook**: short index with 80/20 tasks and how to install/run each.\n-* **Troubleshooting**: lock stuck, “already locked”, git notes permission, Windows shell tips.\n-\n----\n-\n-## 7) Metrics to publish in repo\n-\n-* p95/p99 from perf tests (table in `performance-analysis-report.md`).\n-* Determinism check: artifact hash equality across 3 runs.\n-* Lock contention rate from race harness.\n-* Time-to-first-job (TTFJ) from Quickstart stopwatch.\n-\n----\n-\n-## 8) Cut Plan\n-\n-**v2-alpha (stabilize core)**\n-\n-* Event matrix ✅, determinism ✅, receipts schema ✅, CLI help finalized, docs pass.\n-\n-**v2-beta (scale & worktrees)**\n-\n-* Worktrees race E2E, perf budget met, cookbook seed validated in playground, Windows/mac parity smoke.\n-\n-**v2-rc (polish)**\n-\n-* Error taxonomy copy, diagnose/verify UX polish, final docs sweep, changelog & signed tag.\n-\n----\n-\n-## 9) Risks & Mitigations\n-\n-* **Platform quirks (Windows shells)** → document `bash -lc` vs native; use portable git flags in examples.\n-* **Notes permissions on remotes** → doc push/pull for notes; fallback local receipts export.\n-* **Cron drift** → monotonic scheduler note; recommend `--interval >= 1000ms`.\n-* **Template path traversal** → explicit rejection documented and tested.\n-\n----\n-\n-## 10) Dark-Matter 80/20 (must-work in v2)\n-\n-* Dev diary (daily), Changelog (since last tag), Release alert (tag/semver), Test report (aggregate to `dist/test-report.md`).\n-  All four: runnable via `job run` and auto via daemon; receipts present and human-readable.\n-\n----\n-\n-If you want, I can produce **final CLI help stubs** as text files and a **release checklist** you can drop into `docs/` next.\n+* ≥ 3 pilot teams replacing ≥ 3 chores with GitVan jobs.\n+* Cookbook recipes used ≥ 50 times across pilots.\n+* < 10 ppm duplicate executions; 0 security incidents.\n"
                }
            ],
            "date": 1758055073039,
            "name": "Commit-0",
            "content": "Here’s a **revised, execution-ready plan** that matches your repo’s current state and pushes v2 across the line—without prescribing edits to specific files and without code.\n\n# GitVan v2 — Release Plan (repo-aware)\n\n## 0) Where we stand (from tree)\n\n* ✅ Core surfaces present: CLI, composables (`ctx`, `git`, `template`, `exec`), jobs runtime (scan/runner/events/cron/daemon/hooks), config (defaults/loader/runtime), receipts/locks utils, playground, templates, tests (unit/integration/E2E/perf), docs (C4, cookbook, unjs notes).\n* ✅ Example jobs (dev diary, changelog, tests), events (cron, message\\:release), playground E2E assets.\n* ⚠️ Needs converge/verify: event predicate breadth, worktree isolation semantics, lock contention tests, deterministic env guarantees, receipts schema stability, ticket queue pattern (long/CPU), audit bundle, CLI UX polish, help consistency.\n\n---\n\n## 1) Exit Criteria (v2)\n\n**Functional**\n\n* Jobs: on-demand, cron, event (message/tag/merge/path).\n* Daemon: worktree-aware; once-only via atomic lock; resumable tick.\n* Templates: Nunjucks + inflection filters; render to string/file; sandboxed paths.\n* Receipts: JSON in `refs/notes/gitvan/results`; includes IDs, inputs, outputs hash, duration, status.\n* Locks: under `refs/gitvan/locks/<worktree-hash>/<job-id>/<commit-sha>`.\n* Config: single `gitvan.config.js` with sane defaults; serializable runtime view.\n* Dark-matter 80/20 jobs: **dev-diary**, **changelog**, **release-alert**, **test-report** (from repo tree) runnable via CLI and daemon.\n\n**Quality**\n\n* Determinism: `TZ=UTC`, `LANG/LC_ALL=C` enforced; `GITVAN_NOW` honored.\n* Performance: p95 ≤ 300ms for simple jobs; p99 ≤ 800ms; 10k/day stability in a single repo (bench suite green).\n* Idempotence: re-run yields same artifacts and receipts (when inputs unchanged).\n* Worktrees: concurrent daemons on separate worktrees do not contend; duplicate rate < 10 ppm.\n* Docs: Quickstart, Cookbook, Playground, Architecture, Troubleshooting complete and consistent.\n* CLI: help text consistent, examples correct, non-zero exits on failure.\n\n---\n\n## 2) Scope for v2 (locked)\n\n**In**\n\n* Git-native jobs/events/cron, receipts/locks, nunjucks templating, worktree support, CLI, playground, perf tests, dark-matter cookbook seed.\n\n**Out (post-v2)**\n\n* Ticket queue worker (long/CPU) generalized\n* Policy modules (require-signed/allowlist) beyond a simple flag\n* Audit bundle packager\n* LLM provider adapters\n* Marketplace site\n\n---\n\n## 3) Validation Threads (what to prove)\n\n1. **Event matrix**\n\n   * `message:release` triggers once per matching commit.\n   * `cron` files fire on schedule; no drift over ≥1h.\n   * `tagCreate`, `mergeTo(main)`, `pathChanged(glob)` (smoke).\n\n2. **Locking & worktrees**\n\n   * Two daemons (two worktrees) observing same upstream commit: only one executes a job keyed by `(job, sha)`.\n   * Forced race harness shows losers return “already locked”.\n\n3. **Determinism/idempotence**\n\n   * Freeze time via `GITVAN_NOW`; byte-identical artifacts and receipts across runs.\n\n4. **Performance**\n\n   * Bench suite: cold/warm runs, template throughput, git ops latency; p95/p99 targets.\n\n5. **Security & safety**\n\n   * Template render path stays within repo root; reject path traversal.\n   * CLI returns non-zero on job failure; receipts mark `ERROR`.\n\n---\n\n## 4) CLI — Mock Help (stable contract)\n\n### `gitvan --help`\n\n```\nUsage: gitvan <command> [options]\n\nCommands:\n  job           List, show, plan, run jobs\n  daemon        Start/stop/status daemon\n  receipts      Show or export run receipts\n  locks         List or clear job locks\n  verify        Repo/runtime checks\n  diagnose      Print env and config snapshot\n\nOptions:\n  -C, --repo <path>    Target repo (default: cwd)\n  -q, --quiet          Minimal output\n  -v, --verbose        Verbose output\n  -h, --help           Show help\n  -V, --version        Show version\n```\n\n### `gitvan job --help`\n\n```\nUsage: gitvan job <subcommand>\n\nSubcommands:\n  list                         Show discovered jobs (jobs/*)\n  show <id>                    Print job metadata\n  plan <id> [--payload JSON]   Dry-run; show steps and targets\n  run <id> [--payload JSON]\n       [--dry] [--timeout ms]\n       [--env KEY=VAL ...]     Execute job once\n\nExamples:\n  gitvan job list\n  gitvan job show docs:changelog\n  gitvan job plan dev:diary --payload '{\"since\":\"1d\"}'\n  gitvan job run docs:changelog\n```\n\n### `gitvan daemon --help`\n\n```\nUsage: gitvan daemon <start|status|stop> [options]\n\nstart options:\n  --interval <ms>        Tick interval (default: 1500)\n  --worktrees <mode>     current | all (default: current)\n  --since <ref/time>     initial scan horizon (default: last run)\n  --foreground           Run in foreground\n\nExamples:\n  gitvan daemon start --worktrees current\n  gitvan daemon status\n  gitvan daemon stop\n```\n\n### `gitvan receipts --help`\n\n```\nUsage: gitvan receipts <list|show|export> [options]\n\n  list [--limit N] [--since ts]   List recent receipts\n  show <id|sha>                   Show one receipt (pretty)\n  export [--out file]             Write NDJSON of receipts\n\nExamples:\n  gitvan receipts list --limit 20\n  gitvan receipts show HEAD\n  gitvan receipts export --out receipts.ndjson\n```\n\n### `gitvan locks --help`\n\n```\nUsage: gitvan locks <list|unlock> [options]\n\n  list [--job <id>]               List lock refs\n  unlock <lockRef|job[:sha]>      Remove a lock (admin)\n\nExamples:\n  gitvan locks list\n  gitvan locks unlock refs/gitvan/locks/abcd/docs:changelog/abcdef\n```\n\n### `gitvan verify --help`\n\n```\nPerforms environment and repo checks:\n- git version, notes/refs permissions\n- worktree detection\n- config normalization\n- template dirs present\n\nExit code non-zero on failure.\n```\n\n### `gitvan diagnose --help`\n\n```\nPrints:\n- resolved repo root, worktree path\n- effective config (redacted secrets)\n- scan summary (jobs/events/cron counts)\n- last daemon tick info (if any)\n```\n\n---\n\n## 5) Test Readiness Checklist (map to existing tests)\n\n* ✅ Unit: composables (`useGit`, `useTemplate`, context), nunjucks filters.\n* ✅ Integration: job run, receipts write, locks, config load.\n* ✅ E2E: playground runs changelog & diary, daemon tick, receipts visible.\n* ✅ Perf: simple and large repo benchmarks.\n* ⬜ Event matrix E2E (tag/merge/path) — add scenarios to existing E2E harness.\n* ⬜ Worktrees concurrency E2E — two worktrees, two daemons, race proof.\n* ⬜ Negative paths — template traversal, failed job receipts, non-zero CLI exit.\n\n---\n\n## 6) Doc Gaps to close (high value)\n\n* **README (root)**: tighten Quickstart to repo reality; show daemon+receipts flow with actual commands.\n* **Playground README**: add “what to observe” after each script (receipt ref, expected file path).\n* **Cookbook**: short index with 80/20 tasks and how to install/run each.\n* **Troubleshooting**: lock stuck, “already locked”, git notes permission, Windows shell tips.\n\n---\n\n## 7) Metrics to publish in repo\n\n* p95/p99 from perf tests (table in `performance-analysis-report.md`).\n* Determinism check: artifact hash equality across 3 runs.\n* Lock contention rate from race harness.\n* Time-to-first-job (TTFJ) from Quickstart stopwatch.\n\n---\n\n## 8) Cut Plan\n\n**v2-alpha (stabilize core)**\n\n* Event matrix ✅, determinism ✅, receipts schema ✅, CLI help finalized, docs pass.\n\n**v2-beta (scale & worktrees)**\n\n* Worktrees race E2E, perf budget met, cookbook seed validated in playground, Windows/mac parity smoke.\n\n**v2-rc (polish)**\n\n* Error taxonomy copy, diagnose/verify UX polish, final docs sweep, changelog & signed tag.\n\n---\n\n## 9) Risks & Mitigations\n\n* **Platform quirks (Windows shells)** → document `bash -lc` vs native; use portable git flags in examples.\n* **Notes permissions on remotes** → doc push/pull for notes; fallback local receipts export.\n* **Cron drift** → monotonic scheduler note; recommend `--interval >= 1000ms`.\n* **Template path traversal** → explicit rejection documented and tested.\n\n---\n\n## 10) Dark-Matter 80/20 (must-work in v2)\n\n* Dev diary (daily), Changelog (since last tag), Release alert (tag/semver), Test report (aggregate to `dist/test-report.md`).\n  All four: runnable via `job run` and auto via daemon; receipts present and human-readable.\n\n---\n\nIf you want, I can produce **final CLI help stubs** as text files and a **release checklist** you can drop into `docs/` next.\n"
        }
    ]
}