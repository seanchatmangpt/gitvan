{
    "sourceFile": "docs/cookbook/foundation/basic-job-setup.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1758051806647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758097968788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,10 +38,10 @@\n   async run({ ctx }) {\n     const git = useGit();\n     \n     // Get repository information\n-    const head = await git.head();\n-    const branch = await git.getCurrentBranch();\n+    const head = await git.currentHead();\n+    const branch = await git.currentBranch();\n     const isClean = await git.isClean();\n     \n     // Create a simple greeting message\n     const greeting = {\n"
                }
            ],
            "date": 1758051806647,
            "name": "Commit-0",
            "content": "# Basic Job Setup\n\n## üéØ **Recipe Overview**\n\n**Category**: Foundation  \n**Difficulty**: Beginner  \n**Time**: 15 minutes  \n**Prerequisites**: GitVan installed, basic Node.js knowledge\n\n## üìã **Problem**\n\nYou want to create your first GitVan job but don't know where to start. You need a simple, working example that demonstrates the basic concepts.\n\n## üç≥ **Solution**\n\n### **Step 1: Create Job Directory Structure**\n\n```bash\n# Create the jobs directory\nmkdir -p jobs/hello-world\n\n# Create your first job file\ntouch jobs/hello-world/greeting.mjs\n```\n\n### **Step 2: Write Your First Job**\n\n```javascript\n// jobs/hello-world/greeting.mjs\nimport { defineJob } from \"gitvan/define\";\nimport { useGit } from \"gitvan/useGit\";\n\nexport default defineJob({\n  meta: {\n    desc: \"A simple greeting job that demonstrates basic GitVan concepts\",\n    tags: [\"hello\", \"example\", \"beginner\"]\n  },\n  async run({ ctx }) {\n    const git = useGit();\n    \n    // Get repository information\n    const head = await git.head();\n    const branch = await git.getCurrentBranch();\n    const isClean = await git.isClean();\n    \n    // Create a simple greeting message\n    const greeting = {\n      message: \"Hello from GitVan!\",\n      timestamp: ctx.nowISO,\n      repository: {\n        head: head.substring(0, 8),\n        branch,\n        isClean\n      },\n      environment: {\n        nodeVersion: process.version,\n        platform: process.platform\n      }\n    };\n    \n    // Log the greeting\n    ctx.logger.log(\"üéâ Greeting generated successfully!\");\n    ctx.logger.log(`Repository: ${branch} (${head.substring(0, 8)})`);\n    ctx.logger.log(`Clean: ${isClean ? \"Yes\" : \"No\"}`);\n    \n    return {\n      ok: true,\n      artifacts: [],\n      data: greeting\n    };\n  }\n});\n```\n\n### **Step 3: Create Configuration File**\n\n```javascript\n// gitvan.config.js\nexport default {\n  root: process.cwd(),\n  jobs: { dir: \"jobs\" },\n  templates: { \n    engine: \"nunjucks\", \n    dirs: [\"templates\"] \n  },\n  receipts: { ref: \"refs/notes/gitvan/results\" },\n  hooks: {\n    \"job:before\"({ id }) {\n      console.log(`üöÄ Starting job: ${id}`);\n    },\n    \"job:after\"({ id, result }) {\n      console.log(`‚úÖ Job completed: ${id} (${result.ok ? \"SUCCESS\" : \"FAILED\"})`);\n    }\n  }\n};\n```\n\n### **Step 4: Test Your Job**\n\n```bash\n# List all jobs\nnode -e \"import('./dev.mjs').then(m=>m.list())\"\n\n# Run your greeting job\nnode -e \"import('./dev.mjs').then(m=>m.run('hello-world:greeting'))\"\n```\n\n## üîç **Explanation**\n\n### **Job Structure**\n\n1. **Import Dependencies**: Import required GitVan modules\n2. **Define Job**: Use `defineJob()` to create a job definition\n3. **Metadata**: Provide job description and tags\n4. **Run Function**: Implement the job logic\n5. **Return Result**: Return success status, artifacts, and data\n\n### **Key Concepts**\n\n- **`ctx`**: Execution context with repository info, timestamps, and logger\n- **`useGit()`**: Git operations composable for repository interactions\n- **`meta`**: Job metadata for discovery and organization\n- **`artifacts`**: Files or outputs created by the job\n- **`data`**: Structured data returned by the job\n\n### **Git Operations**\n\n- **`git.head()`**: Get current commit SHA\n- **`git.getCurrentBranch()`**: Get current branch name\n- **`git.isClean()`**: Check if working directory is clean\n\n## üîÑ **Variations**\n\n### **Variation 1: File Output Job**\n\n```javascript\n// jobs/hello-world/file-output.mjs\nimport { defineJob } from \"gitvan/define\";\nimport { useGit } from \"gitvan/useGit\";\nimport { promises as fs } from \"node:fs\";\nimport { join } from \"pathe\";\n\nexport default defineJob({\n  meta: {\n    desc: \"Generate a greeting file with repository information\",\n    tags: [\"hello\", \"file-output\", \"example\"]\n  },\n  async run({ ctx }) {\n    const git = useGit();\n    \n    // Get repository information\n    const head = await git.head();\n    const branch = await git.getCurrentBranch();\n    const commitCount = await git.getCommitCount();\n    \n    // Create greeting content\n    const content = `# Hello from GitVan!\n\nGenerated at: ${ctx.nowISO}\n\n## Repository Information\n- **Branch**: ${branch}\n- **Head**: ${head.substring(0, 8)}\n- **Commits**: ${commitCount}\n- **Clean**: ${await git.isClean() ? \"Yes\" : \"No\"}\n\n## Environment\n- **Node.js**: ${process.version}\n- **Platform**: ${process.platform}\n\n---\n*Generated by GitVan Jobs System*\n`;\n\n    // Write to file\n    const outputPath = join(ctx.root, \"dist\", \"greeting.md\");\n    await fs.mkdir(join(ctx.root, \"dist\"), { recursive: true });\n    await fs.writeFile(outputPath, content);\n    \n    ctx.logger.log(`üìù Greeting file created: ${outputPath}`);\n    \n    return {\n      ok: true,\n      artifacts: [outputPath],\n      data: {\n        outputPath,\n        contentLength: content.length,\n        timestamp: ctx.nowISO\n      }\n    };\n  }\n});\n```\n\n### **Variation 2: Template-Based Job**\n\n```javascript\n// jobs/hello-world/template-greeting.mjs\nimport { defineJob } from \"gitvan/define\";\nimport { useGit } from \"gitvan/useGit\";\nimport { useTemplate } from \"gitvan/useTemplate\";\n\nexport default defineJob({\n  meta: {\n    desc: \"Generate greeting using Nunjucks template\",\n    tags: [\"hello\", \"template\", \"nunjucks\"]\n  },\n  async run({ ctx }) {\n    const git = useGit();\n    const template = await useTemplate();\n    \n    // Get repository information\n    const head = await git.head();\n    const branch = await git.getCurrentBranch();\n    const commitCount = await git.getCommitCount();\n    \n    // Prepare template data\n    const data = {\n      greeting: \"Hello from GitVan!\",\n      timestamp: ctx.nowISO,\n      repository: {\n        head: head.substring(0, 8),\n        branch,\n        commitCount,\n        isClean: await git.isClean()\n      },\n      environment: {\n        nodeVersion: process.version,\n        platform: process.platform\n      }\n    };\n    \n    // Render template to file\n    const outputPath = await template.renderToFile(\n      \"greeting.njk\",\n      \"dist/greeting-template.md\",\n      data\n    );\n    \n    ctx.logger.log(`üìù Template greeting created: ${outputPath}`);\n    \n    return {\n      ok: true,\n      artifacts: [outputPath],\n      data\n    };\n  }\n});\n```\n\n### **Template File**\n\n```njk\n# {{ greeting }}\n\nGenerated at: {{ timestamp }}\n\n## Repository Information\n- **Branch**: {{ repository.branch }}\n- **Head**: {{ repository.head }}\n- **Commits**: {{ repository.commitCount }}\n- **Clean**: {{ repository.isClean | titleize }}\n\n## Environment\n- **Node.js**: {{ environment.nodeVersion }}\n- **Platform**: {{ environment.platform | titleize }}\n\n---\n*Generated by GitVan Jobs System*\n```\n\n## üéØ **Best Practices**\n\n### **Job Design**\n- **Keep jobs focused**: One job, one responsibility\n- **Use descriptive metadata**: Clear descriptions and relevant tags\n- **Handle errors gracefully**: Use try-catch blocks for error handling\n- **Return meaningful results**: Include artifacts and structured data\n\n### **Git Operations**\n- **Check repository state**: Always verify repository status\n- **Handle edge cases**: Account for empty repositories or missing branches\n- **Use appropriate git commands**: Choose the right git operations for your needs\n\n### **File Operations**\n- **Create directories**: Ensure output directories exist\n- **Use absolute paths**: Use `ctx.root` for consistent path handling\n- **Clean up resources**: Remove temporary files when done\n\n### **Error Handling**\n```javascript\nasync run({ ctx }) {\n  try {\n    // Job logic here\n    return { ok: true, artifacts: [], data: result };\n  } catch (error) {\n    ctx.logger.error(`Job failed: ${error.message}`);\n    throw error; // Re-throw to mark job as failed\n  }\n}\n```\n\n## üîó **Related Recipes**\n\n- [Configuration Management](./configuration-management.md) - Managing job configurations\n- [Template System](./template-system.md) - Advanced template usage\n- [Error Handling](./error-handling.md) - Robust error handling patterns\n\n## üìö **Resources**\n\n- [GitVan Documentation](../../README.md)\n- [Job Definition API](../../docs/api-reference.md)\n- [Git Operations Guide](../../docs/git-operations.md)\n\n## ü§ù **Contributors**\n\n- **Author**: GitVan Team\n- **Last Updated**: 2024-09-16\n- **Version**: 1.0.0\n\n---\n\n**Next Recipe**: [Configuration Management](./configuration-management.md)\n"
        }
    ]
}