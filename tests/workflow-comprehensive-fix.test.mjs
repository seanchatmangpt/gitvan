// Comprehensive test for workflow system fixes
import { describe, it, expect } from "vitest";
import { withMemFSTestEnvironment } from "../src/composables/test-environment.mjs";
import { StepRunner } from "../src/workflow/step-runner.mjs";
import { ContextManager } from "../src/workflow/context-manager.mjs";
import { useTemplate } from "../src/composables/template.mjs";
import { readFile } from "node:fs/promises";

describe("Workflow System - Comprehensive Fix Validation", () => {
  it("should handle complex templates with filters", async () => {
    await withMemFSTestEnvironment(
      {
        initialFiles: {
          "README.md": "# Test\n",
        },
      },
      async (env) => {
        const testData = {
          name: "John Doe",
          count: 3,
          items: [
            { name: "Item 1", price: 10.99 },
            { name: "Item 2", price: 25.50 },
            { name: "Item 3", price: 5.00 }
          ],
          url: "http://example.org/data1"
        };

        const templateContent = `# Report

**Name:** {{ name }}
**Count:** {{ count }}

## Items
{% for item in items %}
### {{ item.name }}
- **Price:** ${{ item.price }}
{% endfor %}

## Summary
- **Total Items:** {{ items | length }}
- **Total Price:** ${{ items | sum(attribute='price') | round(2) }}
- **Most Expensive:** ${{ items | max(attribute='price') }}
- **Cheapest:** ${{ items | min(attribute='price') }}

## Data Processing
- **URL Parts:** {{ url | split('/') | join(' → ') }}
- **Last Part:** {{ url | split('/') | last }}
- **URL Length:** {{ url | length }}

## JSON Export
{{ items | tojson }}

---
*Report generated by GitVan*`;

        const stepRunner = new StepRunner();
        const contextManager = new ContextManager();
        await contextManager.initialize({
          workflowId: "test",
          inputs: testData,
          startTime: Date.now()
        });

        const templateStep = {
          id: "template",
          type: "template",
          config: {
            template: templateContent,
            filePath: "./reports/report.md"
          }
        };

        const result = await stepRunner.executeStep(
          templateStep,
          contextManager,
          null,
          null
        );

        expect(result.success).toBe(true);
        const content = result.outputs.content;
        
        // Validate basic content
        expect(content).toContain("# Report");
        expect(content).toContain("Name: John Doe");
        expect(content).toContain("Count: 3");
        
        // Validate loop processing
        expect(content).toContain("Item 1");
        expect(content).toContain("Item 2");
        expect(content).toContain("Item 3");
        
        // Validate array operations
        expect(content).toContain("Total Items: 3");
        expect(content).toContain("Total Price: $41.49");
        expect(content).toContain("Most Expensive: $25.5");
        expect(content).toContain("Cheapest: $5");
        
        // Validate string operations
        expect(content).toContain("URL Parts: http: →  → example.org → data1");
        expect(content).toContain("Last Part: data1");
        expect(content).toContain("URL Length: 25");
        
        // Validate JSON export
        expect(content).toContain('"name":"Item 1","price":10.99');

        const fileContent = await readFile("./reports/report.md", "utf8");
        expect(fileContent).toBe(content);

        console.log("✅ Complex templates with filters work correctly");
      }
    );
  });

  it("should handle file operations with template content", async () => {
    await withMemFSTestEnvironment(
      {
        initialFiles: {
          "README.md": "# Test\n",
        },
      },
      async (env) => {
        const stepRunner = new StepRunner();
        const contextManager = new ContextManager();
        await contextManager.initialize({
          workflowId: "file-test",
          inputs: { 
            content: "Test content", 
            count: 42,
            filename: "test-output"
          },
          startTime: Date.now()
        });

        const fileStep = {
          id: "file",
          type: "file",
          config: {
            filePath: "./output/{{ filename }}-{{ count }}.txt",
            operation: "write",
            content: `Hello {{ content }}!

Count: {{ count }}
Filename: {{ filename }}

This is a test file.`
          }
        };

        const result = await stepRunner.executeStep(
          fileStep,
          contextManager,
          null,
          null
        );

        expect(result.success).toBe(true);
        expect(result.outputs.path).toContain("test-output-42.txt");

        const fileContent = await readFile("./output/test-output-42.txt", "utf8");
        expect(fileContent).toContain("Hello Test content!");
        expect(fileContent).toContain("Count: 42");
        expect(fileContent).toContain("Filename: test-output");

        console.log("✅ File operations with template content work correctly");
      }
    );
  });

  it("should handle end-to-end workflow", async () => {
    await withMemFSTestEnvironment(
      {
        initialFiles: {
          "README.md": "# Test\n",
          "data.json": `{
            "users": [
              {"name": "Alice", "role": "admin", "score": 95},
              {"name": "Bob", "role": "user", "score": 87},
              {"name": "Charlie", "role": "moderator", "score": 92}
            ]
          }`
        },
      },
      async (env) => {
        const stepRunner = new StepRunner();
        const contextManager = new ContextManager();
        await contextManager.initialize({
          workflowId: "e2e-test",
          inputs: { dataFile: "./data.json" },
          startTime: Date.now()
        });

        // Step 1: Read data file
        const readStep = {
          id: "read-data",
          type: "file",
          config: {
            filePath: "./data.json",
            operation: "read"
          }
        };

        const readResult = await stepRunner.executeStep(
          readStep,
          contextManager,
          null,
          null
        );

        expect(readResult.success).toBe(true);
        const data = JSON.parse(readResult.outputs.content);
        expect(data.users).toHaveLength(3);

        // Step 2: Generate report
        const templateStep = {
          id: "generate-report",
          type: "template",
          config: {
            template: `# User Report

## Summary
- **Total Users:** {{ users | length }}
- **Average Score:** {{ (users | sum(attribute='score') / users | length) | round(1) }}
- **Highest Score:** {{ users | max(attribute='score') }}
- **Lowest Score:** {{ users | min(attribute='score') }}

## Users
{% for user in users %}
### {{ user.name }}
- **Role:** {{ user.role }}
- **Score:** {{ user.score }}
{% endfor %}

---
*Report generated by GitVan*`,
            filePath: "./reports/user-report.md"
          }
        };

        contextManager.setOutput("users", data.users);

        const templateResult = await stepRunner.executeStep(
          templateStep,
          contextManager,
          null,
          null
        );

        expect(templateResult.success).toBe(true);
        const reportContent = templateResult.outputs.content;
        expect(reportContent).toContain("# User Report");
        expect(reportContent).toContain("Total Users: 3");
        expect(reportContent).toContain("Average Score: 91.3");
        expect(reportContent).toContain("Highest Score: 95");
        expect(reportContent).toContain("Lowest Score: 87");

        // Step 3: Create summary JSON
        const jsonStep = {
          id: "create-summary",
          type: "file",
          config: {
            filePath: "./output/summary.json",
            operation: "write",
            content: `{
                "workflow": "e2e-test",
                "summary": {
                    "totalUsers": {{ users | length }},
                    "averageScore": {{ (users | sum(attribute='score') / users | length) | round(1) }},
                    "reportGenerated": true
                },
                "users": {{ users | tojson }}
            }`
          }
        };

        const jsonResult = await stepRunner.executeStep(
          jsonStep,
          contextManager,
          null,
          null
        );

        expect(jsonResult.success).toBe(true);

        // Validate files were created
        const reportFile = await readFile("./reports/user-report.md", "utf8");
        const summaryFile = await readFile("./output/summary.json", "utf8");

        expect(reportFile).toBe(reportContent);
        expect(summaryFile).toContain('"totalUsers": 3');
        expect(summaryFile).toContain('"averageScore": 91.3');
        expect(summaryFile).toContain('"reportGenerated": true');

        console.log("✅ End-to-end workflow execution works correctly");
      }
    );
  });
});
