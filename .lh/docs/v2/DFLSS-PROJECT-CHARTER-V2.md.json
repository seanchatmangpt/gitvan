{
    "sourceFile": "docs/v2/DFLSS-PROJECT-CHARTER-V2.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1758055163272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758056025229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,90 +1,172 @@\n-# DfLSS (DMADV) Project Charter — **GitVan v2**\n+# DfLSS (DMADV) Project Charter — GitVan v2\n \n-**Project:** Git-native Jobs, Events & Receipts\n-**Sponsor:** VP Engineering **Owner:** Sean (SA) **Core Team:** DevEx, RelEng, SRE, Security, Compliance\n-**Start:** Now **Target Release:** v2 GA (this quarter)\n+**Project:** GitVan v2 — Git-Native Jobs, Events, Receipts + Chat Copilot\n+**Owner:** Sean (Solution Architect) **Sponsor:** VP Engineering\n+**Stakeholders:** DevEx, Release Eng, Docs, SRE, Security, Compliance\n \n-## 1) Problem / Opportunity\n+---\n \n-Fragmented CI/scripts for routine dev work cause drift, slow audits, and duplicated effort. We can use Git as the runtime to deliver deterministic, auditable automation with zero extra infra.\n+## 1) Problem / Opportunity (Define)\n \n-## 2) Customers & CTQs (Voice → Critical-to-Quality)\n+Teams burn time wiring ad-hoc scripts/CI for routine work. Drift, audit gaps, and tool sprawl persist. We can encode **automation, state, and audit inside Git**—with a composables API, Nunjucks templates, and signed receipts—now extended by a **chat copilot** that drafts/validates jobs via Zod.\n \n-* Devs: time-to-first-job **< 10 min**, simple CLI, templates.\n-* RelEng: changelog/release notes on-tag, **p95 ≤ 300 ms**.\n-* Compliance: **100% signed receipts** in notes; printable audit.\n-* SRE/Sec: once-only execution; worktree isolation; minimal deps.\n+---\n \n-## 3) Business Case\n+## 2) Voice of Customer → CTQs\n \n-Reduce tool sprawl and CI maintenance; reclaim 5–10 hrs/team/week; cut audit prep by >90%; enable deterministic workflows inside repos.\n+**VOC highlights**\n \n-## 4) Goals (SMART)\n+* “Time-to-first-job must be minutes, not hours.”\n+* “No extra infra; run everywhere Git runs.”\n+* “Prove what ran, when, and why.”\n+* “Let me describe the job in English and get valid code.”\n \n-* GA v2 with on-demand/cron/event jobs; nunjucks templates; receipts/locks; daemon (worktree-aware).\n-* Ship 4 dark-matter recipes: dev-diary, changelog, release-alert, test-report.\n-* Publish perf: **p95 ≤ 300 ms**, **p99 ≤ 800 ms**; duplicates **< 10 ppm**.\n-* Docs: Quickstart, Cookbook, Playground, Troubleshooting complete.\n+**Critical-to-Quality (CTQs)**\n \n+* **CTQ-1:** TTFJ ≤ **10 min** from `npm i` to first artifact.\n+* **CTQ-2:** p95 on-demand job runtime ≤ **300 ms** (simple jobs).\n+* **CTQ-3:** **100%** runs produce a verifiable **receipt** (git notes).\n+* **CTQ-4:** **0** unsafe writes outside sandboxed dirs.\n+* **CTQ-5:** Chat **prompt → Zod-valid spec** success ≥ **95%** first pass.\n+* **CTQ-6:** Worktree-safe, once-only execution (lock contention < **1%**).\n+\n+---\n+\n+## 3) Y = f(X) (Primary Metrics)\n+\n+* **Y1 TTFJ (min)** = f(scaffolder UX, defaults, examples).\n+* **Y2 p95 runtime (ms)** = f(exec strategy, spawn cost, caching).\n+* **Y3 Receipt coverage (%)** = f(runner hooks, failure paths).\n+* **Y4 Unsafe writes (count)** = f(sandbox, path guards, dry-run UI).\n+* **Y5 Chat valid-spec rate (%)** = f(prompting, Zod schemas, repo context).\n+* **Y6 Lock contention (%)** = f(ref design, retry/backoff, worktree scope).\n+\n+---\n+\n+## 4) Goals & Non-Goals\n+\n+**Goals**\n+\n+* Git-only runtime (jobs/events/cron), composables (`useGit`, `useTemplate`, `useExec`), Nunjucks w/ inflection filters, receipts, worktree-aware locks.\n+* **Chat copilot** (draft/generate/preview/apply/explain/refactor) with **Zod** schemas and **Ollama** default provider; deterministic receipts.\n+* Cookbook of **dark-matter 80/20** recipes (docs, release, hygiene).\n+\n+**Non-Goals (v2)**\n+\n+* Hosted control plane, multi-tenant UI, enterprise RBAC, cloud artifact store, PR automation.\n+\n+---\n+\n ## 5) Scope\n \n-**In:** CLI, composables (`useGit`, `useTemplate`, `exec`), jobs runtime (scan/runner/events/cron/daemon/hooks), config, receipts/locks, playground, tests, docs.\n-**Out (post-v2):** ticket queue worker, policy modules, audit bundle packager, marketplace UI, multi-provider LLM.\n+**In-scope**\n \n-## 6) Y = f(X) (Primary Metrics & Drivers)\n+* Single package; ESM; pure JS runtime.\n+* Filesystem job discovery; event predicates; cron scheduler.\n+* Git notes receipts; atomic ref locks; worktree awareness.\n+* Chat CLI with sandboxed writes and confirmation.\n+* Docs, playground, test suite, cookbook.\n \n-* **Y1 TTFJ (min)** = f(templates, CLI UX, docs) → target **< 10**\n-* **Y2 p95 runtime (ms)** = f(cache, git ops, IO) → **≤ 300**\n-* **Y3 Receipt coverage (%)** = f(hooks, error paths) → **100%**\n-* **Y4 Duplicates (ppm)** = f(locking, keying) → **< 10**\n-* **Y5 Audit time (min)** = f(receipt schema, tools) → **≤ 5**\n-* **Key Xs:** atomic `update-ref` locks, worktree keys, deterministic env (TZ/LANG, `GITVAN_NOW`), FS routing, nunjucks + inflection, docs.\n+**Out-of-scope**\n \n-## 7) Baseline\n+* DB migrations, external queues, GUI, non-Git SCMs.\n \n-TTFJ 45–90 min with ad-hoc scripts; p95 1–3 s via CI; no receipts; unknown duplicate rate.\n+---\n \n-## 8) DMADV Plan\n+## 6) Baseline (Current State)\n \n-**Define:** Charter, VOC→CTQs, success metrics, risk log.\n-**Measure:** Instrument p95/p99, receipt coverage, duplicate rate; TTFJ stopwatch; bench harness.\n-**Analyze:** Event predicate matrix; lock contention tests; worktree concurrency; determinism checks.\n-**Design:** Finalize job API & CLI help; receipts schema; nunjucks filters; config defaults; cookbook seed; docs.\n-**Verify:** E2E & perf suites green; pilot repos (3) run for 1 week; sign-off on CTQs; cut v2 GA (signed tag).\n+Repo contains: CLI, jobs/cron/events runner, composables, Nunjucks engine (+inflection), config loader, daemon, tests (unit/integration/E2E), playground, C4 docs, specs.\n+Gaps: full event matrix hardening, lock telemetry, chat apply/policy hooks, diff preview polish, acceptance automation.\n \n-## 9) Deliverables\n+---\n \n-* `gitvan` CLI (job/daemon/receipts/locks/verify/diagnose).\n-* Jobs system (on-demand/cron/event), composables, nunjucks templates w/ inflection.\n-* Receipts (`refs/notes/gitvan/results`) + locks (`refs/gitvan/locks/...`).\n-* Cookbook (4 seed recipes), Playground with E2E scripts.\n-* Docs set (Quickstart, Cookbook, Playground, Troubleshooting, C4).\n+## 7) Deliverables\n \n+* **Core**: job system, cron, events, locks, receipts, composables, Nunjucks filters.\n+* **Chat Copilot**: `gitvan chat draft|generate|preview|apply|explain|refactor|design`.\n+* **Schemas**: Zod JobSpec/EventSpec/TemplateSpec; ChatReceipt.\n+* **Cookbook**: ≥ **30** recipes (dev-diary, changelog, release-notes, ADR, build explainer, SBOM stub, backport planner).\n+* **Docs**: Quickstart, API, Cookbook, Playground, Audit guide.\n+* **Quality**: perf baselines, determinism tests, path-safety tests.\n+\n+---\n+\n+## 8) Plan (DMADV)\n+\n+**Define** (now)\n+\n+* Charter, VOC→CTQs locked; success metrics instrumented.\n+\n+**Measure**\n+\n+* Benchmarks: spawn/exec/template p95; lock contention; chat valid-spec rate.\n+* Telemetry (local only): drafts, previews, applies, failures.\n+\n+**Analyze**\n+\n+* Event predicate coverage (tag/merge/push/path/message/signature).\n+* Lock semantics across worktrees; retry/backoff tuning.\n+* Chat failure modes → prompt & schema adjustments.\n+\n+**Design**\n+\n+* Chat flows + sandboxed apply + receipts; policy hooks (`chat:beforeApply`, `policy:allowWrite`).\n+* Diff/plan renderer; deterministic env (TZ/LANG/seed/model capture).\n+* Cookbook v1; test harnesses.\n+\n+**Verify**\n+\n+* Pilot in 3 repos; meet CTQs; finalize docs; tag **v2 GA**.\n+\n+---\n+\n+## 9) Milestones\n+\n+* **M1 Core Hardening**: event matrix, locks, receipts QA.\n+* **M2 Chat MVP**: draft/generate/preview/apply, wizard fallback, receipts.\n+* **M3 Cookbook v1**: ≥ 30 recipes + playground E2E.\n+* **M4 Perf & Verify**: hit CTQs, pilot sign-off, GA docs.\n+\n+---\n+\n ## 10) Risks & Mitigations\n \n-* **Windows/mac shell quirks** → portable commands + docs.\n-* **Notes push/pull blocked** → documented fallback export.\n-* **Cron drift** → interval guidance, monotonic tick.\n-* **Path traversal** → template root guard + tests.\n-* **Lock contention** → composite key `(job, sha, worktree-hash)`; backoff.\n+* **Git edge cases (platform variance)** → CI matrix & fixture repos.\n+* **Spec drift (chat)** → strict Zod, retry/prompting, wizard fallback.\n+* **Non-deterministic steps** → record seeds/params; receipts w/ hashes.\n+* **Lock collisions** → per-worktree scoping + `update-ref --create-reflog`/retry jitter.\n+* **Unsafe writes** → sandboxed paths + confirm-by-default + policy hook.\n \n+---\n+\n ## 11) RACI\n \n-* **A:** Sponsor **R:** Sean (+ DevEx) **C:** SRE, Security, Compliance **I:** Eng org\n+* **Responsible:** Sean (arch/impl), DevEx (CLI/composables), Docs (cookbook), QA (tests).\n+* **Accountable:** Sponsor.\n+* **Consulted:** SRE, Security, Compliance.\n+* **Informed:** Eng org.\n \n+---\n+\n ## 12) Communication\n \n-Weekly 15-min status; Pilot demo end of Measure/Analyze/Verify; metrics & receipts published in repo.\n+* Weekly 15-min status; milestone demos; receipts + metrics published to repo (`docs/status`).\n \n-## 13) Acceptance / Tollgate Criteria\n+---\n \n-* CTQs met (TTFJ, p95, coverage, duplicates).\n-* All four recipes runnable via CLI & daemon; receipts human-readable.\n-* Worktree concurrency E2E passes.\n-* Docs complete; CLI help consistent; signed v2 tag.\n+## 13) Financial Impact (est.)\n \n-## 14) Financial Impact (est.)\n+* Replace 2–3 SaaS tools/team; save **5–10 hrs/week/team**; audit prep ↓ **90%**; faster onboarding to automation.\n \n-Remove 2–3 SaaS tasks/team; save 5–10 hrs/week/team; audit prep down >90%.\n+---\n \n-**Approval:** *Sponsor Name / Date*\n+## 14) Acceptance Criteria (GA)\n+\n+* TTFJ ≤ 10 min; p95 runtime ≤ 300 ms simple jobs.\n+* **100%** receipt coverage; verifiable hashes & model params.\n+* **0** sandbox escapes across test matrix.\n+* Chat **≥95%** Zod-valid on first pass for standard prompts; wizard path covers remaining.\n+* Lock contention < 1% under concurrent daemons/worktrees.\n+* Cookbook installed and runnable in playground + pilots.\n+\n+---\n"
                }
            ],
            "date": 1758055163272,
            "name": "Commit-0",
            "content": "# DfLSS (DMADV) Project Charter — **GitVan v2**\n\n**Project:** Git-native Jobs, Events & Receipts\n**Sponsor:** VP Engineering **Owner:** Sean (SA) **Core Team:** DevEx, RelEng, SRE, Security, Compliance\n**Start:** Now **Target Release:** v2 GA (this quarter)\n\n## 1) Problem / Opportunity\n\nFragmented CI/scripts for routine dev work cause drift, slow audits, and duplicated effort. We can use Git as the runtime to deliver deterministic, auditable automation with zero extra infra.\n\n## 2) Customers & CTQs (Voice → Critical-to-Quality)\n\n* Devs: time-to-first-job **< 10 min**, simple CLI, templates.\n* RelEng: changelog/release notes on-tag, **p95 ≤ 300 ms**.\n* Compliance: **100% signed receipts** in notes; printable audit.\n* SRE/Sec: once-only execution; worktree isolation; minimal deps.\n\n## 3) Business Case\n\nReduce tool sprawl and CI maintenance; reclaim 5–10 hrs/team/week; cut audit prep by >90%; enable deterministic workflows inside repos.\n\n## 4) Goals (SMART)\n\n* GA v2 with on-demand/cron/event jobs; nunjucks templates; receipts/locks; daemon (worktree-aware).\n* Ship 4 dark-matter recipes: dev-diary, changelog, release-alert, test-report.\n* Publish perf: **p95 ≤ 300 ms**, **p99 ≤ 800 ms**; duplicates **< 10 ppm**.\n* Docs: Quickstart, Cookbook, Playground, Troubleshooting complete.\n\n## 5) Scope\n\n**In:** CLI, composables (`useGit`, `useTemplate`, `exec`), jobs runtime (scan/runner/events/cron/daemon/hooks), config, receipts/locks, playground, tests, docs.\n**Out (post-v2):** ticket queue worker, policy modules, audit bundle packager, marketplace UI, multi-provider LLM.\n\n## 6) Y = f(X) (Primary Metrics & Drivers)\n\n* **Y1 TTFJ (min)** = f(templates, CLI UX, docs) → target **< 10**\n* **Y2 p95 runtime (ms)** = f(cache, git ops, IO) → **≤ 300**\n* **Y3 Receipt coverage (%)** = f(hooks, error paths) → **100%**\n* **Y4 Duplicates (ppm)** = f(locking, keying) → **< 10**\n* **Y5 Audit time (min)** = f(receipt schema, tools) → **≤ 5**\n* **Key Xs:** atomic `update-ref` locks, worktree keys, deterministic env (TZ/LANG, `GITVAN_NOW`), FS routing, nunjucks + inflection, docs.\n\n## 7) Baseline\n\nTTFJ 45–90 min with ad-hoc scripts; p95 1–3 s via CI; no receipts; unknown duplicate rate.\n\n## 8) DMADV Plan\n\n**Define:** Charter, VOC→CTQs, success metrics, risk log.\n**Measure:** Instrument p95/p99, receipt coverage, duplicate rate; TTFJ stopwatch; bench harness.\n**Analyze:** Event predicate matrix; lock contention tests; worktree concurrency; determinism checks.\n**Design:** Finalize job API & CLI help; receipts schema; nunjucks filters; config defaults; cookbook seed; docs.\n**Verify:** E2E & perf suites green; pilot repos (3) run for 1 week; sign-off on CTQs; cut v2 GA (signed tag).\n\n## 9) Deliverables\n\n* `gitvan` CLI (job/daemon/receipts/locks/verify/diagnose).\n* Jobs system (on-demand/cron/event), composables, nunjucks templates w/ inflection.\n* Receipts (`refs/notes/gitvan/results`) + locks (`refs/gitvan/locks/...`).\n* Cookbook (4 seed recipes), Playground with E2E scripts.\n* Docs set (Quickstart, Cookbook, Playground, Troubleshooting, C4).\n\n## 10) Risks & Mitigations\n\n* **Windows/mac shell quirks** → portable commands + docs.\n* **Notes push/pull blocked** → documented fallback export.\n* **Cron drift** → interval guidance, monotonic tick.\n* **Path traversal** → template root guard + tests.\n* **Lock contention** → composite key `(job, sha, worktree-hash)`; backoff.\n\n## 11) RACI\n\n* **A:** Sponsor **R:** Sean (+ DevEx) **C:** SRE, Security, Compliance **I:** Eng org\n\n## 12) Communication\n\nWeekly 15-min status; Pilot demo end of Measure/Analyze/Verify; metrics & receipts published in repo.\n\n## 13) Acceptance / Tollgate Criteria\n\n* CTQs met (TTFJ, p95, coverage, duplicates).\n* All four recipes runnable via CLI & daemon; receipts human-readable.\n* Worktree concurrency E2E passes.\n* Docs complete; CLI help consistent; signed v2 tag.\n\n## 14) Financial Impact (est.)\n\nRemove 2–3 SaaS tasks/team; save 5–10 hrs/week/team; audit prep down >90%.\n\n**Approval:** *Sponsor Name / Date*\n"
        }
    ]
}