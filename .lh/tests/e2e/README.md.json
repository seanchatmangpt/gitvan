{
    "sourceFile": "tests/e2e/README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1758072623003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758072841137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,185 @@\n+# GitVan v2 E2E Tests\n+\n+This directory contains comprehensive end-to-end tests for GitVan v2 CLI commands, testing against the playground environment.\n+\n+## Test Structure\n+\n+### Individual CLI Command Tests\n+- **`chat-cli.test.mjs`** - Tests for AI-powered chat commands (draft, generate, preview, apply, explain, design)\n+- **`cron-cli.test.mjs`** - Tests for cron job management commands (list, start, dry-run, status)\n+- **`daemon-cli.test.mjs`** - Tests for daemon control commands (start, stop, status, restart)\n+- **`event-cli.test.mjs`** - Tests for event management commands (list, simulate, test, trigger)\n+- **`audit-cli.test.mjs`** - Tests for receipt auditing commands (build, verify, list, show)\n+- **`llm-cli.test.mjs`** - Tests for direct LLM operations (call, models)\n+\n+### Integration Tests\n+- **`cli-integration.test.mjs`** - Comprehensive integration tests covering complete workflows\n+\n+## Test Environment\n+\n+All tests run against the **playground** environment (`/playground/`), which provides:\n+- Pre-configured GitVan setup\n+- Sample jobs and templates\n+- Realistic project structure\n+- Working configuration\n+\n+## Running Tests\n+\n+### Run All E2E Tests\n+```bash\n+# From project root\n+node tests/e2e/run-e2e-tests.mjs\n+```\n+\n+### Run Individual Test Files\n+```bash\n+# Run specific CLI command tests\n+pnpm test tests/e2e/chat-cli.test.mjs\n+pnpm test tests/e2e/cron-cli.test.mjs\n+pnpm test tests/e2e/daemon-cli.test.mjs\n+\n+# Run integration tests\n+pnpm test tests/e2e/cli-integration.test.mjs\n+```\n+\n+### Run with Vitest\n+```bash\n+# Run all e2e tests\n+pnpm test tests/e2e/\n+\n+# Run with specific reporter\n+pnpm test tests/e2e/ --reporter=verbose\n+```\n+\n+## Test Coverage\n+\n+### Chat Commands\n+- ✅ `chat draft` - AI job specification generation\n+- ✅ `chat generate` - Complete job file generation\n+- ✅ `chat preview` - Preview without file creation\n+- ✅ `chat apply` - Apply generated jobs\n+- ✅ `chat explain` - Job analysis and explanation\n+- ✅ `chat design` - Job design recommendations\n+- ✅ Error handling and edge cases\n+\n+### Cron Commands\n+- ✅ `cron list` - List scheduled jobs\n+- ✅ `cron start` - Start cron scheduler\n+- ✅ `cron dry-run` - Preview cron execution\n+- ✅ `cron status` - Check scheduler status\n+- ✅ Error handling\n+\n+### Daemon Commands\n+- ✅ `daemon start` - Start background daemon\n+- ✅ `daemon stop` - Stop daemon\n+- ✅ `daemon status` - Check daemon status\n+- ✅ `daemon restart` - Restart daemon\n+- ✅ Worktree management\n+\n+### Event Commands\n+- ✅ `event list` - List available events\n+- ✅ `event simulate` - Simulate event triggers\n+- ✅ `event test` - Test event predicates\n+- ✅ `event trigger` - Manual event triggering\n+- ✅ Event validation\n+\n+### Audit Commands\n+- ✅ `audit build` - Build audit packs\n+- ✅ `audit verify` - Verify receipts\n+- ✅ `audit list` - List receipts\n+- ✅ `audit show` - Show receipt details\n+- ✅ Receipt management\n+\n+### LLM Commands\n+- ✅ `llm call` - Direct LLM calls\n+- ✅ `llm models` - List available models\n+- ✅ Custom parameters (temperature, model)\n+- ✅ AI unavailability handling\n+\n+### Integration Workflows\n+- ✅ Complete job lifecycle\n+- ✅ AI-powered job generation workflow\n+- ✅ Daemon and cron integration\n+- ✅ Event simulation and testing\n+- ✅ Audit and receipt management\n+- ✅ LLM operations\n+- ✅ Error handling and edge cases\n+- ✅ Configuration and environment\n+- ✅ Performance and reliability\n+\n+## Test Features\n+\n+### Real Environment Testing\n+- Tests run against actual playground setup\n+- Uses real GitVan configuration\n+- Tests with real job files and templates\n+\n+### Comprehensive Coverage\n+- All CLI commands tested\n+- Error conditions covered\n+- Edge cases handled\n+- Integration workflows verified\n+\n+### Reliable Execution\n+- Proper cleanup after tests\n+- Isolated test environments\n+- Consistent test data\n+- Parallel execution support\n+\n+### AI Integration Testing\n+- Tests AI-powered features\n+- Handles AI unavailability gracefully\n+- Validates AI-generated content\n+- Tests custom AI parameters\n+\n+## Test Data\n+\n+Tests use the playground environment which includes:\n+- **Jobs**: `foundation/`, `cicd/`, `docs/`, `test/` directories\n+- **Templates**: Nunjucks templates for various purposes\n+- **Configuration**: `gitvan.config.js` with hooks and settings\n+- **Events**: Sample event handlers\n+- **Receipts**: Git notes with execution records\n+\n+## Debugging Tests\n+\n+### Verbose Output\n+```bash\n+pnpm test tests/e2e/ --reporter=verbose\n+```\n+\n+### Single Test Debugging\n+```bash\n+pnpm test tests/e2e/chat-cli.test.mjs --reporter=verbose\n+```\n+\n+### Test Environment Inspection\n+```bash\n+# Check playground setup\n+ls -la playground/\n+cat playground/gitvan.config.js\n+```\n+\n+## Contributing\n+\n+When adding new E2E tests:\n+\n+1. **Follow naming convention**: `{command}-cli.test.mjs`\n+2. **Test against playground**: Use playground environment\n+3. **Include error cases**: Test both success and failure scenarios\n+4. **Clean up**: Ensure proper cleanup in `afterEach`\n+5. **Document**: Add test descriptions and comments\n+6. **Update coverage**: Update this README with new test coverage\n+\n+## Test Results\n+\n+E2E tests verify that:\n+- ✅ All CLI commands work correctly\n+- ✅ Commands integrate properly\n+- ✅ Error handling is robust\n+- ✅ AI features function as expected\n+- ✅ Configuration is respected\n+- ✅ Performance is acceptable\n+- ✅ Real-world workflows complete successfully\n+\n+This comprehensive E2E test suite ensures GitVan v2 CLI is production-ready and reliable.\n"
                }
            ],
            "date": 1758072623003,
            "name": "Commit-0",
            "content": "# GitVan v2 E2E Tests\n\nThis directory contains comprehensive end-to-end tests for GitVan v2 CLI commands, testing against the playground environment.\n\n## Test Structure\n\n### Individual CLI Command Tests\n- **`chat-cli.test.mjs`** - Tests for AI-powered chat commands (draft, generate, preview, apply, explain, design)\n- **`cron-cli.test.mjs`** - Tests for cron job management commands (list, start, dry-run, status)\n- **`daemon-cli.test.mjs`** - Tests for daemon control commands (start, stop, status, restart)\n- **`event-cli.test.mjs`** - Tests for event management commands (list, simulate, test, trigger)\n- **`audit-cli.test.mjs`** - Tests for receipt auditing commands (build, verify, list, show)\n- **`llm-cli.test.mjs`** - Tests for direct LLM operations (call, models)\n\n### Integration Tests\n- **`cli-integration.test.mjs`** - Comprehensive integration tests covering complete workflows\n\n## Test Environment\n\nAll tests run against the **playground** environment (`/playground/`), which provides:\n- Pre-configured GitVan setup\n- Sample jobs and templates\n- Realistic project structure\n- Working configuration\n\n## Running Tests\n\n### Run All E2E Tests\n```bash\n# From project root\nnode tests/e2e/run-e2e-tests.mjs\n```\n\n### Run Individual Test Files\n```bash\n# Run specific CLI command tests\npnpm test tests/e2e/chat-cli.test.mjs\npnpm test tests/e2e/cron-cli.test.mjs\npnpm test tests/e2e/daemon-cli.test.mjs\n\n# Run integration tests\npnpm test tests/e2e/cli-integration.test.mjs\n```\n\n### Run with Vitest\n```bash\n# Run all e2e tests\npnpm test tests/e2e/\n\n# Run with specific reporter\npnpm test tests/e2e/ --reporter=verbose\n```\n\n## Test Coverage\n\n### Chat Commands\n- ✅ `chat draft` - AI job specification generation\n- ✅ `chat generate` - Complete job file generation\n- ✅ `chat preview` - Preview without file creation\n- ✅ `chat apply` - Apply generated jobs\n- ✅ `chat explain` - Job analysis and explanation\n- ✅ `chat design` - Job design recommendations\n- ✅ Error handling and edge cases\n\n### Cron Commands\n- ✅ `cron list` - List scheduled jobs\n- ✅ `cron start` - Start cron scheduler\n- ✅ `cron dry-run` - Preview cron execution\n- ✅ `cron status` - Check scheduler status\n- ✅ Error handling\n\n### Daemon Commands\n- ✅ `daemon start` - Start background daemon\n- ✅ `daemon stop` - Stop daemon\n- ✅ `daemon status` - Check daemon status\n- ✅ `daemon restart` - Restart daemon\n- ✅ Worktree management\n\n### Event Commands\n- ✅ `event list` - List available events\n- ✅ `event simulate` - Simulate event triggers\n- ✅ `event test` - Test event predicates\n- ✅ `event trigger` - Manual event triggering\n- ✅ Event validation\n\n### Audit Commands\n- ✅ `audit build` - Build audit packs\n- ✅ `audit verify` - Verify receipts\n- ✅ `audit list` - List receipts\n- ✅ `audit show` - Show receipt details\n- ✅ Receipt management\n\n### LLM Commands\n- ✅ `llm call` - Direct LLM calls\n- ✅ `llm models` - List available models\n- ✅ Custom parameters (temperature, model)\n- ✅ AI unavailability handling\n\n### Integration Workflows\n- ✅ Complete job lifecycle\n- ✅ AI-powered job generation workflow\n- ✅ Daemon and cron integration\n- ✅ Event simulation and testing\n- ✅ Audit and receipt management\n- ✅ LLM operations\n- ✅ Error handling and edge cases\n- ✅ Configuration and environment\n- ✅ Performance and reliability\n\n## Test Features\n\n### Real Environment Testing\n- Tests run against actual playground setup\n- Uses real GitVan configuration\n- Tests with real job files and templates\n\n### Comprehensive Coverage\n- All CLI commands tested\n- Error conditions covered\n- Edge cases handled\n- Integration workflows verified\n\n### Reliable Execution\n- Proper cleanup after tests\n- Isolated test environments\n- Consistent test data\n- Parallel execution support\n\n### AI Integration Testing\n- Tests AI-powered features\n- Handles AI unavailability gracefully\n- Validates AI-generated content\n- Tests custom AI parameters\n\n## Test Data\n\nTests use the playground environment which includes:\n- **Jobs**: `foundation/`, `cicd/`, `docs/`, `test/` directories\n- **Templates**: Nunjucks templates for various purposes\n- **Configuration**: `gitvan.config.js` with hooks and settings\n- **Events**: Sample event handlers\n- **Receipts**: Git notes with execution records\n\n## Debugging Tests\n\n### Verbose Output\n```bash\npnpm test tests/e2e/ --reporter=verbose\n```\n\n### Single Test Debugging\n```bash\npnpm test tests/e2e/chat-cli.test.mjs --reporter=verbose\n```\n\n### Test Environment Inspection\n```bash\n# Check playground setup\nls -la playground/\ncat playground/gitvan.config.js\n```\n\n## Contributing\n\nWhen adding new E2E tests:\n\n1. **Follow naming convention**: `{command}-cli.test.mjs`\n2. **Test against playground**: Use playground environment\n3. **Include error cases**: Test both success and failure scenarios\n4. **Clean up**: Ensure proper cleanup in `afterEach`\n5. **Document**: Add test descriptions and comments\n6. **Update coverage**: Update this README with new test coverage\n\n## Test Results\n\nE2E tests verify that:\n- ✅ All CLI commands work correctly\n- ✅ Commands integrate properly\n- ✅ Error handling is robust\n- ✅ AI features function as expected\n- ✅ Configuration is respected\n- ✅ Performance is acceptable\n- ✅ Real-world workflows complete successfully\n\nThis comprehensive E2E test suite ensures GitVan v2 CLI is production-ready and reliable.\n"
        }
    ]
}