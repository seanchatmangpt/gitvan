{
    "sourceFile": "README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1758042393509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758053986045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n # GitVan v2\n \n-**Git-Native Automation with Composables and Templates**\n+**Git-Native Development Automation Platform**\n \n-GitVan v2 is a lean, single-package JavaScript solution that transforms your Git repository into an intelligent automation platform. Built with modern composables, Nunjucks templates, and Git-native storage, it provides zero-configuration workflow automation with Vue-inspired ergonomics.\n+GitVan v2 is a comprehensive Git-native automation platform that transforms your Git repository into an intelligent development environment. Built with modern composables, Nunjucks templates, and Git-native storage, it provides zero-configuration workflow automation with Vue-inspired ergonomics.\n \n ## 🚀 Quick Start\n \n ```bash\n@@ -13,9 +13,9 @@\n # Navigate to your Git repository\n cd your-project\n \n # Run a job\n-gitvan run docs:changelog\n+gitvan job run docs:changelog\n \n # Start the daemon for continuous automation\n gitvan daemon start\n ```\n@@ -26,15 +26,20 @@\n - **Vue-inspired ergonomics** with `useGit()`, `useTemplate()`, `useExec()`\n - **Automatic dependency injection** using unctx\n - **Context isolation** for concurrent execution\n \n-### 📝 **Five Execution Types**\n-- **`cli`** - Shell command execution with environment control\n-- **`js`** - JavaScript module execution with import resolution  \n-- **`llm`** - Language model integration (Ollama, OpenAI, etc.)\n-- **`job`** - Recursive job execution for composition\n-- **`tmpl`** - Nunjucks template rendering with Git context\n+### 🔄 **Git-Native Job System**\n+- **Filesystem discovery** of jobs in `jobs/` directory\n+- **Multiple job types**: on-demand, cron, event-driven\n+- **Atomic execution** with Git refs for locking\n+- **Auditable receipts** stored in Git notes\n \n+### 📝 **Advanced Template System**\n+- **Nunjucks templates** with Git context injection\n+- **Inflection filters** for string transformations\n+- **Deterministic rendering** with cached environments\n+- **File and string output** support\n+\n ### 🌳 **Git-Native Storage**\n - **Git refs** for distributed locking across worktrees\n - **Git notes** for execution metadata and receipts\n - **No external databases** - everything stored in Git\n@@ -53,18 +58,25 @@\n ├── composables/          # Vue-inspired composables API\n │   ├── ctx.mjs          # Context management (unctx)\n │   ├── git.mjs          # Git operations composable\n │   ├── template.mjs     # Nunjucks template composable\n-│   ├── exec.mjs         # Execution composable\n │   └── index.mjs        # Composable exports\n-├── runtime/              # Core runtime engine\n-│   ├── boot.mjs         # Context bootstrapping\n+├── jobs/                 # Job system implementation\n │   ├── define.mjs       # Job definition system\n-│   ├── daemon.mjs       # Worktree-scoped daemon\n-│   ├── events.mjs       # Event discovery and routing\n-│   ├── locks.mjs        # Distributed locking\n-│   └── receipt.mjs      # Execution receipts\n-└── cli.mjs              # Command-line interface\n+│   ├── scan.mjs         # Filesystem job discovery\n+│   ├── runner.mjs       # Job execution engine\n+│   ├── cron.mjs         # Cron scheduler\n+│   ├── events.mjs       # Event-driven jobs\n+│   ├── daemon.mjs       # Background daemon\n+│   └── hooks.mjs        # Lifecycle hooks\n+├── config/               # Configuration system\n+│   ├── defaults.mjs     # Default configuration\n+│   ├── loader.mjs      # Configuration loading\n+│   └── runtime-config.mjs # Runtime normalization\n+├── utils/                # Utility functions\n+│   └── nunjucks-config.mjs # Template configuration\n+└── cli/                  # Command-line interface\n+    └── job.mjs          # Job management commands\n ```\n \n ## 📦 Installation\n \n@@ -95,96 +107,122 @@\n ```\n \n ## 🎮 Usage\n \n-### Basic Job Execution\n+### Job Management\n \n ```bash\n+# List available jobs\n+gitvan job list\n+\n # Run a specific job\n-gitvan run docs:changelog\n+gitvan job run docs:changelog\n \n-# List available jobs\n-gitvan list\n+# Run job with payload\n+gitvan job run foundation:template-greeting --payload '{\"custom\": \"value\"}'\n+\n+# Show job details\n+gitvan job show docs:changelog\n+\n+# Plan job execution (dry run)\n+gitvan job plan docs:changelog\n ```\n \n ### Daemon Management\n \n ```bash\n # Start daemon for current worktree\n gitvan daemon start\n \n-# Start daemon for all worktrees\n-gitvan daemon start --worktrees all\n-\n # Check daemon status\n gitvan daemon status\n \n # Stop daemon\n gitvan daemon stop\n+\n+# View daemon statistics\n+gitvan daemon stats\n ```\n \n-### Event Discovery\n+### Lock Management\n \n ```bash\n-# List discovered events\n-gitvan event list\n+# List active job locks\n+gitvan job locks\n \n-# List all worktrees\n-gitvan worktree list\n+# Unlock a specific job\n+gitvan job unlock docs:changelog\n ```\n \n ## 🔧 Job Definition\n \n Jobs are defined using the `defineJob()` pattern with composables:\n \n ```javascript\n // jobs/docs/changelog.mjs\n-import { defineJob } from '../../src/runtime/define.mjs'\n-import { useGit } from '../../src/composables/git.mjs'\n-import { useTemplate } from '../../src/composables/template.mjs'\n+import { defineJob } from \"gitvan/define\";\n+import { useGit } from \"gitvan/useGit\";\n+import { useTemplate } from \"gitvan/useTemplate\";\n \n export default defineJob({\n-  kind: 'atomic',\n   meta: { \n-    desc: 'Generate CHANGELOG.md', \n-    schedule: '0 3 * * *' \n+    desc: \"Generate CHANGELOG.md from git log\",\n+    tags: [\"documentation\", \"changelog\"]\n   },\n-  async run() {\n-    const git = useGit()\n-    const t = useTemplate()\n+  async run({ ctx, payload }) {\n+    const git = useGit();\n+    const template = await useTemplate();\n     \n-    const commits = git.run('log --pretty=%h%x09%s -n 50').split('\\n')\n-    t.renderToFile('templates/changelog.njk', 'dist/CHANGELOG.md', { commits })\n+    // Get commits\n+    const logOutput = await git.log(\"%h%x09%s\", [\"-n\", \"50\"]);\n+    const commits = logOutput.split(\"\\n\").filter(Boolean);\n     \n-    return { ok: true, artifact: 'dist/CHANGELOG.md' }\n+    // Render template to file\n+    const outputPath = await template.renderToFile(\n+      \"changelog.njk\",\n+      \"dist/CHANGELOG.md\",\n+      { commits, generatedAt: ctx.nowISO }\n+    );\n+    \n+    return {\n+      ok: true,\n+      artifacts: [outputPath]\n+    };\n   }\n-})\n+});\n ```\n \n ### Job Types\n \n-- **`atomic`** - Single execution unit\n-- **`composite`** - Multiple steps with dependencies\n-- **`sequence`** - Sequential execution\n-- **`parallel`** - Concurrent execution\n+- **On-demand** - Manual execution via CLI\n+- **Cron** - Scheduled execution (`.cron.mjs` suffix)\n+- **Event-driven** - Triggered by Git events (`.evt.mjs` suffix)\n \n ## 🎨 Template System\n \n GitVan includes first-class Nunjucks template support with Git context injection:\n \n ```njk\n <!-- templates/changelog.njk -->\n # Changelog\n-Generated: {{ nowISO }}\n \n-{% for line in commits %}\n-- {{ line }}\n+Generated at: {{ generatedAt }}\n+Total commits: {{ commits.length }}\n+\n+## Recent Changes\n+\n+{% for commit in commits %}\n+- **{{ commit.split('\\t')[0] }}** {{ commit.split('\\t')[1] }}\n {% endfor %}\n+\n+---\n+*Generated by GitVan Jobs System*\n ```\n \n ### Template Features\n-- **Git context injection** - `{{ git.branch() }}`, `{{ git.head() }}`\n-- **Deterministic helpers** - `{{ nowISO }}`, `{{ formatDate() }}`\n+- **Git context injection** - Access to repository information\n+- **Inflection filters** - `titleize`, `camelize`, `underscore`, etc.\n+- **Deterministic helpers** - `nowISO`, `formatDate()`\n - **File output** - Render directly to files\n - **Include/extends** - Full Nunjucks functionality\n \n ## ⚙️ Configuration\n@@ -193,85 +231,103 @@\n \n ```javascript\n export default {\n   // Repository settings\n-  repo: {\n-    defaultBranch: \"main\",\n-    notesRef: \"refs/notes/gitvan\",\n-    signing: { require: true }\n+  root: process.cwd(),\n+  \n+  // Job configuration\n+  jobs: {\n+    dir: \"jobs\"\n   },\n-\n-  // LLM configuration\n-  llm: {\n-    baseURL: \"http://localhost:11434\", // Ollama\n-    model: \"llama3.2\",\n-    temperature: 0.2\n+  \n+  // Template configuration\n+  templates: {\n+    engine: \"nunjucks\",\n+    dirs: [\"templates\"]\n   },\n-\n-  // Event-driven automation\n-  events: [\n-    {\n-      id: \"daily-summary\",\n-      workflow: \"cron\",\n-      schedule: \"0 18 * * *\",\n-      run: { type: \"cookbook\", recipe: \"dev-diary\" }\n+  \n+  // Receipts configuration\n+  receipts: {\n+    ref: \"refs/notes/gitvan/results\"\n+  },\n+  \n+  // Custom hooks\n+  hooks: {\n+    \"job:after\": (payload, result) => {\n+      console.log(`Job completed: ${payload.jobId}`);\n     }\n-  ]\n-}\n+  }\n+};\n ```\n \n ## 🔌 Composables API\n \n ### `useGit()`\n ```javascript\n-const git = useGit()\n-git.run('log --oneline -10')        // Execute git command\n-git.branch()                        // Current branch\n-git.head()                          // Current HEAD\n-git.note('refs/notes/test', 'msg')  // Add git note\n+const git = useGit();\n+\n+// Basic Git operations\n+await git.run(\"log --oneline -10\");\n+await git.head();                    // Current HEAD\n+await git.getCurrentBranch();        // Current branch\n+await git.isClean();                 // Working directory status\n+\n+// Git notes\n+await git.noteAdd(\"refs/notes/test\", \"message\");\n+await git.noteShow(\"refs/notes/test\");\n+\n+// Atomic operations\n+await git.updateRefCreate(\"refs/gitvan/lock/job-id\", commitSha);\n ```\n \n ### `useTemplate()`\n ```javascript\n-const t = useTemplate()\n-t.render('template.njk', { data })           // Render to string\n-t.renderToFile('template.njk', 'out.md', {}) // Render to file\n-```\n+const template = await useTemplate();\n \n-### `useExec()`\n-```javascript\n-const exec = useExec()\n-exec.cli('npm', ['test'])                    // CLI execution\n-exec.js('./script.mjs', 'default', {})       // JS execution\n-exec.tmpl({ template: 'test.njk', data: {} }) // Template execution\n+// Render to string\n+const html = await template.renderString(\"Hello {{ name }}!\", { name: \"World\" });\n+\n+// Render to file\n+const outputPath = await template.renderToFile(\n+  \"template.njk\",\n+  \"dist/output.html\",\n+  { data: \"value\" }\n+);\n ```\n \n ## 🎯 Event System\n \n-GitVan discovers events through file system conventions:\n+GitVan supports event-driven jobs with Git-native predicates:\n \n-```\n-events/\n-├── cron/\n-│   └── 0_9_*_*_*.mjs          # Daily at 9 AM\n-├── merge-to/\n-│   └── main.mjs               # On merge to main\n-├── push-to/\n-│   └── feature/*.mjs          # On push to feature/*\n-└── message/\n-    └── release.mjs            # On commit message \"release\"\n-```\n+```javascript\n+// jobs/alerts/release.evt.mjs\n+import { defineJob } from \"gitvan/define\";\n \n-### Event Handler Example\n-```javascript\n-// events/merge-to/main.mjs\n-export default async function handler({ payload, git, meta }) {\n-  const git = useGit()\n-  // Deploy to production\n-  return { ok: true, action: 'deploy' }\n-}\n+export default defineJob({\n+  meta: {\n+    desc: \"Notify on new releases\",\n+    tags: [\"alerts\", \"releases\"]\n+  },\n+  on: {\n+    any: [\n+      { tagCreate: true },\n+      { semverTag: true }\n+    ]\n+  },\n+  async run({ ctx, payload }) {\n+    // Handle release notification\n+    return { ok: true };\n+  }\n+});\n ```\n \n+### Event Predicates\n+- **`tagCreate`** - New tag created\n+- **`semverTag`** - Semantic version tag\n+- **`branchCreate`** - New branch created\n+- **`mergeTo`** - Merge to specific branch\n+- **`pushTo`** - Push to specific branch pattern\n+\n ## 🚀 Performance\n \n GitVan v2 is optimized for speed and efficiency:\n \n@@ -290,28 +346,74 @@\n - **Worktree isolation** prevents cross-contamination\n \n ## 📚 Documentation\n \n-- **[Specifications](./specs/)** - Complete system specifications\n-- **[API Contracts](./specs/docs/API_CONTRACTS.md)** - Detailed API documentation\n-- **[Architecture Decisions](./specs/docs/ARCHITECTURE_DECISIONS.md)** - Design rationale\n-- **[Implementation Guide](./specs/docs/IMPLEMENTATION_GUIDE.md)** - Development guide\n+### Core Documentation\n+- **[Playground Guide](./docs/playground/)** - Complete developer guide for the playground application\n+- **[Cookbook](./docs/cookbook/)** - Practical recipes and patterns for common use cases\n \n+### Playground Documentation\n+- **[Playground README](./docs/playground/README.md)** - Main developer guide\n+- **[Job Examples](./docs/playground/job-examples.md)** - Detailed job examples and patterns\n+- **[Testing Guide](./docs/playground/testing-guide.md)** - Testing strategies and best practices\n+- **[Architecture Guide](./docs/playground/architecture-guide.md)** - System architecture overview\n+- **[Troubleshooting Guide](./docs/playground/troubleshooting-guide.md)** - Common issues and solutions\n+\n+### Cookbook Recipes\n+- **[Foundation Recipes](./docs/cookbook/foundation/)** - Basic job setup, configuration, templates, error handling\n+- **[Documentation Recipes](./docs/cookbook/documentation/)** - Changelog generation, documentation automation\n+- **[CI/CD Recipes](./docs/cookbook/cicd/)** - Build automation, deployment workflows\n+\n+### API Reference\n+- **[Composables API](./src/composables/)** - `useGit`, `useTemplate`, context management\n+- **[Job System API](./src/jobs/)** - Job definition, execution, scheduling\n+- **[Configuration API](./src/config/)** - Configuration loading and normalization\n+\n ## 🧪 Testing\n \n ```bash\n # Run all tests\n pnpm test\n \n # Run specific test suites\n pnpm test composables\n-pnpm test runtime\n-pnpm test cli\n+pnpm test jobs\n+pnpm test config\n \n+# Run E2E tests\n+pnpm test playground-e2e\n+pnpm test playground-cookbook-e2e\n+\n # Run with coverage\n pnpm test --coverage\n ```\n \n+## 🎮 Playground\n+\n+The GitVan playground is a self-contained example application that demonstrates all features:\n+\n+```bash\n+# Navigate to playground\n+cd playground\n+\n+# Install dependencies\n+pnpm install\n+\n+# Start development mode\n+pnpm dev\n+\n+# Run specific jobs\n+pnpm run:changelog\n+pnpm run:simple\n+```\n+\n+The playground includes:\n+- **Foundation jobs** - Basic setup, file output, templates, error handling\n+- **Documentation jobs** - Advanced changelog generation\n+- **CI/CD jobs** - Build automation workflows\n+- **Event-driven jobs** - Release notifications\n+- **Comprehensive E2E tests** - Full system validation\n+\n ## 🤝 Contributing\n \n We welcome contributions! Please see our [Contributing Guide](./CONTRIBUTING.md) for details.\n \n@@ -341,8 +443,9 @@\n - **Vue.js** for the composables pattern\n - **Git** for the powerful foundation\n - **Nunjucks** for template rendering\n - **unctx** for context management\n+- **Nitro** for configuration patterns\n \n ---\n \n **Transform your Git workflow with intelligent automation. Start with GitVan v2 today!**\n\\ No newline at end of file\n"
                },
                {
                    "date": 1758054695916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n # GitVan v2\n \n-**Git-Native Development Automation Platform**\n+**Git-Native Job System with Composables**\n \n-GitVan v2 is a comprehensive Git-native automation platform that transforms your Git repository into an intelligent development environment. Built with modern composables, Nunjucks templates, and Git-native storage, it provides zero-configuration workflow automation with Vue-inspired ergonomics.\n+GitVan v2 is a Git-native job system that transforms your Git repository into an intelligent automation platform. Built with modern composables, Nunjucks templates, and Git-native storage, it provides zero-configuration workflow automation with Vue-inspired ergonomics.\n \n ## 🚀 Quick Start\n \n ```bash\n@@ -13,18 +13,18 @@\n # Navigate to your Git repository\n cd your-project\n \n # Run a job\n-gitvan job run docs:changelog\n+gitvan run docs:changelog\n \n # Start the daemon for continuous automation\n gitvan daemon start\n ```\n \n ## ✨ Key Features\n \n ### 🎯 **Composables-First API**\n-- **Vue-inspired ergonomics** with `useGit()`, `useTemplate()`, `useExec()`\n+- **Vue-inspired ergonomics** with `useGit()`, `useTemplate()`\n - **Automatic dependency injection** using unctx\n - **Context isolation** for concurrent execution\n \n ### 🔄 **Git-Native Job System**\n@@ -114,12 +114,12 @@\n # List available jobs\n gitvan job list\n \n # Run a specific job\n-gitvan job run docs:changelog\n+gitvan job run --name docs:changelog\n \n # Run job with payload\n-gitvan job run foundation:template-greeting --payload '{\"custom\": \"value\"}'\n+gitvan job run --name foundation:template-greeting --payload '{\"custom\": \"value\"}'\n \n # Show job details\n gitvan job show docs:changelog\n \n@@ -132,16 +132,16 @@\n ```bash\n # Start daemon for current worktree\n gitvan daemon start\n \n+# Start daemon for all worktrees\n+gitvan daemon start --worktrees all\n+\n # Check daemon status\n gitvan daemon status\n \n # Stop daemon\n gitvan daemon stop\n-\n-# View daemon statistics\n-gitvan daemon stats\n ```\n \n ### Lock Management\n \n"
                }
            ],
            "date": 1758042393509,
            "name": "Commit-0",
            "content": "# GitVan v2\n\n**Git-Native Automation with Composables and Templates**\n\nGitVan v2 is a lean, single-package JavaScript solution that transforms your Git repository into an intelligent automation platform. Built with modern composables, Nunjucks templates, and Git-native storage, it provides zero-configuration workflow automation with Vue-inspired ergonomics.\n\n## 🚀 Quick Start\n\n```bash\n# Install GitVan globally\nnpm install -g gitvan\n\n# Navigate to your Git repository\ncd your-project\n\n# Run a job\ngitvan run docs:changelog\n\n# Start the daemon for continuous automation\ngitvan daemon start\n```\n\n## ✨ Key Features\n\n### 🎯 **Composables-First API**\n- **Vue-inspired ergonomics** with `useGit()`, `useTemplate()`, `useExec()`\n- **Automatic dependency injection** using unctx\n- **Context isolation** for concurrent execution\n\n### 📝 **Five Execution Types**\n- **`cli`** - Shell command execution with environment control\n- **`js`** - JavaScript module execution with import resolution  \n- **`llm`** - Language model integration (Ollama, OpenAI, etc.)\n- **`job`** - Recursive job execution for composition\n- **`tmpl`** - Nunjucks template rendering with Git context\n\n### 🌳 **Git-Native Storage**\n- **Git refs** for distributed locking across worktrees\n- **Git notes** for execution metadata and receipts\n- **No external databases** - everything stored in Git\n\n### 🔄 **Worktree-Aware Design**\n- **Per-worktree daemons** with complete isolation\n- **Distributed locking** prevents conflicts\n- **Concurrent execution** across multiple branches\n\n## 🏗️ Architecture\n\nGitVan v2 is built as a **single package** with clear internal boundaries:\n\n```\nsrc/\n├── composables/          # Vue-inspired composables API\n│   ├── ctx.mjs          # Context management (unctx)\n│   ├── git.mjs          # Git operations composable\n│   ├── template.mjs     # Nunjucks template composable\n│   ├── exec.mjs         # Execution composable\n│   └── index.mjs        # Composable exports\n├── runtime/              # Core runtime engine\n│   ├── boot.mjs         # Context bootstrapping\n│   ├── define.mjs       # Job definition system\n│   ├── daemon.mjs       # Worktree-scoped daemon\n│   ├── events.mjs       # Event discovery and routing\n│   ├── locks.mjs        # Distributed locking\n│   └── receipt.mjs      # Execution receipts\n└── cli.mjs              # Command-line interface\n```\n\n## 📦 Installation\n\n### Prerequisites\n- **Node.js** 18+ \n- **Git** 2.30+ with GPG signing (recommended)\n- **pnpm** 8+ (for development)\n\n### Global Installation\n```bash\nnpm install -g gitvan\n```\n\n### Development Setup\n```bash\n# Clone the repository\ngit clone https://github.com/sac/gitvan.git\ncd gitvan\n\n# Install dependencies\npnpm install\n\n# Run tests\npnpm test\n\n# Start development CLI\npnpm dev\n```\n\n## 🎮 Usage\n\n### Basic Job Execution\n\n```bash\n# Run a specific job\ngitvan run docs:changelog\n\n# List available jobs\ngitvan list\n```\n\n### Daemon Management\n\n```bash\n# Start daemon for current worktree\ngitvan daemon start\n\n# Start daemon for all worktrees\ngitvan daemon start --worktrees all\n\n# Check daemon status\ngitvan daemon status\n\n# Stop daemon\ngitvan daemon stop\n```\n\n### Event Discovery\n\n```bash\n# List discovered events\ngitvan event list\n\n# List all worktrees\ngitvan worktree list\n```\n\n## 🔧 Job Definition\n\nJobs are defined using the `defineJob()` pattern with composables:\n\n```javascript\n// jobs/docs/changelog.mjs\nimport { defineJob } from '../../src/runtime/define.mjs'\nimport { useGit } from '../../src/composables/git.mjs'\nimport { useTemplate } from '../../src/composables/template.mjs'\n\nexport default defineJob({\n  kind: 'atomic',\n  meta: { \n    desc: 'Generate CHANGELOG.md', \n    schedule: '0 3 * * *' \n  },\n  async run() {\n    const git = useGit()\n    const t = useTemplate()\n    \n    const commits = git.run('log --pretty=%h%x09%s -n 50').split('\\n')\n    t.renderToFile('templates/changelog.njk', 'dist/CHANGELOG.md', { commits })\n    \n    return { ok: true, artifact: 'dist/CHANGELOG.md' }\n  }\n})\n```\n\n### Job Types\n\n- **`atomic`** - Single execution unit\n- **`composite`** - Multiple steps with dependencies\n- **`sequence`** - Sequential execution\n- **`parallel`** - Concurrent execution\n\n## 🎨 Template System\n\nGitVan includes first-class Nunjucks template support with Git context injection:\n\n```njk\n<!-- templates/changelog.njk -->\n# Changelog\nGenerated: {{ nowISO }}\n\n{% for line in commits %}\n- {{ line }}\n{% endfor %}\n```\n\n### Template Features\n- **Git context injection** - `{{ git.branch() }}`, `{{ git.head() }}`\n- **Deterministic helpers** - `{{ nowISO }}`, `{{ formatDate() }}`\n- **File output** - Render directly to files\n- **Include/extends** - Full Nunjucks functionality\n\n## ⚙️ Configuration\n\nCreate `gitvan.config.js` in your project root:\n\n```javascript\nexport default {\n  // Repository settings\n  repo: {\n    defaultBranch: \"main\",\n    notesRef: \"refs/notes/gitvan\",\n    signing: { require: true }\n  },\n\n  // LLM configuration\n  llm: {\n    baseURL: \"http://localhost:11434\", // Ollama\n    model: \"llama3.2\",\n    temperature: 0.2\n  },\n\n  // Event-driven automation\n  events: [\n    {\n      id: \"daily-summary\",\n      workflow: \"cron\",\n      schedule: \"0 18 * * *\",\n      run: { type: \"cookbook\", recipe: \"dev-diary\" }\n    }\n  ]\n}\n```\n\n## 🔌 Composables API\n\n### `useGit()`\n```javascript\nconst git = useGit()\ngit.run('log --oneline -10')        // Execute git command\ngit.branch()                        // Current branch\ngit.head()                          // Current HEAD\ngit.note('refs/notes/test', 'msg')  // Add git note\n```\n\n### `useTemplate()`\n```javascript\nconst t = useTemplate()\nt.render('template.njk', { data })           // Render to string\nt.renderToFile('template.njk', 'out.md', {}) // Render to file\n```\n\n### `useExec()`\n```javascript\nconst exec = useExec()\nexec.cli('npm', ['test'])                    // CLI execution\nexec.js('./script.mjs', 'default', {})       // JS execution\nexec.tmpl({ template: 'test.njk', data: {} }) // Template execution\n```\n\n## 🎯 Event System\n\nGitVan discovers events through file system conventions:\n\n```\nevents/\n├── cron/\n│   └── 0_9_*_*_*.mjs          # Daily at 9 AM\n├── merge-to/\n│   └── main.mjs               # On merge to main\n├── push-to/\n│   └── feature/*.mjs          # On push to feature/*\n└── message/\n    └── release.mjs            # On commit message \"release\"\n```\n\n### Event Handler Example\n```javascript\n// events/merge-to/main.mjs\nexport default async function handler({ payload, git, meta }) {\n  const git = useGit()\n  // Deploy to production\n  return { ok: true, action: 'deploy' }\n}\n```\n\n## 🚀 Performance\n\nGitVan v2 is optimized for speed and efficiency:\n\n- **Job execution**: < 100ms for simple tasks\n- **Template rendering**: > 1000 templates/second\n- **Daemon memory**: < 50MB baseline usage\n- **Lock contention**: < 1 second resolution\n- **Context initialization**: < 50ms\n\n## 🛡️ Security\n\n- **Git-native authentication** with signed commits\n- **Path traversal prevention** in all file operations\n- **Input validation** and sanitization\n- **No external dependencies** for core functionality\n- **Worktree isolation** prevents cross-contamination\n\n## 📚 Documentation\n\n- **[Specifications](./specs/)** - Complete system specifications\n- **[API Contracts](./specs/docs/API_CONTRACTS.md)** - Detailed API documentation\n- **[Architecture Decisions](./specs/docs/ARCHITECTURE_DECISIONS.md)** - Design rationale\n- **[Implementation Guide](./specs/docs/IMPLEMENTATION_GUIDE.md)** - Development guide\n\n## 🧪 Testing\n\n```bash\n# Run all tests\npnpm test\n\n# Run specific test suites\npnpm test composables\npnpm test runtime\npnpm test cli\n\n# Run with coverage\npnpm test --coverage\n```\n\n## 🤝 Contributing\n\nWe welcome contributions! Please see our [Contributing Guide](./CONTRIBUTING.md) for details.\n\n### Development Commands\n\n```bash\n# Install dependencies\npnpm install\n\n# Run linting\npnpm lint\n\n# Type checking\npnpm typecheck\n\n# Clean build artifacts\npnpm clean\n```\n\n## 📄 License\n\nPublished under the [MIT](./LICENSE) license.\n\n## 🙏 Acknowledgments\n\nGitVan v2 is inspired by:\n- **Vue.js** for the composables pattern\n- **Git** for the powerful foundation\n- **Nunjucks** for template rendering\n- **unctx** for context management\n\n---\n\n**Transform your Git workflow with intelligent automation. Start with GitVan v2 today!**"
        }
    ]
}