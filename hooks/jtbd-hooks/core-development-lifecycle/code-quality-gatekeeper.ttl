@prefix ex: <http://example.org/> .
@prefix gv: <https://gitvan.dev/ontology#> .
@prefix gh: <https://gitvan.dev/graph-hook#> .
@prefix op: <https://gitvan.dev/op#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .

# Code Quality Gatekeeper Hook - JTBD #1
# "I want my code to be automatically validated before it reaches production"

ex:code-quality-gatekeeper-hook rdf:type gh:Hook ;
    gv:title "Code Quality Gatekeeper" ;
    gh:hasPredicate ex:code-quality-predicate ;
    gh:orderedPipelines ex:code-quality-pipeline .

# ASK Predicate - "Condition" Sensor
# Triggers when code quality issues are detected
ex:code-quality-predicate rdf:type gh:ASKPredicate ;
    gh:queryText """
        PREFIX gv: <https://gitvan.dev/ontology#>
        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        
        ASK WHERE {
            ?file rdf:type gv:SourceFile .
            ?file gv:hasQualityIssue ?issue .
            ?issue gv:severity ?severity .
            FILTER(?severity IN ("high", "critical"))
        }
    """ ;
    gh:description "Detects high or critical severity code quality issues" .

# Workflow Pipeline
ex:code-quality-pipeline rdf:type op:Pipeline ;
    op:steps ex:analyze-code-quality, ex:generate-quality-report, ex:notify-team, ex:update-dashboard .

# Step 1: Analyze Code Quality
ex:analyze-code-quality rdf:type gv:SparqlStep ;
    gv:text """
        PREFIX gv: <https://gitvan.dev/ontology#>
        PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
        
        SELECT ?file ?issue ?severity ?message ?line WHERE {
            ?file rdf:type gv:SourceFile .
            ?file gv:hasQualityIssue ?issue .
            ?issue gv:severity ?severity .
            ?issue gv:message ?message .
            OPTIONAL { ?issue gv:line ?line }
            FILTER(?severity IN ("high", "critical"))
        } ORDER BY ?severity DESC, ?file
    """ ;
    gv:outputMapping '{"qualityIssues": "results", "issueCount": "results.length"}' .

# Step 2: Generate Quality Report
ex:generate-quality-report rdf:type gv:TemplateStep ;
    gv:text """
        # Code Quality Gatekeeper Report
        
        **Generated:** {{ "now" | date("YYYY-MM-DD HH:mm:ss") }}  
        **Hook:** Code Quality Gatekeeper (JTBD #1)  
        **Status:** üö® QUALITY ISSUES DETECTED  
        **Issue Count:** {{ issueCount }}
        
        ## Quality Issues Detected
        
        {% for issue in qualityIssues %}
        ### {{ issue.file.value }}
        - **Severity:** {{ issue.severity.value }}
        - **Message:** {{ issue.message.value }}
        {% if issue.line.value %}- **Line:** {{ issue.line.value }}{% endif %}
        
        {% endfor %}
        
        ## Actions Taken
        - ‚úÖ Code quality analysis completed
        - ‚úÖ Team notification sent
        - ‚úÖ Dashboard updated
        - ‚úÖ Quality report generated
        
        ## Recommendations
        - Fix all critical and high severity issues before proceeding
        - Review code quality standards
        - Consider additional linting rules
        
        ---
        *This report was automatically generated by the Code Quality Gatekeeper Hook*
    """ ;
    gv:filePath "./reports/jtbd/code-quality/code-quality-gatekeeper-{{ 'now' | date('YYYY-MM-DD-HH-mm-ss') }}.md" ;
    gv:dependsOn ex:analyze-code-quality .

# Step 3: Notify Team
ex:notify-team rdf:type gv:HttpStep ;
    gv:httpUrl "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK" ;
    gv:httpMethod "POST" ;
    gv:headers '{"Content-Type": "application/json"}' ;
    gv:body """
        {
            "text": "üõ°Ô∏è Code Quality Gatekeeper Alert",
            "attachments": [
                {
                    "color": "warning",
                    "title": "Code Quality Issues Detected",
                    "text": "{{ issueCount }} quality issues require attention before production",
                    "fields": [
                        {% for issue in qualityIssues %}
                        {
                            "title": "{{ issue.file.value }}",
                            "value": "Severity: {{ issue.severity.value }}\\n{{ issue.message.value }}",
                            "short": true
                        }{% if not loop.last %},{% endif %}
                        {% endfor %}
                    ],
                    "footer": "GitVan Knowledge Hook Engine",
                    "ts": {{ "now" | date("X") }}
                }
            ]
        }
    """ ;
    gv:dependsOn ex:generate-quality-report ;
    gv:timeout 15000 .

# Step 4: Update Dashboard
ex:update-dashboard rdf:type gv:TemplateStep ;
    gv:text """
        # Code Quality Dashboard
        
        **Last Updated:** {{ "now" | date("YYYY-MM-DD HH:mm:ss") }}  
        **Status:** üö® QUALITY ISSUES DETECTED  
        **Issue Count:** {{ issueCount }}
        
        ## Quality Metrics
        - **Critical Issues:** {{ qualityIssues | selectattr('severity.value', 'equalto', 'critical') | list | length }}
        - **High Issues:** {{ qualityIssues | selectattr('severity.value', 'equalto', 'high') | list | length }}
        - **Files Affected:** {{ qualityIssues | map(attribute='file.value') | unique | list | length }}
        
        ## Recent Issues
        {% for issue in qualityIssues[:5] %}
        - **{{ issue.file.value }}** ({{ issue.severity.value }}): {{ issue.message.value }}
        {% endfor %}
        
        ## Actions Required
        - Fix all critical and high severity issues
        - Review code quality standards
        - Update linting configuration if needed
        
        ---
        *This dashboard is automatically updated by the Code Quality Gatekeeper Hook*
    """ ;
    gv:filePath "./dashboards/code-quality.md" ;
    gv:dependsOn ex:notify-team .
