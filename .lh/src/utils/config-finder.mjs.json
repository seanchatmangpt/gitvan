{
    "sourceFile": "src/utils/config-finder.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1758046171965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758046934670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n // GitVan v2 — Configuration file finder utility\n // Provides robust config file discovery with fallback strategies\n+// DEPRECATED: Use src/config/loader.mjs instead\n \n import { existsSync, statSync } from \"node:fs\";\n import { join, dirname, resolve as presolve } from \"pathe\";\n import { pathToFileURL } from \"node:url\";\n"
                }
            ],
            "date": 1758046171965,
            "name": "Commit-0",
            "content": "// GitVan v2 — Configuration file finder utility\n// Provides robust config file discovery with fallback strategies\n\nimport { existsSync, statSync } from \"node:fs\";\nimport { join, dirname, resolve as presolve } from \"pathe\";\nimport { pathToFileURL } from \"node:url\";\n\n/**\n * Configuration file names to search for in order of preference\n */\nconst CONFIG_NAMES = [\n  \"gitvan.config.js\",\n  \"gitvan.config.mjs\",\n  \"gitvan.config.ts\",\n  \".gitvan.config.js\",\n  \".gitvan.config.mjs\",\n  \".gitvan.config.ts\",\n];\n\n/**\n * Find GitVan configuration file starting from a given directory\n * Searches up the directory tree until found or root is reached\n *\n * @param {string} startDir - Directory to start searching from\n * @returns {Promise<{path: string, config: any, root: string} | null>}\n */\nexport async function findGitVanConfig(startDir = process.cwd()) {\n  let currentDir = presolve(startDir);\n  const originalDir = currentDir;\n\n  while (currentDir !== dirname(currentDir)) {\n    for (const configName of CONFIG_NAMES) {\n      const configPath = join(currentDir, configName);\n\n      if (existsSync(configPath)) {\n        try {\n          const config = await loadConfigFile(configPath);\n          return {\n            path: configPath,\n            config,\n            root: currentDir,\n            foundFrom: originalDir,\n          };\n        } catch (error) {\n          console.warn(\n            `Error loading config from ${configPath}:`,\n            error.message,\n          );\n          // Continue searching for other config files\n        }\n      }\n    }\n\n    // Move up one directory level\n    currentDir = dirname(currentDir);\n  }\n\n  return null;\n}\n\n/**\n * Load configuration from a specific file path\n *\n * @param {string} configPath - Path to the config file\n * @returns {Promise<any>} - Loaded configuration object\n */\nasync function loadConfigFile(configPath) {\n  const fileUrl = pathToFileURL(configPath).href;\n  const configModule = await import(fileUrl);\n\n  let config = configModule.default || configModule;\n\n  // Handle function exports (defineConfig pattern)\n  if (typeof config === \"function\") {\n    config = config();\n  }\n\n  return config;\n}\n\n/**\n * Get templates directory from config with fallback strategies\n *\n * @param {string} startDir - Directory to start searching from\n * @returns {Promise<{templatesDir: string, config: any, root: string} | null>}\n */\nexport async function findTemplatesDir(startDir = process.cwd()) {\n  const configResult = await findGitVanConfig(startDir);\n\n  if (!configResult) {\n    // Fallback: check for templates directory in current and parent directories\n    let currentDir = presolve(startDir);\n\n    while (currentDir !== dirname(currentDir)) {\n      const templatesDir = join(currentDir, \"templates\");\n      if (existsSync(templatesDir) && statSync(templatesDir).isDirectory()) {\n        return {\n          templatesDir,\n          config: null,\n          root: currentDir,\n          foundFrom: startDir,\n        };\n      }\n      currentDir = dirname(currentDir);\n    }\n\n    return null;\n  }\n\n  // Extract templates directory from config\n  const { config, root } = configResult;\n\n  // Check various config paths for templates directory\n  const templatesPaths = [\n    config?.templates?.directory,\n    config?.templates?.dir,\n    config?.templates?.dirs?.[0],\n    \"templates\", // fallback\n  ].filter(Boolean);\n\n  for (const templatesPath of templatesPaths) {\n    const templatesDir = presolve(root, templatesPath);\n    if (existsSync(templatesDir) && statSync(templatesDir).isDirectory()) {\n      return {\n        templatesDir,\n        config,\n        root,\n        foundFrom: startDir,\n      };\n    }\n  }\n\n  return null;\n}\n\n/**\n * Get configuration value with dot notation support\n *\n * @param {any} config - Configuration object\n * @param {string} path - Dot notation path (e.g., \"templates.directory\")\n * @param {any} defaultValue - Default value if path not found\n * @returns {any}\n */\nexport function getConfigValue(config, path, defaultValue = undefined) {\n  if (!config || typeof config !== \"object\") {\n    return defaultValue;\n  }\n\n  const keys = path.split(\".\");\n  let current = config;\n\n  for (const key of keys) {\n    if (current && typeof current === \"object\" && key in current) {\n      current = current[key];\n    } else {\n      return defaultValue;\n    }\n  }\n\n  return current;\n}\n\n/**\n * Validate that a directory exists and is accessible\n *\n * @param {string} dirPath - Path to validate\n * @returns {boolean}\n */\nexport function validateDirectory(dirPath) {\n  try {\n    return existsSync(dirPath) && statSync(dirPath).isDirectory();\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Get all template files from a templates directory\n *\n * @param {string} templatesDir - Path to templates directory\n * @param {string[]} extensions - File extensions to include (default: ['.njk', '.html', '.txt'])\n * @returns {Promise<string[]>} - Array of template file paths\n */\nexport async function getTemplateFiles(\n  templatesDir,\n  extensions = [\".njk\", \".html\", \".txt\"],\n) {\n  if (!validateDirectory(templatesDir)) {\n    return [];\n  }\n\n  try {\n    const { readdir } = await import(\"node:fs/promises\");\n    const files = await readdir(templatesDir);\n\n    return files\n      .filter((file) => extensions.some((ext) => file.endsWith(ext)))\n      .map((file) => join(templatesDir, file));\n  } catch {\n    return [];\n  }\n}\n"
        }
    ]
}