{
    "sourceFile": "src/schemas/config.zod.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1758072794718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758218092950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,59 +7,85 @@\n \n // Configuration schema\n export const ConfigSchema = z.object({\n   rootDir: z.string().default(process.cwd()),\n-  \n+\n   // Job configuration\n-  jobs: z.object({ \n-    dir: z.string().default(\"jobs\"),\n-    scan: z.object({\n-      patterns: z.array(z.string()).default([\"**/*.mjs\", \"**/*.cron.mjs\", \"**/*.evt.mjs\"]),\n-      ignore: z.array(z.string()).default([\"node_modules/**\", \".git/**\"]),\n-    }).default({}),\n-  }).default({}),\n-  \n+  jobs: z\n+    .object({\n+      dir: z.string().default(\"jobs\"),\n+      scan: z\n+        .object({\n+          patterns: z\n+            .array(z.string())\n+            .default([\"**/*.mjs\", \"**/*.cron.mjs\", \"**/*.evt.mjs\"]),\n+          ignore: z.array(z.string()).default([\"node_modules/**\", \".git/**\"]),\n+        })\n+        .default({}),\n+    })\n+    .default({}),\n+\n   // Template configuration\n-  templates: z.object({\n-    engine: z.literal(\"nunjucks\").default(\"nunjucks\"),\n-    dirs: z.array(z.string()).default([\"templates\"]),\n-    autoescape: z.boolean().default(false),\n-    noCache: z.boolean().default(false),\n-    filters: z.array(z.string()).default([\"inflection\", \"json\"]),\n-  }).default({}),\n-  \n+  templates: z\n+    .object({\n+      engine: z.literal(\"nunjucks\").default(\"nunjucks\"),\n+      dirs: z.array(z.string()).default([\"templates\"]),\n+      autoescape: z.boolean().default(false),\n+      noCache: z.boolean().default(false),\n+      filters: z.array(z.string()).default([\"inflection\", \"json\"]),\n+    })\n+    .default({}),\n+\n   // Receipt configuration\n-  receipts: z.object({\n-    ref: z.string().default(\"refs/notes/gitvan/results\"),\n-    enabled: z.boolean().default(true),\n-    compress: z.boolean().default(false),\n-  }).default({}),\n-  \n+  receipts: z\n+    .object({\n+      ref: z.string().default(\"refs/notes/gitvan/results\"),\n+      enabled: z.boolean().default(true),\n+      compress: z.boolean().default(false),\n+    })\n+    .default({}),\n+\n   // Lock configuration\n-  locks: z.object({\n-    ref: z.string().default(\"refs/gitvan/locks\"),\n-    timeout: z.number().positive().default(30000),\n-    retries: z.number().min(0).max(5).default(3),\n-  }).default({}),\n-  \n+  locks: z\n+    .object({\n+      ref: z.string().default(\"refs/gitvan/locks\"),\n+      timeout: z.number().positive().default(30000),\n+      retries: z.number().min(0).max(5).default(3),\n+    })\n+    .default({}),\n+\n   // AI configuration\n-  ai: z.object({\n-    provider: z.enum([\"ollama\", \"openai\", \"anthropic\"]).default(\"ollama\"),\n-    model: z.string().default(\"qwen3-coder:30b\"),\n-    baseUrl: z.string().optional(),\n-    apiKey: z.string().optional(),\n-    temperature: z.number().min(0).max(2).default(0.7),\n-    maxTokens: z.number().positive().default(4096),\n-  }).default({}),\n-  \n+  ai: z\n+    .object({\n+      provider: z.enum([\"ollama\", \"openai\", \"anthropic\"]).default(\"ollama\"),\n+      model: z.string().default(\"qwen3-coder:30b\"),\n+      baseUrl: z.string().optional(),\n+      apiKey: z.string().optional(),\n+      temperature: z.number().min(0).max(2).default(0.7),\n+      maxTokens: z.number().positive().default(4096),\n+    })\n+    .default({}),\n+\n+  // Graph configuration\n+  graph: z\n+    .object({\n+      dir: z.string().default(\"graph\"),\n+      snapshotsDir: z.string().default(\".gitvan/graphs/snapshots\"),\n+      uriRoots: z.record(z.string(), z.string()).default({}),\n+      autoLoad: z.boolean().default(true),\n+      validateOnLoad: z.boolean().default(false),\n+    })\n+    .default({}),\n+\n   // Hooks configuration\n   hooks: z.record(z.string(), z.any()).default({}),\n-  \n+\n   // Runtime configuration\n-  runtime: z.object({\n-    timezone: z.string().default(\"UTC\"),\n-    locale: z.string().default(\"en-US\"),\n-    deterministic: z.boolean().default(true),\n-    sandbox: z.boolean().default(true),\n-  }).default({}),\n+  runtime: z\n+    .object({\n+      timezone: z.string().default(\"UTC\"),\n+      locale: z.string().default(\"en-US\"),\n+      deterministic: z.boolean().default(true),\n+      sandbox: z.boolean().default(true),\n+    })\n+    .default({}),\n });\n-\n"
                }
            ],
            "date": 1758072794718,
            "name": "Commit-0",
            "content": "/**\n * GitVan v2 Config Schema - Zod validation for configuration\n * Defines the structure and validation rules for GitVan configuration\n */\n\nimport { z } from \"zod\";\n\n// Configuration schema\nexport const ConfigSchema = z.object({\n  rootDir: z.string().default(process.cwd()),\n  \n  // Job configuration\n  jobs: z.object({ \n    dir: z.string().default(\"jobs\"),\n    scan: z.object({\n      patterns: z.array(z.string()).default([\"**/*.mjs\", \"**/*.cron.mjs\", \"**/*.evt.mjs\"]),\n      ignore: z.array(z.string()).default([\"node_modules/**\", \".git/**\"]),\n    }).default({}),\n  }).default({}),\n  \n  // Template configuration\n  templates: z.object({\n    engine: z.literal(\"nunjucks\").default(\"nunjucks\"),\n    dirs: z.array(z.string()).default([\"templates\"]),\n    autoescape: z.boolean().default(false),\n    noCache: z.boolean().default(false),\n    filters: z.array(z.string()).default([\"inflection\", \"json\"]),\n  }).default({}),\n  \n  // Receipt configuration\n  receipts: z.object({\n    ref: z.string().default(\"refs/notes/gitvan/results\"),\n    enabled: z.boolean().default(true),\n    compress: z.boolean().default(false),\n  }).default({}),\n  \n  // Lock configuration\n  locks: z.object({\n    ref: z.string().default(\"refs/gitvan/locks\"),\n    timeout: z.number().positive().default(30000),\n    retries: z.number().min(0).max(5).default(3),\n  }).default({}),\n  \n  // AI configuration\n  ai: z.object({\n    provider: z.enum([\"ollama\", \"openai\", \"anthropic\"]).default(\"ollama\"),\n    model: z.string().default(\"qwen3-coder:30b\"),\n    baseUrl: z.string().optional(),\n    apiKey: z.string().optional(),\n    temperature: z.number().min(0).max(2).default(0.7),\n    maxTokens: z.number().positive().default(4096),\n  }).default({}),\n  \n  // Hooks configuration\n  hooks: z.record(z.string(), z.any()).default({}),\n  \n  // Runtime configuration\n  runtime: z.object({\n    timezone: z.string().default(\"UTC\"),\n    locale: z.string().default(\"en-US\"),\n    deterministic: z.boolean().default(true),\n    sandbox: z.boolean().default(true),\n  }).default({}),\n});\n\n"
        }
    ]
}