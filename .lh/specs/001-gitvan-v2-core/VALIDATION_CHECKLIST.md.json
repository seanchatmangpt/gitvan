{
    "sourceFile": "specs/001-gitvan-v2-core/VALIDATION_CHECKLIST.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758038949881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758038949881,
            "name": "Commit-0",
            "content": "# GitVan v2 Core - Validation Checklist\n\n## Functional Validation\n\n### Context Management\n- [ ] **Executable Test**: Context injection works with nested calls\n  ```javascript\n  test('context injection works with nested calls', async () => {\n    const result = await withGitVan(context, async () => {\n      return await withGitVan(context, () => {\n        const git = useGit()\n        return git.branch()\n      })\n    })\n    expect(result).toBe(context.branch)\n  })\n  ```\n- [ ] **Executable Test**: Context isolation prevents cross-contamination\n  ```javascript\n  test('context isolation prevents cross-contamination', async () => {\n    const context1 = createTestContext({ branch: 'feature-1' })\n    const context2 = createTestContext({ branch: 'feature-2' })\n    \n    const result1 = await withGitVan(context1, () => useGit().branch())\n    const result2 = await withGitVan(context2, () => useGit().branch())\n    \n    expect(result1).toBe('feature-1')\n    expect(result2).toBe('feature-2')\n  })\n  ```\n- [ ] **Executable Test**: Context provides all required Git information\n  ```javascript\n  test('context provides all required Git information', () => {\n    const git = useGit()\n    expect(git.root).toBeDefined()\n    expect(git.head()).toMatch(/^[a-f0-9]{40}$/)\n    expect(git.branch()).toBeDefined()\n    expect(typeof git.run).toBe('function')\n  })\n  ```\n- [ ] **Executable Test**: Context cleanup happens automatically\n  ```javascript\n  test('context cleanup happens automatically', async () => {\n    const initialMemory = process.memoryUsage().heapUsed\n    await withGitVan(context, () => {\n      // Create temporary resources\n      const git = useGit()\n      git.note('refs/notes/temp', 'test')\n    })\n    // Force garbage collection\n    global.gc && global.gc()\n    const finalMemory = process.memoryUsage().heapUsed\n    expect(finalMemory - initialMemory).toBeLessThan(1024 * 1024) // < 1MB\n  })\n  ```\n- [ ] **Executable Test**: Context performance meets < 50ms initialization target\n  ```javascript\n  test('context performance meets < 50ms initialization target', () => {\n    const start = performance.now()\n    const git = useGit()\n    const duration = performance.now() - start\n    expect(duration).toBeLessThan(50)\n  })\n  ```\n\n### Execution Engine\n- [ ] All five execution types (cli/js/llm/job/tmpl) work correctly\n- [ ] Timeout handling prevents hanging processes\n- [ ] Environment variables are injected properly\n- [ ] Result format is consistent across all types\n- [ ] Error handling provides meaningful messages\n\n### Git Integration\n- [ ] Reads Git context (HEAD, branch, commits) accurately\n- [ ] Writes and reads Git notes correctly\n- [ ] Git ref operations are atomic\n- [ ] Worktree detection and enumeration works\n- [ ] Git commands respect repository boundaries\n\n### Job Definition\n- [ ] defineJob() creates valid job objects\n- [ ] Metadata extraction works without execution\n- [ ] Job discovery scans filesystem correctly\n- [ ] Job filtering by kind and tags works\n- [ ] Schedule expressions parse correctly\n\n### Lock Management\n- [ ] Lock acquisition is atomic and conflict-free\n- [ ] Lock timeout and cleanup work automatically\n- [ ] Worktree lock scoping prevents conflicts\n- [ ] Lock contention resolves within 1 second\n- [ ] Lock cleanup handles crashed processes\n\n### Daemon Process\n- [ ] Commit scanning detects new commits reliably\n- [ ] Job execution respects rate limiting (max 50/tick)\n- [ ] Graceful shutdown cleans up resources\n- [ ] Memory usage stays below 100MB\n- [ ] Daemon restarts recover state correctly\n\n## Performance Validation\n\n### Execution Performance\n- [ ] Simple job execution completes in < 100ms\n- [ ] Template rendering processes > 1000 templates/second\n- [ ] Job discovery scan completes in < 500ms for 1000 jobs\n- [ ] Lock acquisition completes in < 100ms under contention\n- [ ] Context initialization completes in < 50ms\n\n### Memory Performance\n- [ ] Daemon process uses < 50MB baseline memory\n- [ ] Memory usage scales linearly with job count\n- [ ] No memory leaks during continuous operation\n- [ ] Template compilation caches work correctly\n- [ ] Context cleanup releases all resources\n\n### Concurrency Performance\n- [ ] Multiple daemon instances don't interfere\n- [ ] Lock contention scales to 10+ concurrent jobs\n- [ ] Worktree isolation works under load\n- [ ] Template engine handles concurrent rendering\n- [ ] Git operations don't block each other\n\n## Security Validation\n\n### Command Injection Prevention\n- [ ] CLI execution sanitizes arguments\n- [ ] Template rendering escapes dangerous content\n- [ ] Environment variables are validated\n- [ ] File path traversal is prevented\n- [ ] Git command injection is blocked\n\n### Access Control\n- [ ] Jobs run with appropriate permissions\n- [ ] File system access is scoped to repository\n- [ ] Network access is controlled\n- [ ] Environment variable access is limited\n- [ ] Git operations respect repository permissions\n\n### Data Protection\n- [ ] Sensitive data is not logged\n- [ ] Temporary files are cleaned up\n- [ ] Git notes don't expose secrets\n- [ ] Lock refs don't contain sensitive information\n- [ ] Error messages don't leak internal paths\n\n## Integration Validation\n\n### Git Repository Integration\n- [ ] Works with bare repositories\n- [ ] Works with worktrees\n- [ ] Works with submodules\n- [ ] Works with Git hooks\n- [ ] Works with different Git versions\n\n### Node.js Runtime Integration\n- [ ] Works with Node.js 18+\n- [ ] Works with different operating systems\n- [ ] Works with different shell environments\n- [ ] Works with different file systems\n- [ ] Works with restricted permissions\n\n### Package Manager Integration\n- [ ] npm install works correctly\n- [ ] pnpm install works correctly\n- [ ] yarn install works correctly\n- [ ] Dependencies resolve correctly\n- [ ] Peer dependencies are optional\n\n## API Validation\n\n### Composables API\n- [ ] useGitVan() returns expected context\n- [ ] useGit() provides all Git operations\n- [ ] useTemplate() renders templates correctly\n- [ ] useExec() executes all types\n- [ ] Error handling is consistent\n\n### CLI API\n- [ ] `gitvan run <job>` executes jobs\n- [ ] `gitvan list` shows available jobs\n- [ ] `gitvan daemon start` starts daemon\n- [ ] `gitvan daemon stop` stops daemon\n- [ ] Help text is accurate and complete\n\n### Job Definition API\n- [ ] defineJob() accepts all valid configurations\n- [ ] Job metadata is extracted correctly\n- [ ] Job validation catches errors early\n- [ ] Job composition works correctly\n- [ ] Schedule expressions are parsed\n\n## Reliability Validation\n\n### Error Recovery\n- [ ] Network failures are handled gracefully\n- [ ] File system errors don't crash daemon\n- [ ] Git command failures are recoverable\n- [ ] Lock timeouts clean up correctly\n- [ ] Process crashes don't corrupt state\n\n### State Consistency\n- [ ] Lock state remains consistent during failures\n- [ ] Job execution state is recoverable\n- [ ] Git refs are not corrupted\n- [ ] File system state is consistent\n- [ ] Daemon state survives restarts\n\n### Idempotency\n- [ ] Job execution is idempotent when possible\n- [ ] Lock operations are idempotent\n- [ ] File operations handle existing files\n- [ ] Git operations handle existing refs\n- [ ] Template rendering is deterministic\n\n## Documentation Validation\n\n### API Documentation\n- [ ] All public functions are documented\n- [ ] Type definitions are complete\n- [ ] Examples are working and current\n- [ ] Error conditions are documented\n- [ ] Performance characteristics are noted\n\n### User Documentation\n- [ ] Installation instructions work\n- [ ] Getting started guide is complete\n- [ ] Configuration options are documented\n- [ ] Troubleshooting guide covers common issues\n- [ ] Migration guide from v1 exists\n\n### Developer Documentation\n- [ ] Architecture decisions are recorded\n- [ ] Code organization is explained\n- [ ] Testing strategy is documented\n- [ ] Contribution guidelines exist\n- [ ] Release process is defined\n\n## Deployment Validation\n\n### Installation\n- [ ] npm package installs correctly\n- [ ] Binary is accessible globally\n- [ ] Dependencies install correctly\n- [ ] TypeScript definitions are included\n- [ ] Documentation is included\n\n### Configuration\n- [ ] Zero-config operation works\n- [ ] Configuration file is optional\n- [ ] Environment variables work\n- [ ] CLI flags override configuration\n- [ ] Validation provides helpful errors\n\n### Operations\n- [ ] Daemon can be managed as system service\n- [ ] Logging is configurable\n- [ ] Metrics can be collected\n- [ ] Graceful shutdown works\n- [ ] Resource limits are respected"
        }
    ]
}