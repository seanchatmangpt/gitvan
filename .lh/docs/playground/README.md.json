{
    "sourceFile": "docs/playground/README.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758051254569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758051254569,
            "name": "Commit-0",
            "content": "# GitVan Playground - Developer Guide\n\n## 🎯 Overview\n\nThe GitVan Playground is a comprehensive demonstration and testing environment for the GitVan Jobs System. It showcases all core features including job discovery, execution, template rendering, git integration, cron scheduling, event-driven jobs, and hooks.\n\n## 📁 Project Structure\n\n```\nplayground/\n├── package.json           # Dependencies and scripts\n├── gitvan.config.js       # GitVan configuration\n├── dev.mjs               # Main development runner\n├── test-playground.mjs   # Comprehensive test suite\n├── README.md             # Quick start guide\n├── jobs/                 # Job definitions\n│   ├── docs/\n│   │   └── changelog.mjs  # Changelog generation job\n│   ├── test/\n│   │   ├── simple.mjs     # Simple status report job\n│   │   └── cleanup.cron.mjs # Cron cleanup job\n│   └── alerts/\n│       └── release.evt.mjs # Event-driven release job\n├── templates/            # Nunjucks templates\n│   └── changelog.njk     # Changelog template\n└── dist/                 # Generated output files\n    ├── CHANGELOG.md      # Generated changelog\n    ├── status-report.json # Generated status report\n    └── notifications/    # Release notifications\n```\n\n## 🚀 Quick Start\n\n### Prerequisites\n\n- Node.js 18+ \n- pnpm (recommended) or npm\n- Git repository\n\n### Installation\n\n```bash\ncd playground\npnpm install\n```\n\n### Basic Usage\n\n```bash\n# Start the playground with hot reload\npnpm dev\n\n# List all discovered jobs\npnpm list\n\n# Run a specific job\npnpm run:changelog\npnpm run:simple\n\n# Show daemon status\npnpm status\n```\n\n## 🔧 Configuration\n\n### GitVan Configuration (`gitvan.config.js`)\n\n```javascript\nexport default {\n  root: process.cwd(),\n  jobs: { dir: \"jobs\" },\n  templates: { engine: \"nunjucks\", dirs: [\"templates\"] },\n  receipts: { ref: \"refs/notes/gitvan/results\" },\n  hooks: {\n    \"job:before\"({ id, payload }) {\n      console.log(`[playground] 🚀 Starting job: ${id}`);\n    },\n    \"job:after\"({ id, result }) {\n      console.log(`[playground] ✅ Job done: ${id}`, result?.ok ? \"OK\" : \"ERR\");\n    },\n    \"job:error\"({ id, error }) {\n      console.log(`[playground] ❌ Job failed: ${id}`, error.message);\n    },\n    \"lock:acquire\"({ id }) {\n      console.log(`[playground] 🔒 Lock acquired: ${id}`);\n    },\n    \"lock:release\"({ id }) {\n      console.log(`[playground] 🔓 Lock released: ${id}`);\n    },\n    \"receipt:write\"({ id }) {\n      console.log(`[playground] 📝 Receipt written: ${id}`);\n    }\n  }\n};\n```\n\n### Key Configuration Options\n\n- **`root`**: Working directory for jobs\n- **`jobs.dir`**: Directory to scan for job files\n- **`templates.dirs`**: Template directories for Nunjucks\n- **`receipts.ref`**: Git ref for storing execution receipts\n- **`hooks`**: Custom lifecycle hooks\n\n## 📋 Job Types\n\n### 1. On-Demand Jobs\n\nJobs that run manually via CLI or API.\n\n**Example**: `jobs/docs/changelog.mjs`\n\n```javascript\nimport { defineJob } from \"gitvan/define\";\nimport { useGit } from \"gitvan/useGit\";\nimport { useTemplate } from \"gitvan/useTemplate\";\n\nexport default defineJob({\n  meta: { desc: \"Render changelog from git log\" },\n  async run({ ctx }) {\n    const git = useGit();\n    const template = await useTemplate();\n    \n    // Get recent commits\n    const logOutput = await git.log(\"%h%x09%s\", [\"-n\", \"30\"]);\n    const lines = logOutput.split(\"\\n\").filter(Boolean);\n    \n    const commits = lines.map((line) => {\n      const [hash, subject] = line.split(\"\\t\");\n      return { hash, subject };\n    });\n\n    // Render template to file\n    const outputPath = await template.renderToFile(\n      \"changelog.njk\", \n      \"dist/CHANGELOG.md\", \n      { \n        commits,\n        generatedAt: ctx.nowISO,\n        totalCommits: commits.length\n      }\n    );\n\n    return { \n      ok: true, \n      artifacts: [outputPath],\n      data: {\n        commitsProcessed: commits.length,\n        outputPath\n      }\n    };\n  }\n});\n```\n\n### 2. Cron Jobs\n\nJobs that run on a schedule using cron expressions.\n\n**Example**: `jobs/test/cleanup.cron.mjs`\n\n```javascript\nimport { defineJob } from \"gitvan/define\";\nimport { useGit } from \"gitvan/useGit\";\n\nexport default defineJob({\n  meta: { \n    desc: \"Clean up temporary files and old artifacts\",\n    tags: [\"cleanup\", \"maintenance\"]\n  },\n  cron: \"0 2 * * *\", // Run daily at 2 AM\n  async run({ ctx }) {\n    const git = useGit();\n    const artifacts = [];\n    \n    // Clean up dist directory\n    const distDir = join(ctx.root, \"dist\");\n    try {\n      const files = await fs.readdir(distDir);\n      const oldFiles = files.filter((file) => {\n        return (\n          file.includes(\"old\") ||\n          file.includes(\"temp\") ||\n          file.includes(\"backup\")\n        );\n      });\n      \n      for (const file of oldFiles) {\n        const filePath = join(distDir, file);\n        await fs.unlink(filePath);\n        artifacts.push(`Removed: ${file}`);\n        ctx.logger.log(`Removed old file: ${file}`);\n      }\n      \n      if (oldFiles.length === 0) {\n        artifacts.push(\"No old files found to clean up\");\n        ctx.logger.log(\"No old files found to clean up\");\n      }\n    } catch (error) {\n      if (error.code === \"ENOENT\") {\n        artifacts.push(\"Dist directory does not exist\");\n        ctx.logger.log(\"Dist directory does not exist\");\n      } else {\n        throw error;\n      }\n    }\n\n    return {\n      ok: true,\n      artifacts,\n      data: {\n        cleanedFiles: artifacts.length,\n        timestamp: ctx.nowISO\n      }\n    };\n  }\n});\n```\n\n### 3. Event-Driven Jobs\n\nJobs that trigger based on git events using predicates.\n\n**Example**: `jobs/alerts/release.evt.mjs`\n\n```javascript\nimport { defineJob } from \"gitvan/define\";\nimport { useGit } from \"gitvan/useGit\";\n\nexport default defineJob({\n  meta: { \n    desc: \"Notify on new tags or releases\",\n    tags: [\"notification\", \"release\"]\n  },\n  on: {\n    any: [{ tagCreate: \"v*.*.*\" }, { semverTag: true }]\n  },\n  async run({ ctx, trigger }) {\n    const git = useGit();\n    \n    // Get the latest tag (handle case where no tags exist)\n    let latestTag;\n    try {\n      latestTag = await git.run([\"describe\", \"--tags\", \"--abbrev=0\", \"HEAD\"]);\n    } catch (error) {\n      if (error.message.includes(\"No names found\")) {\n        ctx.logger.log(\"No tags found in repository\");\n        latestTag = \"no-tags\";\n      } else {\n        throw error;\n      }\n    }\n\n    const notification = {\n      type: \"release\",\n      tag: latestTag.trim(),\n      timestamp: ctx.nowISO,\n      trigger: trigger?.data || {},\n      repository: {\n        head: await git.head(),\n        branch: await git.getCurrentBranch()\n      }\n    };\n\n    // Create notification file\n    const outputPath = join(\n      ctx.root,\n      \"dist\",\n      \"notifications\",\n      `${Date.now()}-release.json`\n    );\n    await fs.mkdir(join(ctx.root, \"dist\", \"notifications\"), {\n      recursive: true\n    });\n    await fs.writeFile(outputPath, JSON.stringify(notification, null, 2));\n\n    ctx.logger.log(`Release notification created for tag: ${latestTag}`);\n\n    return {\n      ok: true,\n      artifacts: [outputPath],\n      data: notification\n    };\n  }\n});\n```\n\n## 🎨 Template System\n\n### Nunjucks Templates\n\nThe playground uses Nunjucks for template rendering with custom filters.\n\n**Example**: `templates/changelog.njk`\n\n```njk\n# Changelog\n\nGenerated at: {{ generatedAt }}\nTotal commits: {{ totalCommits }}\n\n## Recent Changes\n\n{% for commit in commits -%}\n- **{{ commit.hash }}** {{ commit.subject }}\n{% endfor %}\n\n---\n*Generated by GitVan Jobs System*\n```\n\n### Available Filters\n\n- `capitalize` - Capitalize first letter\n- `pluralize` - Convert to plural form\n- `singularize` - Convert to singular form\n- `camelize` - Convert to camelCase\n- `underscore` - Convert to snake_case\n- `dasherize` - Convert to kebab-case\n- `humanize` - Convert to human-readable form\n- `titleize` - Convert to Title Case\n- `json` - Pretty-print JSON\n\n## 🔄 Development Workflow\n\n### Hot Reload Development\n\n```bash\n# Start playground with hot reload\npnpm dev\n```\n\nThis starts the daemon and enables hot reloading of job files. Any changes to job files will be automatically detected.\n\n### Testing Jobs\n\n```bash\n# Run comprehensive test suite\nnode test-playground.mjs\n\n# Test individual jobs\npnpm run:changelog\npnpm run:simple\npnpm run:cleanup\n```\n\n### Job Discovery\n\n```bash\n# List all discovered jobs\npnpm list\n```\n\nOutput:\n```\nDiscovered jobs:\n==================================================\nalerts:release       (event) - Notify on new tags or releases\n  └─ Events: {\"any\":[{\"tagCreate\":\"v*.*.*\"},{\"semverTag\":true}]}\ndocs:changelog       (on-demand) - Render changelog from git log\ntest:cleanup         (cron) - Clean up temporary files and old artifacts\n  └─ Cron: 0 2 * * *\ntest:simple          (on-demand) - Generate a simple status report\n\nTotal: 4 jobs\n```\n\n## 🔧 Advanced Usage\n\n### Custom Hooks\n\nAdd custom hooks to `gitvan.config.js`:\n\n```javascript\nhooks: {\n  \"job:before\"({ id, payload }) {\n    // Custom logic before job execution\n  },\n  \"job:after\"({ id, result }) {\n    // Custom logic after job execution\n  },\n  \"job:error\"({ id, error }) {\n    // Custom error handling\n  }\n}\n```\n\n### Event Predicates\n\nEvent-driven jobs support various predicates:\n\n```javascript\non: {\n  any: [\n    { tagCreate: \"v*.*.*\" },           // New version tags\n    { semverTag: true },               // Any semver tag\n    { mergeTo: \"main\" },               // Merge to main branch\n    { pushTo: \"develop\" },             // Push to develop branch\n    { pathChanged: [\"src/**/*.js\"] },  // JavaScript files changed\n    { pathAdded: [\"docs/**/*.md\"] },   // New markdown files\n    { pathModified: [\"*.json\"] },      // JSON files modified\n    { message: \"release\" },            // Commit message contains \"release\"\n    { authorEmail: \"*@company.com\" },  // Author email pattern\n    { signed: true }                   // Signed commits\n  ]\n}\n```\n\n### Cron Expressions\n\nSupported cron format: `minute hour day month weekday`\n\n```javascript\ncron: \"0 2 * * *\"     // Daily at 2 AM\ncron: \"*/15 * * * *\"  // Every 15 minutes\ncron: \"0 9-17 * * 1-5\" // Every hour 9-17, weekdays only\n```\n\n### Job Context\n\nJobs receive a rich context object:\n\n```javascript\nasync run({ ctx, trigger, payload }) {\n  // ctx.root - Working directory\n  // ctx.nowISO - Current timestamp\n  // ctx.env - Environment variables\n  // ctx.git - Git repository info\n  // ctx.trigger - Event trigger details\n  // ctx.logger - Logger instance\n  // payload - Job payload data\n}\n```\n\n## 🧪 Testing\n\n### E2E Tests\n\nThe playground includes comprehensive E2E tests:\n\n```bash\n# Run E2E tests from project root\nnpx vitest run tests/playground-e2e.test.mjs\n```\n\n### Test Coverage\n\n- ✅ Job discovery and execution\n- ✅ Template rendering\n- ✅ Git integration\n- ✅ Lock management\n- ✅ Hooks system\n- ✅ Error handling\n- ✅ Performance validation\n\n### Manual Testing\n\n```bash\n# Test job execution\nnode -e \"import('./dev.mjs').then(m=>m.run('docs:changelog'))\"\n\n# Test daemon functionality\nnode -e \"import('./dev.mjs').then(m=>m.startDaemon())\"\n\n# Test event evaluation\nnode -e \"import('./dev.mjs').then(m=>m.stats())\"\n```\n\n## 📊 Monitoring and Debugging\n\n### Git Receipts\n\nAll job executions are stored as git notes:\n\n```bash\n# View execution receipts\ngit notes --ref=refs/notes/gitvan/results show HEAD\n```\n\n### Daemon Status\n\n```bash\n# Check daemon status\npnpm status\n```\n\n### Job Statistics\n\n```bash\n# View job statistics\nnode -e \"import('./dev.mjs').then(m=>m.stats())\"\n```\n\n### Logs and Debugging\n\nThe playground provides detailed logging through hooks:\n\n```\n[playground] 🚀 Starting job: docs:changelog\n[playground] 🔒 Lock acquired: docs:changelog\n[playground] ✅ Job done: docs:changelog OK\n[playground] 🔓 Lock released: docs:changelog\n[playground] 📝 Receipt written: docs:changelog\n```\n\n## 🚀 Production Deployment\n\n### Prerequisites\n\n- Git repository with proper permissions\n- Node.js 18+ environment\n- GitVan package installed\n\n### Configuration\n\n1. Copy `gitvan.config.js` to your project\n2. Customize hooks and settings\n3. Create job files in `jobs/` directory\n4. Add templates in `templates/` directory\n\n### Daemon Deployment\n\n```bash\n# Start daemon in production\nnode -e \"import('./dev.mjs').then(m=>m.startDaemon())\"\n```\n\n### CI/CD Integration\n\n```yaml\n# GitHub Actions example\n- name: Run GitVan Jobs\n  run: |\n    cd playground\n    pnpm install\n    pnpm run:changelog\n```\n\n## 🔍 Troubleshooting\n\n### Common Issues\n\n1. **Job not discovered**: Check file naming and exports\n2. **Template not found**: Verify template directory configuration\n3. **Git operations fail**: Ensure repository is initialized\n4. **Lock conflicts**: Check for concurrent executions\n5. **Hooks not firing**: Verify hook configuration\n\n### Debug Commands\n\n```bash\n# Check job discovery\npnpm list\n\n# Test individual components\nnode -e \"import('./dev.mjs').then(m=>m.run('test:simple'))\"\n\n# View git receipts\ngit notes --ref=refs/notes/gitvan/results show HEAD\n\n# Check daemon status\npnpm status\n```\n\n### Performance Optimization\n\n- Use `noCache: true` for development\n- Enable caching in production\n- Monitor job execution times\n- Use appropriate cron intervals\n\n## 📚 API Reference\n\n### Job Definition API\n\n```javascript\ndefineJob({\n  id: \"custom:id\",           // Optional, inferred from path\n  kind: \"atomic\",            // atomic, batch, daemon\n  cron: \"0 2 * * *\",         // Cron expression\n  on: { /* predicates */ },  // Event predicates\n  meta: {                    // Job metadata\n    desc: \"Description\",\n    tags: [\"tag1\", \"tag2\"]\n  },\n  async run({ ctx, trigger, payload }) {\n    // Job implementation\n    return { ok: true, artifacts: [] };\n  }\n})\n```\n\n### Composable APIs\n\n```javascript\n// Git operations\nconst git = useGit();\nawait git.head();\nawait git.getCurrentBranch();\nawait git.log(\"%h%x09%s\", [\"-n\", \"30\"]);\n\n// Template rendering\nconst template = await useTemplate();\nawait template.renderToFile(\"template.njk\", \"output.md\", data);\n```\n\n### Event Predicates\n\n```javascript\n{\n  any: [/* OR conditions */],\n  all: [/* AND conditions */],\n  tagCreate: \"pattern\",\n  semverTag: true,\n  mergeTo: \"branch\",\n  pushTo: \"branch\",\n  pathChanged: [\"glob/**/*\"],\n  pathAdded: [\"glob/**/*\"],\n  pathModified: [\"glob/**/*\"],\n  message: \"pattern\",\n  authorEmail: \"pattern\",\n  signed: true\n}\n```\n\n## 🎯 Best Practices\n\n### Job Design\n\n1. **Keep jobs focused**: One job, one responsibility\n2. **Handle errors gracefully**: Use try-catch blocks\n3. **Return meaningful results**: Include artifacts and data\n4. **Use descriptive metadata**: Clear descriptions and tags\n5. **Test thoroughly**: Validate job behavior\n\n### Template Design\n\n1. **Use semantic variable names**: Clear, descriptive names\n2. **Handle missing data**: Use default values\n3. **Keep templates simple**: Avoid complex logic\n4. **Use filters appropriately**: Leverage built-in filters\n\n### Configuration\n\n1. **Environment-specific configs**: Different settings per environment\n2. **Secure sensitive data**: Use environment variables\n3. **Document custom hooks**: Explain hook behavior\n4. **Version control configs**: Track configuration changes\n\n### Performance\n\n1. **Optimize git operations**: Use appropriate git commands\n2. **Cache expensive operations**: Enable template caching\n3. **Monitor execution times**: Track performance metrics\n4. **Use appropriate intervals**: Balance frequency vs. performance\n\n## 🔗 Related Documentation\n\n- [GitVan Core Documentation](../README.md)\n- [Job System Specification](../../specs/002-composables-system/SPECIFICATION.md)\n- [Template Engine Guide](../../specs/003-template-engine/SPECIFICATION.md)\n- [E2E Test Results](../playground-e2e-results.md)\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Add tests for new functionality\n4. Ensure all tests pass\n5. Submit a pull request\n\n## 📄 License\n\nMIT License - see [LICENSE](../../LICENSE) for details.\n"
        }
    ]
}