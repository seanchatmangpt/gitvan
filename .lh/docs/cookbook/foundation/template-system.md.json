{
    "sourceFile": "docs/cookbook/foundation/template-system.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1758051806635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758097968783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,10 +131,10 @@\n     const git = useGit();\n     const template = await useTemplate();\n     \n     // Get repository information\n-    const head = await git.head();\n-    const branch = await git.getCurrentBranch();\n+    const head = await git.currentHead();\n+    const branch = await git.currentBranch();\n     const commitCount = await git.getCommitCount();\n     const isClean = await git.isClean();\n     \n     // Get recent commits for changelog\n"
                }
            ],
            "date": 1758051806635,
            "name": "Commit-0",
            "content": "# Template System\n\n## üéØ **Recipe Overview**\n\n**Category**: Foundation  \n**Difficulty**: Intermediate  \n**Time**: 45 minutes  \n**Prerequisites**: Basic GitVan knowledge, Nunjucks template experience\n\n## üìã **Problem**\n\nYou need to generate dynamic content using templates but want to leverage GitVan's template system with custom filters, reusable components, and advanced templating features.\n\n## üç≥ **Solution**\n\n### **Step 1: Create Template Directory Structure**\n\n```bash\n# Create template directories\nmkdir -p templates/{layouts,components,partials}\n\n# Create template files\ntouch templates/layouts/base.njk\ntouch templates/components/header.njk\ntouch templates/components/footer.njk\ntouch templates/partials/meta.njk\n```\n\n### **Step 2: Create Base Layout Template**\n\n```njk\n<!-- templates/layouts/base.njk -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{{ title | default(\"GitVan Generated Document\") }}</title>\n    {% include \"partials/meta.njk\" %}\n    <style>\n        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; }\n        .container { max-width: 800px; margin: 0 auto; padding: 20px; }\n        .header { border-bottom: 1px solid #eee; padding-bottom: 20px; margin-bottom: 30px; }\n        .footer { border-top: 1px solid #eee; padding-top: 20px; margin-top: 30px; color: #666; }\n        .meta { background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0; }\n        .code { background: #f1f3f4; padding: 2px 6px; border-radius: 3px; font-family: monospace; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        {% include \"components/header.njk\" %}\n        \n        <main>\n            {% block content %}{% endblock %}\n        </main>\n        \n        {% include \"components/footer.njk\" %}\n    </div>\n</body>\n</html>\n```\n\n### **Step 3: Create Component Templates**\n\n```njk\n<!-- templates/components/header.njk -->\n<header class=\"header\">\n    <h1>{{ title | default(\"GitVan Document\") }}</h1>\n    {% if subtitle %}\n        <p class=\"subtitle\">{{ subtitle }}</p>\n    {% endif %}\n    {% if generatedAt %}\n        <div class=\"meta\">\n            <strong>Generated:</strong> {{ generatedAt | date(\"YYYY-MM-DD HH:mm:ss\") }}\n            {% if repository %}\n                | <strong>Repository:</strong> <span class=\"code\">{{ repository.branch }}</span>\n                | <strong>Commit:</strong> <span class=\"code\">{{ repository.head }}</span>\n            {% endif %}\n        </div>\n    {% endif %}\n</header>\n```\n\n```njk\n<!-- templates/components/footer.njk -->\n<footer class=\"footer\">\n    <p>\n        Generated by <strong>GitVan Jobs System</strong>\n        {% if version %}v{{ version }}{% endif %}\n        {% if environment %}in {{ environment | titleize }} environment{% endif %}\n    </p>\n    {% if links %}\n        <nav>\n            {% for link in links %}\n                <a href=\"{{ link.url }}\">{{ link.text }}</a>\n                {% if not loop.last %} | {% endif %}\n            {% endfor %}\n        </nav>\n    {% endif %}\n</footer>\n```\n\n### **Step 4: Create Partial Templates**\n\n```njk\n<!-- templates/partials/meta.njk -->\n<meta name=\"description\" content=\"{{ description | default('GitVan generated document') }}\">\n<meta name=\"generator\" content=\"GitVan Jobs System\">\n{% if keywords %}\n    <meta name=\"keywords\" content=\"{{ keywords | join(', ') }}\">\n{% endif %}\n{% if author %}\n    <meta name=\"author\" content=\"{{ author }}\">\n{% endif %}\n```\n\n### **Step 5: Create Advanced Template Job**\n\n```javascript\n// jobs/templates/advanced-template.mjs\nimport { defineJob } from \"gitvan/define\";\nimport { useGit } from \"gitvan/useGit\";\nimport { useTemplate } from \"gitvan/useTemplate\";\n\nexport default defineJob({\n  meta: {\n    desc: \"Generate advanced document using template system with layouts and components\",\n    tags: [\"template\", \"advanced\", \"layout\", \"components\"]\n  },\n  async run({ ctx }) {\n    const git = useGit();\n    const template = await useTemplate();\n    \n    // Get repository information\n    const head = await git.head();\n    const branch = await git.getCurrentBranch();\n    const commitCount = await git.getCommitCount();\n    const isClean = await git.isClean();\n    \n    // Get recent commits for changelog\n    const logOutput = await git.log(\"%h%x09%s%x09%an%x09%ad\", [\"-n\", \"10\"]);\n    const commits = logOutput.split(\"\\n\").filter(Boolean).map(line => {\n      const [hash, subject, author, date] = line.split(\"\\t\");\n      return { hash, subject, author, date };\n    });\n    \n    // Prepare template data\n    const data = {\n      title: \"GitVan Advanced Template Demo\",\n      subtitle: \"Demonstrating advanced templating features\",\n      description: \"A comprehensive example of GitVan's template system\",\n      keywords: [\"gitvan\", \"templates\", \"automation\", \"git\", \"workflow\"],\n      author: \"GitVan Team\",\n      generatedAt: ctx.nowISO,\n      version: \"2.0.0\",\n      environment: process.env.NODE_ENV || \"development\",\n      repository: {\n        head: head.substring(0, 8),\n        branch,\n        commitCount,\n        isClean\n      },\n      commits,\n      sections: [\n        {\n          title: \"Repository Information\",\n          content: \"Current repository status and information\",\n          items: [\n            { label: \"Branch\", value: branch },\n            { label: \"Head Commit\", value: head.substring(0, 8) },\n            { label: \"Total Commits\", value: commitCount.toString() },\n            { label: \"Working Directory\", value: isClean ? \"Clean\" : \"Modified\" }\n          ]\n        },\n        {\n          title: \"Recent Commits\",\n          content: \"Latest commits in the repository\",\n          items: commits.map(commit => ({\n            label: commit.hash,\n            value: commit.subject,\n            meta: `${commit.author} - ${commit.date}`\n          }))\n        },\n        {\n          title: \"System Information\",\n          content: \"Current system and environment details\",\n          items: [\n            { label: \"Node.js Version\", value: process.version },\n            { label: \"Platform\", value: process.platform },\n            { label: \"Environment\", value: process.env.NODE_ENV || \"development\" },\n            { label: \"Generated At\", value: ctx.nowISO }\n          ]\n        }\n      ],\n      links: [\n        { text: \"GitVan Documentation\", url: \"https://github.com/sac/gitvan\" },\n        { text: \"Template Guide\", url: \"https://github.com/sac/gitvan/docs/templates\" },\n        { text: \"Job Examples\", url: \"https://github.com/sac/gitvan/docs/cookbook\" }\n      ]\n    };\n    \n    // Render template to file\n    const outputPath = await template.renderToFile(\n      \"advanced-document.njk\",\n      \"dist/advanced-template-demo.html\",\n      data\n    );\n    \n    ctx.logger.log(`üìù Advanced template document created: ${outputPath}`);\n    \n    return {\n      ok: true,\n      artifacts: [outputPath],\n      data: {\n        outputPath,\n        sections: data.sections.length,\n        commits: data.commits.length,\n        templateData: data\n      }\n    };\n  }\n});\n```\n\n### **Step 6: Create Advanced Document Template**\n\n```njk\n<!-- templates/advanced-document.njk -->\n{% extends \"layouts/base.njk\" %}\n\n{% block content %}\n<div class=\"document\">\n    {% for section in sections %}\n        <section class=\"section\">\n            <h2>{{ section.title }}</h2>\n            <p class=\"section-description\">{{ section.content }}</p>\n            \n            <div class=\"items\">\n                {% for item in section.items %}\n                    <div class=\"item\">\n                        <div class=\"item-header\">\n                            <strong>{{ item.label }}</strong>\n                            {% if item.meta %}\n                                <span class=\"item-meta\">{{ item.meta }}</span>\n                            {% endif %}\n                        </div>\n                        <div class=\"item-content\">{{ item.value }}</div>\n                    </div>\n                {% endfor %}\n            </div>\n        </section>\n    {% endfor %}\n    \n    {% if commits %}\n        <section class=\"section\">\n            <h2>Recent Commits</h2>\n            <div class=\"commits\">\n                {% for commit in commits %}\n                    <div class=\"commit\">\n                        <div class=\"commit-header\">\n                            <span class=\"commit-hash\">{{ commit.hash }}</span>\n                            <span class=\"commit-author\">{{ commit.author }}</span>\n                            <span class=\"commit-date\">{{ commit.date | date(\"MMM DD, YYYY\") }}</span>\n                        </div>\n                        <div class=\"commit-message\">{{ commit.subject }}</div>\n                    </div>\n                {% endfor %}\n            </div>\n        </section>\n    {% endif %}\n</div>\n\n<style>\n.section { margin-bottom: 40px; }\n.section h2 { color: #333; border-bottom: 2px solid #007acc; padding-bottom: 10px; }\n.section-description { color: #666; margin-bottom: 20px; }\n.items { display: grid; gap: 15px; }\n.item { background: #f8f9fa; padding: 15px; border-radius: 5px; }\n.item-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px; }\n.item-meta { color: #666; font-size: 0.9em; }\n.item-content { color: #333; }\n.commits { display: grid; gap: 10px; }\n.commit { background: #f8f9fa; padding: 15px; border-radius: 5px; border-left: 4px solid #007acc; }\n.commit-header { display: flex; gap: 15px; margin-bottom: 8px; }\n.commit-hash { font-family: monospace; background: #e9ecef; padding: 2px 6px; border-radius: 3px; }\n.commit-author { color: #666; }\n.commit-date { color: #666; font-size: 0.9em; }\n.commit-message { color: #333; font-weight: 500; }\n</style>\n{% endblock %}\n```\n\n## üîç **Explanation**\n\n### **Template Architecture**\n\n1. **Layouts**: Base templates with common structure\n2. **Components**: Reusable template components\n3. **Partials**: Small template fragments\n4. **Blocks**: Content areas for extension\n\n### **Template Inheritance**\n\n- **`extends`**: Inherit from a base template\n- **`block`**: Define content areas\n- **`include`**: Include other templates\n- **`import`**: Import template macros\n\n### **Custom Filters**\n\nGitVan provides built-in filters:\n- **`capitalize`**: Capitalize first letter\n- **`pluralize`**: Convert to plural form\n- **`camelize`**: Convert to camelCase\n- **`underscore`**: Convert to snake_case\n- **`dasherize`**: Convert to kebab-case\n- **`humanize`**: Convert to human-readable form\n- **`titleize`**: Convert to Title Case\n- **`json`**: Pretty-print JSON\n\n## üîÑ **Variations**\n\n### **Variation 1: Multi-Format Output**\n\n```javascript\n// jobs/templates/multi-format.mjs\nimport { defineJob } from \"gitvan/define\";\nimport { useTemplate } from \"gitvan/useTemplate\";\n\nexport default defineJob({\n  meta: {\n    desc: \"Generate documents in multiple formats using templates\",\n    tags: [\"template\", \"multi-format\", \"html\", \"markdown\"]\n  },\n  async run({ ctx }) {\n    const template = await useTemplate();\n    \n    const data = {\n      title: \"Multi-Format Document\",\n      content: \"This document is generated in multiple formats\",\n      timestamp: ctx.nowISO\n    };\n    \n    // Generate HTML version\n    const htmlPath = await template.renderToFile(\n      \"document.njk\",\n      \"dist/document.html\",\n      { ...data, format: \"html\" }\n    );\n    \n    // Generate Markdown version\n    const markdownPath = await template.renderToFile(\n      \"document-markdown.njk\",\n      \"dist/document.md\",\n      { ...data, format: \"markdown\" }\n    );\n    \n    return {\n      ok: true,\n      artifacts: [htmlPath, markdownPath],\n      data: { htmlPath, markdownPath }\n    };\n  }\n});\n```\n\n### **Variation 2: Dynamic Template Selection**\n\n```javascript\n// jobs/templates/dynamic-template.mjs\nimport { defineJob } from \"gitvan/define\";\nimport { useTemplate } from \"gitvan/useTemplate\";\n\nexport default defineJob({\n  meta: {\n    desc: \"Select template dynamically based on data\",\n    tags: [\"template\", \"dynamic\", \"selection\"]\n  },\n  async run({ ctx, payload }) {\n    const template = await useTemplate();\n    \n    const documentType = payload?.type || \"default\";\n    const templateName = `templates/${documentType}.njk`;\n    \n    const data = {\n      title: `${documentType | titleize} Document`,\n      content: `This is a ${documentType} document`,\n      timestamp: ctx.nowISO,\n      type: documentType\n    };\n    \n    const outputPath = await template.renderToFile(\n      templateName,\n      `dist/${documentType}-document.html`,\n      data\n    );\n    \n    return {\n      ok: true,\n      artifacts: [outputPath],\n      data: { outputPath, templateName, documentType }\n    };\n  }\n});\n```\n\n### **Variation 3: Template Macros**\n\n```njk\n<!-- templates/macros/common.njk -->\n{% macro renderSection(title, items) %}\n<section class=\"section\">\n    <h2>{{ title }}</h2>\n    <div class=\"items\">\n        {% for item in items %}\n            <div class=\"item\">\n                <strong>{{ item.label }}:</strong> {{ item.value }}\n            </div>\n        {% endfor %}\n    </div>\n</section>\n{% endmacro %}\n\n{% macro renderCommit(commit) %}\n<div class=\"commit\">\n    <span class=\"hash\">{{ commit.hash }}</span>\n    <span class=\"message\">{{ commit.subject }}</span>\n    <span class=\"author\">{{ commit.author }}</span>\n</div>\n{% endmacro %}\n```\n\n```njk\n<!-- templates/using-macros.njk -->\n{% import \"macros/common.njk\" as common %}\n\n{% extends \"layouts/base.njk\" %}\n\n{% block content %}\n    {{ common.renderSection(\"Repository Info\", repositoryItems) }}\n    {{ common.renderSection(\"System Info\", systemItems) }}\n    \n    <section class=\"commits\">\n        <h2>Recent Commits</h2>\n        {% for commit in commits %}\n            {{ common.renderCommit(commit) }}\n        {% endfor %}\n    </section>\n{% endblock %}\n```\n\n## üéØ **Best Practices**\n\n### **Template Organization**\n- **Logical structure**: Organize templates by purpose and reusability\n- **Naming conventions**: Use clear, descriptive names\n- **Separation of concerns**: Keep layouts, components, and content separate\n\n### **Performance**\n- **Template caching**: Enable caching in production\n- **Minimal includes**: Avoid excessive template includes\n- **Efficient loops**: Use appropriate loop constructs\n\n### **Maintainability**\n- **Documentation**: Document template variables and usage\n- **Version control**: Keep templates in version control\n- **Testing**: Test templates with various data sets\n\n### **Security**\n- **Input validation**: Validate template data\n- **XSS prevention**: Use appropriate escaping\n- **Access control**: Restrict template access\n\n## üîó **Related Recipes**\n\n- [Basic Job Setup](./basic-job-setup.md) - Getting started with jobs\n- [Configuration Management](./configuration-management.md) - Managing configurations\n- [Error Handling](./error-handling.md) - Robust error handling patterns\n\n## üìö **Resources**\n\n- [Nunjucks Documentation](https://mozilla.github.io/nunjucks/)\n- [GitVan Template Guide](../../docs/templates.md)\n- [Template Filters](../../docs/template-filters.md)\n\n## ü§ù **Contributors**\n\n- **Author**: GitVan Team\n- **Last Updated**: 2024-09-16\n- **Version**: 1.0.0\n\n---\n\n**Next Recipe**: [Error Handling](./error-handling.md)\n"
        }
    ]
}