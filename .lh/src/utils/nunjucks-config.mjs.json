{
    "sourceFile": "src/utils/nunjucks-config.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1758046012305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1758311609513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,8 +45,9 @@\n  */\n function addBuiltInFilters(env) {\n   // JSON serialization with configurable spacing\n   env.addFilter(\"json\", (v, space = 0) => JSON.stringify(v, null, space));\n+  env.addFilter(\"tojson\", (v) => JSON.stringify(v)); // Alias for workflow compatibility\n \n   // URL-safe slug generation\n   env.addFilter(\"slug\", (s) =>\n     String(s)\n@@ -60,8 +61,75 @@\n   env.addFilter(\"lower\", (s) => String(s).toLowerCase());\n \n   // String padding utility\n   env.addFilter(\"pad\", (s, n = 2, ch = \"0\") => String(s).padStart(n, ch));\n+\n+  // String manipulation filters for workflow templates\n+  env.addFilter(\"split\", (s, delimiter = \" \") => String(s).split(delimiter));\n+  env.addFilter(\"join\", (arr, delimiter = \", \") => Array.isArray(arr) ? arr.join(delimiter) : String(arr));\n+  env.addFilter(\"length\", (v) => {\n+    if (Array.isArray(v)) return v.length;\n+    if (typeof v === \"object\" && v !== null) return Object.keys(v).length;\n+    return String(v).length;\n+  });\n+\n+  // Date formatting filter\n+  env.addFilter(\"date\", (date, format = \"YYYY-MM-DD\") => {\n+    const d = new Date(date === \"now\" ? new Date() : date);\n+    if (isNaN(d.getTime())) return String(date);\n+    \n+    const year = d.getFullYear();\n+    const month = String(d.getMonth() + 1).padStart(2, \"0\");\n+    const day = String(d.getDate()).padStart(2, \"0\");\n+    const hours = String(d.getHours()).padStart(2, \"0\");\n+    const minutes = String(d.getMinutes()).padStart(2, \"0\");\n+    const seconds = String(d.getSeconds()).padStart(2, \"0\");\n+    \n+    return format\n+      .replace(\"YYYY\", year)\n+      .replace(\"MM\", month)\n+      .replace(\"DD\", day)\n+      .replace(\"HH\", hours)\n+      .replace(\"mm\", minutes)\n+      .replace(\"ss\", seconds);\n+  });\n+\n+  // Array manipulation filters\n+  env.addFilter(\"sum\", (arr, attribute = null) => {\n+    if (!Array.isArray(arr)) return 0;\n+    return arr.reduce((sum, item) => {\n+      const value = attribute ? item[attribute] : item;\n+      return sum + (Number(value) || 0);\n+    }, 0);\n+  });\n+\n+  env.addFilter(\"max\", (arr, attribute = null) => {\n+    if (!Array.isArray(arr) || arr.length === 0) return null;\n+    return arr.reduce((max, item) => {\n+      const value = attribute ? item[attribute] : item;\n+      const numValue = Number(value);\n+      return numValue > max ? numValue : max;\n+    }, Number.MIN_SAFE_INTEGER);\n+  });\n+\n+  env.addFilter(\"min\", (arr, attribute = null) => {\n+    if (!Array.isArray(arr) || arr.length === 0) return null;\n+    return arr.reduce((min, item) => {\n+      const value = attribute ? item[attribute] : item;\n+      const numValue = Number(value);\n+      return numValue < min ? numValue : min;\n+    }, Number.MAX_SAFE_INTEGER);\n+  });\n+\n+  // Type conversion filters\n+  env.addFilter(\"int\", (v) => parseInt(String(v), 10) || 0);\n+  env.addFilter(\"float\", (v) => parseFloat(String(v)) || 0);\n+  env.addFilter(\"string\", (v) => String(v));\n+  env.addFilter(\"bool\", (v) => Boolean(v));\n+\n+  // Utility filters\n+  env.addFilter(\"default\", (v, defaultValue) => v != null ? v : defaultValue);\n+  env.addFilter(\"round\", (v, precision = 0) => Number(Number(v).toFixed(precision)));\n }\n \n /**\n  * Add inflection filters for string transformations\n@@ -227,8 +295,21 @@\n   return env;\n }\n \n /**\n+ * Ensure a Nunjucks environment with default configuration\n+ * @param {string} templateDir - Directory containing templates\n+ * @returns {nunjucks.Environment} Configured Nunjucks environment\n+ */\n+export function ensureNunjucksEnv(templateDir = process.cwd()) {\n+  return getCachedEnvironment({\n+    paths: [templateDir],\n+    autoescape: false,\n+    noCache: true\n+  });\n+}\n+\n+/**\n  * List all available filters\n  * @returns {Object} Object with filter categories and their filters\n  */\n export function listAvailableFilters() {\n"
                }
            ],
            "date": 1758046012305,
            "name": "Commit-0",
            "content": "// src/utils/nunjucks-config.mjs\n// GitVan v2 â€” Nunjucks Environment Configuration\n// Centralized configuration for all Nunjucks environment manipulation\n\nimport nunjucks from \"nunjucks\";\nimport * as inflection from \"inflection\";\n\n/**\n * Environment cache for performance optimization\n * Key: JSON stringified environment configuration\n * Value: Configured Nunjucks Environment instance\n */\nconst _envCache = new Map();\n\n/**\n * Generate cache key for environment instances\n * @param {Object} config - Environment configuration\n * @param {string[]} config.paths - Template search paths\n * @param {boolean} config.autoescape - HTML auto-escaping setting\n * @param {boolean} config.noCache - Template caching setting\n * @returns {string} Cache key\n */\nexport function envKey({ paths, autoescape, noCache }) {\n  return JSON.stringify({ paths, autoescape, noCache });\n}\n\n/**\n * Add determinism guards to prevent non-deterministic operations\n * @param {nunjucks.Environment} env - Nunjucks environment instance\n */\nfunction addDeterminismGuards(env) {\n  // Prevent non-deterministic operations that would break reproducible builds\n  env.addGlobal(\"now\", () => {\n    throw new Error(\"Templates must not call now(); inject a value.\");\n  });\n\n  env.addGlobal(\"random\", () => {\n    throw new Error(\"Templates must not use random(); inject values.\");\n  });\n}\n\n/**\n * Add built-in pure filters to the environment\n * @param {nunjucks.Environment} env - Nunjucks environment instance\n */\nfunction addBuiltInFilters(env) {\n  // JSON serialization with configurable spacing\n  env.addFilter(\"json\", (v, space = 0) => JSON.stringify(v, null, space));\n\n  // URL-safe slug generation\n  env.addFilter(\"slug\", (s) =>\n    String(s)\n      .toLowerCase()\n      .replace(/[^a-z0-9]+/g, \"-\")\n      .replace(/(^-|-$)/g, \"\"),\n  );\n\n  // String case transformations\n  env.addFilter(\"upper\", (s) => String(s).toUpperCase());\n  env.addFilter(\"lower\", (s) => String(s).toLowerCase());\n\n  // String padding utility\n  env.addFilter(\"pad\", (s, n = 2, ch = \"0\") => String(s).padStart(n, ch));\n}\n\n/**\n * Add inflection filters for string transformations\n * @param {nunjucks.Environment} env - Nunjucks environment instance\n */\nfunction addInflectionFilters(env) {\n  // Pluralization and singularization\n  env.addFilter(\"pluralize\", (s, plural) =>\n    inflection.pluralize(String(s), plural),\n  );\n  env.addFilter(\"singularize\", (s, singular) =>\n    inflection.singularize(String(s), singular),\n  );\n\n  // Count-based inflection\n  env.addFilter(\"inflect\", (s, count, singular, plural) =>\n    inflection.inflect(String(s), Number(count), singular, plural),\n  );\n\n  // Case transformations\n  env.addFilter(\"camelize\", (s, lowFirst = false) =>\n    inflection.camelize(String(s), !!lowFirst),\n  );\n  env.addFilter(\"underscore\", (s, allUpper = false) =>\n    inflection.underscore(String(s), !!allUpper),\n  );\n  env.addFilter(\"humanize\", (s, lowFirst = false) =>\n    inflection.humanize(String(s), !!lowFirst),\n  );\n\n  // String formatting\n  env.addFilter(\"capitalize\", (s) => inflection.capitalize(String(s)));\n  env.addFilter(\"dasherize\", (s) => inflection.dasherize(String(s)));\n  env.addFilter(\"titleize\", (s) => inflection.titleize(String(s)));\n\n  // Module and class transformations\n  env.addFilter(\"demodulize\", (s) => inflection.demodulize(String(s)));\n  env.addFilter(\"tableize\", (s) => inflection.tableize(String(s)));\n  env.addFilter(\"classify\", (s) => inflection.classify(String(s)));\n\n  // Database-related transformations\n  env.addFilter(\"foreign_key\", (s, dropIdUBar = false) =>\n    inflection.foreign_key(String(s), !!dropIdUBar),\n  );\n\n  // Ordinal number formatting\n  env.addFilter(\"ordinalize\", (s) => inflection.ordinalize(String(s)));\n\n  // Transform with array of operations\n  env.addFilter(\"transform\", (s, arr = []) =>\n    inflection.transform(String(s), Array.isArray(arr) ? arr : [arr]),\n  );\n}\n\n/**\n * Create a fully configured Nunjucks environment\n * @param {Object} config - Environment configuration\n * @param {string[]} config.paths - Template search paths\n * @param {boolean} config.autoescape - HTML auto-escaping setting\n * @param {boolean} config.noCache - Template caching setting\n * @returns {nunjucks.Environment} Configured Nunjucks environment\n */\nexport function createNunjucksEnvironment({ paths, autoescape, noCache }) {\n  // Create file system loader with template paths\n  const loader = new nunjucks.FileSystemLoader(paths, { noCache });\n\n  // Create environment with configuration\n  const env = new nunjucks.Environment(loader, {\n    autoescape,\n    throwOnUndefined: true, // Fail fast on undefined variables\n  });\n\n  // Add all filter categories\n  addDeterminismGuards(env);\n  addBuiltInFilters(env);\n  addInflectionFilters(env);\n\n  return env;\n}\n\n/**\n * Get or create cached environment instance\n * @param {Object} config - Environment configuration\n * @returns {nunjucks.Environment} Cached or new environment instance\n */\nexport function getCachedEnvironment(config) {\n  const key = envKey(config);\n  let env = _envCache.get(key);\n\n  if (!env) {\n    env = createNunjucksEnvironment(config);\n    _envCache.set(key, env);\n  }\n\n  return env;\n}\n\n/**\n * Clear the environment cache\n * Useful for testing or when configuration changes\n */\nexport function clearEnvironmentCache() {\n  _envCache.clear();\n}\n\n/**\n * Get cache statistics\n * @returns {Object} Cache statistics\n */\nexport function getCacheStats() {\n  return {\n    size: _envCache.size,\n    keys: Array.from(_envCache.keys()),\n  };\n}\n\n/**\n * Validate environment configuration\n * @param {Object} config - Environment configuration to validate\n * @returns {Object} Validation result with errors array\n */\nexport function validateEnvironmentConfig(config) {\n  const errors = [];\n\n  if (!Array.isArray(config.paths) || config.paths.length === 0) {\n    errors.push(\"paths must be a non-empty array\");\n  }\n\n  if (typeof config.autoescape !== \"boolean\") {\n    errors.push(\"autoescape must be a boolean\");\n  }\n\n  if (typeof config.noCache !== \"boolean\") {\n    errors.push(\"noCache must be a boolean\");\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n  };\n}\n\n/**\n * Create a test environment with minimal configuration\n * @param {string[]} paths - Template paths (defaults to empty array)\n * @returns {nunjucks.Environment} Test environment\n */\nexport function createTestEnvironment(paths = []) {\n  const env = createNunjucksEnvironment({\n    paths,\n    autoescape: false,\n    noCache: true,\n  });\n\n  // Ensure autoescape property is accessible\n  Object.defineProperty(env, \"autoescape\", {\n    value: false,\n    writable: false,\n    enumerable: true,\n    configurable: false,\n  });\n\n  return env;\n}\n\n/**\n * List all available filters\n * @returns {Object} Object with filter categories and their filters\n */\nexport function listAvailableFilters() {\n  return {\n    builtIn: [\"json\", \"slug\", \"upper\", \"lower\", \"pad\"],\n    inflection: [\n      \"pluralize\",\n      \"singularize\",\n      \"inflect\",\n      \"camelize\",\n      \"underscore\",\n      \"humanize\",\n      \"capitalize\",\n      \"dasherize\",\n      \"titleize\",\n      \"demodulize\",\n      \"tableize\",\n      \"classify\",\n      \"foreign_key\",\n      \"ordinalize\",\n      \"transform\",\n    ],\n    guards: [\"now\", \"random\"], // These throw errors when called\n  };\n}\n"
        }
    ]
}