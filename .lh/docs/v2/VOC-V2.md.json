{
    "sourceFile": "docs/v2/VOC-V2.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758055240821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758055240821,
            "name": "Commit-0",
            "content": "# Voice of the Customer (VOC) — GitVan v2 (Synthetic)\n\n## 1) Personas & JTBD\n\n* **Product Dev (IC)**\n\n  * *JTBD:* “When I commit, I want routine docs/tests/release notes to happen automatically, so I don’t burn time on glue.”\n* **Release Engineer**\n\n  * *JTBD:* “When a tag is cut, I need deterministic changelogs/release notes and zero rework.”\n* **Compliance/Audit**\n\n  * *JTBD:* “When asked to prove what happened, I need signed receipts and a printable bundle in minutes.”\n* **SRE**\n\n  * *JTBD:* “When jobs run, I need once-only execution and worktree isolation without standing up infra.”\n* **Security**\n\n  * *JTBD:* “When automation mutates repos, I need signatures, provenance, and simple allow/deny policy.”\n* **Eng Manager**\n\n  * *JTBD:* “When onboarding teams, I need a 10-minute path to value and visible usage metrics.”\n\n## 2) Representative Quotes (synthetic)\n\n* “I shouldn’t open a CI editor to add a doc task. Put it in Git with the code.”\n* “If it ran, show me where, when, and why—**inside the repo**.”\n* “Cron and event jobs should be race-free across worktrees.”\n* “Give me a template engine that devs already grok.”\n* “Receipts or it didn’t happen.”\n\n## 3) Top Pains\n\n1. Glue scripts drift; CI YAML sprawl.\n2. No audit trail for routine jobs.\n3. Undetected duplicate executions.\n4. Slow ‘time-to-first-job’.\n5. Non-deterministic outputs (especially LLM).\n6. Worktree/branch interference.\n\n## 4) Must-Haves (CTQs)\n\n* **TTFJ < 10 min** with a minimal scaffold.\n* **p95 ≤ 300 ms** for simple jobs; **p99 ≤ 800 ms**.\n* **100% receipts** (git notes) for every run.\n* **Once-only** via atomic locks; **worktree-aware** keys.\n* **Nunjucks + inflection** out of the box.\n* **Filesystem discovery**: `jobs/`, `events/`.\n* **Determinism knobs**: `GITVAN_NOW`, seeded LLM, fixed env.\n\n## 5) Should-Haves\n\n* Dry-run/plan mode, artifact hashing, simple policy hooks, cron shorthand, friendly errors, playground repo.\n\n## 6) Won’t-Haves (v2)\n\n* External DB/queue, GUI designer, hosted control plane, marketplace UI.\n\n## 7) Dark-Matter 80/20 Tasks (prioritized)\n\n1. **Changelog** since last tag → `CHANGELOG.md`\n2. **Release notes** on semver tag\n3. **Dev diary** daily summary\n4. **Build/test explainer** (LLM-optional)\n5. **ADR drafter** from commit trailers\n6. **Backport planner** / cherry-pick list\n7. **Dependency change digest**\n8. **Incident write-up starter**\n9. **Reviewer routing** heuristics\n10. **SBOM + diff** on tag\n\n## 8) Acceptance Scenarios\n\n* **On-demand:** `gitvan job run docs:changelog` → file written, receipt added, <300 ms.\n* **Cron:** `events/cron/0_9_*_*_*.mjs` fires once at 09:00, no duplicates across worktrees.\n* **Event:** `message.contains(\"release:\")` triggers release note job; signed receipt recorded.\n* **Failure:** non-zero child exit → `status: ERROR` receipt with stderr; no partial artifacts.\n\n## 9) Objections & Responses\n\n* *“Notes don’t replicate everywhere.”* → supported on major hosts; provide export fallback.\n* *“Windows shell variance.”* → cross-platform exec helpers + cookbook examples.\n* *“LLM nondeterminism.”* → seed & record params; receipts store raw output + hash.\n\n## 10) Measurables (How we’ll know)\n\n* **TTFJ** stopwatch from clean repo → first successful job.\n* **Perf**: p50/p95/p99 job runtime on sample tasks.\n* **Receipts coverage**: runs with notes / total runs = 100%.\n* **Duplicates**: executions with same (job, sha, worktree) >1 **< 10 ppm**.\n* **Adoption**: # repos using ≥3 recipes within 30 days.\n\n## 11) Prioritized Requirements (MoSCoW)\n\n**Must:** jobs/events FS scan, daemon, atomic locks, receipts, nunjucks+inflection, composables (`useGit`, `useTemplate`), config defaults, CLI `job|daemon|verify|diagnose`.\n**Should:** dry-run/plan, artifact hash in receipts, helpful errors, scaffold command, playground.\n**Could:** simple policy hook, audit pack (print bundle), LLM helpers.\n**Won’t:** UI, external queue/DB, marketplace UI.\n\n## 12) Success Definition (Customer-visible)\n\n* “I dropped a file in `jobs/`, ran one command, and a deterministic artifact plus a signed receipt appeared—under a second—and I didn’t touch CI.”\n"
        }
    ]
}