{
    "sourceFile": "src/cli/job.mjs",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1758048492161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1758048492161,
            "name": "Commit-0",
            "content": "// src/cli/job.mjs\n// GitVan v2 â€” Job CLI Commands\n// Noun-verb CLI: gitvan job list|run|plan|schedule\n\nimport {\n  scanJobs,\n  getJobById,\n  validateJobs,\n  listJobs,\n  getJobStats,\n} from \"../jobs/scan.mjs\";\nimport { JobRunner } from \"../jobs/runner.mjs\";\nimport { loadOptions } from \"../config/loader.mjs\";\n\n/**\n * Job CLI command handler\n */\nexport class JobCLI {\n  constructor(options = {}) {\n    this.options = options;\n    this.config = null;\n    this.runner = null;\n  }\n\n  async init() {\n    this.config = await loadOptions();\n    this.runner = new JobRunner({\n      receiptsRef: this.config.receipts.ref,\n      hooks: this.config.hooks,\n    });\n  }\n\n  /**\n   * List all jobs\n   */\n  async list(args = {}) {\n    await this.init();\n\n    const jobs = await scanJobs({ cwd: this.config.rootDir });\n    const { format = \"table\", showMeta = false } = args;\n\n    if (format === \"json\") {\n      return JSON.stringify(jobs, null, 2);\n    }\n\n    const stats = getJobStats(jobs);\n    const validation = validateJobs(jobs);\n\n    if (validation.errors.length > 0) {\n      console.error(\"Job validation errors:\");\n      validation.errors.forEach((error) => console.error(`  - ${error}`));\n    }\n\n    if (validation.warnings.length > 0) {\n      console.warn(\"Job validation warnings:\");\n      validation.warnings.forEach((warning) => console.warn(`  - ${warning}`));\n    }\n\n    console.log(`\\nFound ${jobs.length} jobs:\\n`);\n    console.log(listJobs(jobs, { format, showMeta }));\n\n    console.log(`\\nStatistics:`);\n    console.log(`  Total: ${stats.total}`);\n    console.log(`  On-demand: ${stats.byMode[\"on-demand\"]}`);\n    console.log(`  Cron: ${stats.byMode.cron}`);\n    console.log(`  Event: ${stats.byMode.event}`);\n    console.log(`  Atomic: ${stats.byKind.atomic}`);\n    console.log(`  Batch: ${stats.byKind.batch}`);\n    console.log(`  Daemon: ${stats.byKind.daemon}`);\n  }\n\n  /**\n   * Run a specific job\n   */\n  async run(args = {}) {\n    await this.init();\n\n    const { id, payload = {}, force = false, head = null } = args;\n\n    if (!id) {\n      throw new Error(\"Job ID is required\");\n    }\n\n    const jobDef = await getJobById(id, { cwd: this.config.rootDir });\n    if (!jobDef) {\n      throw new Error(`Job not found: ${id}`);\n    }\n\n    // Check if job is already running\n    const isRunning = await this.runner.isJobRunning(id);\n    if (isRunning && !force) {\n      const lockInfo = await this.runner.getJobLockInfo(id);\n      throw new Error(\n        `Job ${id} is already running (fingerprint: ${lockInfo.fingerprint})`,\n      );\n    }\n\n    console.log(`Running job: ${id}`);\n    if (force) {\n      console.log(\"Force mode: bypassing lock\");\n    }\n\n    try {\n      const result = await this.runner.runJob(jobDef, {\n        payload: typeof payload === \"string\" ? JSON.parse(payload) : payload,\n        force,\n        head,\n      });\n\n      console.log(`Job completed successfully:`);\n      console.log(`  Duration: ${result.duration}ms`);\n      console.log(`  Fingerprint: ${result.fingerprint}`);\n      console.log(`  Artifacts: ${result.artifacts.length}`);\n\n      if (result.artifacts.length > 0) {\n        result.artifacts.forEach((artifact) => {\n          console.log(`    - ${artifact}`);\n        });\n      }\n\n      return result;\n    } catch (error) {\n      console.error(`Job failed: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * Plan which jobs would run\n   */\n  async plan(args = {}) {\n    await this.init();\n\n    const { changed = false } = args;\n\n    const jobs = await scanJobs({ cwd: this.config.rootDir });\n    const cronJobs = jobs.filter((job) => job.cron);\n    const eventJobs = jobs.filter((job) => job.on);\n    const onDemandJobs = jobs.filter((job) => job.mode === \"on-demand\");\n\n    console.log(\"Job execution plan:\\n\");\n\n    if (changed) {\n      console.log(\"Changed files analysis not yet implemented\");\n    }\n\n    console.log(\"Cron jobs (would run based on schedule):\");\n    cronJobs.forEach((job) => {\n      console.log(\n        `  ${job.id} - ${job.cron} - ${job.meta?.desc || \"No description\"}`,\n      );\n    });\n\n    console.log(\"\\nEvent jobs (would run on matching events):\");\n    eventJobs.forEach((job) => {\n      console.log(\n        `  ${job.id} - ${JSON.stringify(job.on)} - ${job.meta?.desc || \"No description\"}`,\n      );\n    });\n\n    console.log(\"\\nOn-demand jobs (available for manual execution):\");\n    onDemandJobs.forEach((job) => {\n      console.log(`  ${job.id} - ${job.meta?.desc || \"No description\"}`);\n    });\n\n    console.log(`\\nTotal: ${jobs.length} jobs`);\n  }\n\n  /**\n   * Show job details\n   */\n  async show(args = {}) {\n    await this.init();\n\n    const { id } = args;\n\n    if (!id) {\n      throw new Error(\"Job ID is required\");\n    }\n\n    const jobDef = await getJobById(id, { cwd: this.config.rootDir });\n    if (!jobDef) {\n      throw new Error(`Job not found: ${id}`);\n    }\n\n    console.log(`Job: ${jobDef.id}`);\n    console.log(`  Mode: ${jobDef.mode}`);\n    console.log(`  Kind: ${jobDef.kind}`);\n    console.log(`  File: ${jobDef.filePath}`);\n\n    if (jobDef.cron) {\n      console.log(`  Cron: ${jobDef.cron}`);\n    }\n\n    if (jobDef.on) {\n      console.log(`  Events: ${JSON.stringify(jobDef.on, null, 2)}`);\n    }\n\n    if (jobDef.meta?.desc) {\n      console.log(`  Description: ${jobDef.meta.desc}`);\n    }\n\n    if (jobDef.meta?.tags) {\n      console.log(`  Tags: ${jobDef.meta.tags.join(\", \")}`);\n    }\n\n    // Check lock status\n    const lockInfo = await this.runner.getJobLockInfo(id);\n    if (lockInfo.locked) {\n      console.log(`  Status: Running (${lockInfo.fingerprint})`);\n    } else {\n      console.log(`  Status: Available`);\n    }\n  }\n\n  /**\n   * Clear job lock\n   */\n  async unlock(args = {}) {\n    await this.init();\n\n    const { id } = args;\n\n    if (!id) {\n      throw new Error(\"Job ID is required\");\n    }\n\n    const lockInfo = await this.runner.getJobLockInfo(id);\n    if (!lockInfo.locked) {\n      console.log(`Job ${id} is not locked`);\n      return;\n    }\n\n    await this.runner.clearJobLock(id);\n    console.log(`Cleared lock for job: ${id}`);\n  }\n\n  /**\n   * List all locks\n   */\n  async locks(args = {}) {\n    await this.init();\n\n    const locks = await this.runner.listJobLocks();\n\n    if (locks.length === 0) {\n      console.log(\"No active job locks\");\n      return;\n    }\n\n    console.log(\"Active job locks:\");\n    for (const lock of locks) {\n      const lockInfo = await this.runner.getJobLockInfo(lock.id);\n      console.log(`  ${lock.id}: ${lockInfo.fingerprint}`);\n    }\n  }\n}\n\n/**\n * Main job CLI entry point\n */\nexport async function jobCLI(command, args = {}) {\n  const cli = new JobCLI();\n\n  switch (command) {\n    case \"list\":\n      return await cli.list(args);\n    case \"run\":\n      return await cli.run(args);\n    case \"plan\":\n      return await cli.plan(args);\n    case \"show\":\n      return await cli.show(args);\n    case \"unlock\":\n      return await cli.unlock(args);\n    case \"locks\":\n      return await cli.locks(args);\n    default:\n      throw new Error(`Unknown job command: ${command}`);\n  }\n}\n"
        }
    ]
}